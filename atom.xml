<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HengLin31</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://henglin31.github.io/"/>
  <updated>2019-10-22T02:26:52.000Z</updated>
  <id>https://henglin31.github.io/</id>
  
  <author>
    <name>Heng Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>以前設計的APP Icon</title>
    <link href="https://henglin31.github.io/2019/10/10/%E4%BB%A5%E5%89%8D%E8%A8%AD%E8%A8%88%E7%9A%84APP-Icon/"/>
    <id>https://henglin31.github.io/2019/10/10/以前設計的APP-Icon/</id>
    <published>2019-10-10T14:13:18.000Z</published>
    <updated>2019-10-22T02:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前設計的APP Icon，全部都是利用下班時在家用自己筆電內的illustrator繪製<br>因為以前是工作是做工業4.0大數據，所以大多的Icon都是與工廠有關<br><!-- 但無償提供給前公司使用沒有收取任何費用，所以沒有版權的問題我也沒有打算使用這些Icon營利，但為了維護前公司的權利，我並不允許前公司以外的人使用這些Icon在這裡只是單純記錄用 --></p><p><img src="/images/app-icon-001.png" width="50%" height="50%" alt="new icon list 1"><br><img src="/images/app-icon-002.png" width="50%" height="50%" alt="new icon list 2"></p><p>下面是第一代的Icon，那時還流行反光效果<br><!-- 在公司新成立時繪製的，有加反光的效果，在新版已移除 --></p><p><img src="/images/app-icon-003.png" width="50%" height="50%" alt="new icon list 3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前設計的APP Icon，全部都是利用下班時在家用自己筆電內的illustrator繪製&lt;br&gt;因為以前是工作是做工業4.0大數據，所以大多的Icon都是與工廠有關&lt;br&gt;&lt;!-- 但無償提供給前公司使用沒有收取任何費用，所以沒有版權的問題
我也沒有打算使用這些Icon營
      
    
    </summary>
    
    
      <category term="illustrator" scheme="https://henglin31.github.io/tags/illustrator/"/>
    
  </entry>
  
  <entry>
    <title>JCConf 2019</title>
    <link href="https://henglin31.github.io/2019/10/04/JCConf-2019/"/>
    <id>https://henglin31.github.io/2019/10/04/JCConf-2019/</id>
    <published>2019-10-04T13:14:23.000Z</published>
    <updated>2019-10-10T14:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>又過了一年，整整一年沒有更新…<br>今年又來參加JCConf了，順便記錄一下吧~</p><p><img src="/images/jcconf-2019-001.png" width="50%" height="50%" alt="img1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又過了一年，整整一年沒有更新…&lt;br&gt;今年又來參加JCConf了，順便記錄一下吧~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/jcconf-2019-001.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; alt=&quot;img1&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="conference" scheme="https://henglin31.github.io/tags/conference/"/>
    
  </entry>
  
  <entry>
    <title>JCConf 2018</title>
    <link href="https://henglin31.github.io/2018/10/21/JCConf-2018/"/>
    <id>https://henglin31.github.io/2018/10/21/JCConf-2018/</id>
    <published>2018-10-21T14:26:02.000Z</published>
    <updated>2019-10-10T14:10:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年又參加了JCConf</p><p><img src="/images/jcconf-2018-001.png" width="50%" height="50%" alt="img1"></p><p><br><br><br>還在Oath攤位抽到一隻黃色小鴨</p><p><img src="/images/jcconf-2018-002.png" width="50%" height="50%" alt="img2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年又參加了JCConf&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/jcconf-2018-001.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; alt=&quot;img1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;還在Oath攤位抽到一隻黃色小鴨&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="conference" scheme="https://henglin31.github.io/tags/conference/"/>
    
  </entry>
  
  <entry>
    <title>用illustrator幫自己畫一個新頭像</title>
    <link href="https://henglin31.github.io/2018/07/15/%E7%94%A8illustrator%E5%B9%AB%E8%87%AA%E5%B7%B1%E7%95%AB%E4%B8%80%E5%80%8B%E6%96%B0%E9%A0%AD%E5%83%8F/"/>
    <id>https://henglin31.github.io/2018/07/15/用illustrator幫自己畫一個新頭像/</id>
    <published>2018-07-15T15:33:59.000Z</published>
    <updated>2019-10-10T15:42:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上沒事，心血來潮用illustrator幫自己畫個Github的頭像</p><p>決定用我的名字Heng來創作，主題就用燃燒自己的生命來寫程式<br>所以Heng就畫成熊熊燃燒的樣子，畫成圓形方便在某些頭像濾鏡為圓形可直接套用<br>但看起來好像少了些什麼…</p><p><img src="/images/heng-001.png" width="50%" height="50%" alt="head img 1"></p><p><br><br><br>現在增加coding字型的底座，看起來就像火炬，滿符合我設定的主題</p><p><img src="/images/heng-002.png" width="50%" height="50%" alt="head img 2"></p><p>替換成功囉!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天晚上沒事，心血來潮用illustrator幫自己畫個Github的頭像&lt;/p&gt;
&lt;p&gt;決定用我的名字Heng來創作，主題就用燃燒自己的生命來寫程式&lt;br&gt;所以Heng就畫成熊熊燃燒的樣子，畫成圓形方便在某些頭像濾鏡為圓形可直接套用&lt;br&gt;但看起來好像少了些什麼…&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="illustrator" scheme="https://henglin31.github.io/tags/illustrator/"/>
    
  </entry>
  
  <entry>
    <title>使用視覺化來解釋數學原理的youtube - 3Blue1Brown</title>
    <link href="https://henglin31.github.io/2018/06/24/%E4%BD%BF%E7%94%A8%E8%A6%96%E8%A6%BA%E5%8C%96%E4%BE%86%E8%A7%A3%E9%87%8B%E6%95%B8%E5%AD%B8%E5%8E%9F%E7%90%86%E7%9A%84youtube-3Blue1Brown/"/>
    <id>https://henglin31.github.io/2018/06/24/使用視覺化來解釋數學原理的youtube-3Blue1Brown/</id>
    <published>2018-06-24T15:27:40.000Z</published>
    <updated>2019-10-11T08:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在搜尋傅立葉轉換時偶然看到的影片，要是在以前念碩士期間有這個youtube影片就好了，想當初自己花很多時間在研究<br><div class="video-container"><iframe src="//www.youtube.com/embed/spUNpyF58BY" frameborder="0" allowfullscreen></iframe></div></p><p>3Blue1Brown上還有許多數學相關視覺化影片，如：線性代數, 微積分, 類神經網路<br><div class="video-container"><iframe src="//www.youtube.com/embed/fNk_zzaMoSs" frameborder="0" allowfullscreen></iframe></div><br><div class="video-container"><iframe src="//www.youtube.com/embed/WUvTyaaNkzM" frameborder="0" allowfullscreen></iframe></div><br><div class="video-container"><iframe src="//www.youtube.com/embed/aircAruvnKk" frameborder="0" allowfullscreen></iframe></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在搜尋傅立葉轉換時偶然看到的影片，要是在以前念碩士期間有這個youtube影片就好了，想當初自己花很多時間在研究&lt;br&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/spUNpyF58BY
      
    
    </summary>
    
    
      <category term="math" scheme="https://henglin31.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gradle 自動初始化 Spock</title>
    <link href="https://henglin31.github.io/2018/05/20/%E4%BD%BF%E7%94%A8-Gradle-%E8%87%AA%E5%8B%95%E5%88%9D%E5%A7%8B%E5%8C%96-Spock/"/>
    <id>https://henglin31.github.io/2018/05/20/使用-Gradle-自動初始化-Spock/</id>
    <published>2018-05-20T14:23:10.000Z</published>
    <updated>2018-06-04T15:18:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次接觸gradle是從v1.7這個版本開始的(2013年)<br>工作上則是使用v2.2版本(2014年)，開發上測試是使用junit<br>但私底下都使用Spock來測試我自己寫的程式<br>因為寫過Spock後就不會想寫junit了… 只是工作上就是規定使用junit…也只能乖乖配合</p><p>最近升級gradle順便看一下有支援哪些新的功能，發現從v2.11開始可以直接建立Spock的專案了<br><a href="https://docs.gradle.org/2.11/release-notes.html?_ga=2.65549740.32788303.1526825308-661634901.1526653677" target="_blank" rel="noopener">gradle v2.11 release-notes</a></p><p>再往前查看了一下，發現早在v2.6版開始就有支援Spock，只是沒有指令可以直接建立Spock測試，所以只能算半成品吧，直到v2.11後才算完整<br><a href="https://docs.gradle.org/2.6/release-notes.html?_ga=2.129521294.32788303.1526825308-661634901.1526653677" target="_blank" rel="noopener">gradle v2.6 release-notes</a></p><p>指令很簡單，只需打一行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle init --type java-library --test-framework spock</span><br></pre></td></tr></table></figure></p><p>想到以後就不需要再自己引入Spock，太感動了<br>gradle真的是越來越方便，難怪Android會使用gradle來建立專案</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次接觸gradle是從v1.7這個版本開始的(2013年)&lt;br&gt;工作上則是使用v2.2版本(2014年)，開發上測試是使用junit&lt;br&gt;但私底下都使用Spock來測試我自己寫的程式&lt;br&gt;因為寫過Spock後就不會想寫junit了… 只是工作上就是規定使用juni
      
    
    </summary>
    
    
      <category term="gradle" scheme="https://henglin31.github.io/tags/gradle/"/>
    
      <category term="unit test" scheme="https://henglin31.github.io/tags/unit-test/"/>
    
  </entry>
  
  <entry>
    <title>提升Socket傳送Large file的速度</title>
    <link href="https://henglin31.github.io/2018/05/13/%E6%8F%90%E5%8D%87Socket%E5%82%B3%E9%80%81Large-file%E7%9A%84%E9%80%9F%E5%BA%A6/"/>
    <id>https://henglin31.github.io/2018/05/13/提升Socket傳送Large-file的速度/</id>
    <published>2018-05-13T15:43:53.000Z</published>
    <updated>2018-06-04T15:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在工作上遇到前端上傳large file後需再透過socket傳送給service處理<br>若只是幾kb的小檔案最快的做法當然是直接<br><code>write(byte[] b, 0, b.length);</code><br>但是遇到這麼大的檔案不可能這麼做，只能分成多次寫入<br>測試過各種方法後，發現直接取得檔案大小後直接切好buffer大小，接著操作OutputStream直接寫入的處理的速度是最快的</p><p>其實這個做法其實跟Java本身提供的BufferedOutputStream做法一樣<br>只是不需要另外檢查buffer是否寫滿(因為這個做法在一開始就知道要切到哪一個byte)<br>也少了一層FilterOutputStream (它們的繼承關係 BufferedOutputStream -&gt; FilterOutputStrean -&gt; OutputStream)<br>而是選擇直接操作OutputStream，所以才可以做到如此快速</p><p>提醒一下<br>這個方式比較不是適合用在”讀檔”後使用socket傳送大檔案<br>因為讀檔可以邊讀邊傳(寫入)可以有效降低memory的使用量，所以直接串BufferedOutputStream就好</p><p>最終的程式碼如下<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BYTE_BUF_SIZE = <span class="number">8192</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">sendCmd</span><span class="params">(String ip, <span class="keyword">int</span> port, <span class="keyword">byte</span>[] byteArray)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isSuccess = <span class="keyword">true</span>;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> bufSize = BYTE_BUF_SIZE;<span class="comment">//一次寫入多少byte</span></span><br><span class="line">    <span class="keyword">int</span> byteArrayLength = byteArray.length;</span><br><span class="line">    <span class="keyword">int</span> writeCount = byteArrayLength / bufSize;<span class="comment">//分幾次寫</span></span><br><span class="line">    <span class="keyword">int</span> byteRemain = byteArrayLength % bufSize;<span class="comment">//剩餘的byte</span></span><br><span class="line">    <span class="keyword">int</span> off = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>; count&lt;writeCount; count++)&#123;</span><br><span class="line">            out.write(byteArray, off, bufSize);</span><br><span class="line">            off += bufSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(byteRemain &gt; <span class="number">0</span>)&#123;<span class="comment">//最後有剩(不足buf的)</span></span><br><span class="line">            out.write(byteArray, off, byteRemain);</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        logger.warn(<span class="string">"use socket send command fail!!, ip: &#123;&#125;, port: &#123;&#125; exceptionMsg:&#123;&#125;"</span>, ip, port, e);</span><br><span class="line">        isSuccess = <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                logger.warn(<span class="string">"socket close fail: &#123;&#125;"</span>, e1);</span><br><span class="line">                isSuccess = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isSuccess;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作上遇到前端上傳large file後需再透過socket傳送給service處理&lt;br&gt;若只是幾kb的小檔案最快的做法當然是直接&lt;br&gt;&lt;code&gt;write(byte[] b, 0, b.length);&lt;/code&gt;&lt;br&gt;但是遇到這麼大的檔案不可能這麼做，只能分成多次寫入&lt;br&gt;測試過各種方法後，發現直接取得檔案大小後直接切好buffer大小，接著操作OutputStream直接寫入的處理的速度是最快的&lt;/p&gt;
&lt;p&gt;其實這個做法其實跟Java本身提供的BufferedOutputStream做法一樣&lt;br&gt;只是不需要另外檢查buffer是否寫滿(因為這個做法在一開始就知道要切到哪一個byte)&lt;br&gt;也少了一層FilterOutputStream (它們的繼承關係 BufferedOutputStream -&amp;gt; FilterOutputStrean -&amp;gt; OutputStream)&lt;br&gt;而是選擇直接操作OutputStream，所以才可以做到如此快速&lt;/p&gt;
&lt;p&gt;提醒一下&lt;br&gt;這個方式比較不是適合用在”讀檔”後使用socket傳送大檔案&lt;br&gt;因為讀檔可以邊讀邊傳(寫入)可以有效降低memory的使用量，所以直接串BufferedOutputStream就好&lt;/p&gt;
&lt;p&gt;最終的程式碼如下&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://henglin31.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>你真的了解Java中的Thread運作嗎？ - 容易讓人誤解的synchronized method</title>
    <link href="https://henglin31.github.io/2018/04/29/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3Java%E4%B8%AD%E7%9A%84Thread%E9%81%8B%E4%BD%9C%E5%97%8E%EF%BC%9F-%E5%AE%B9%E6%98%93%E8%AE%93%E4%BA%BA%E8%AA%A4%E8%A7%A3%E7%9A%84synchronized-method/"/>
    <id>https://henglin31.github.io/2018/04/29/你真的了解Java中的Thread運作嗎？-容易讓人誤解的synchronized-method/</id>
    <published>2018-04-29T14:11:28.000Z</published>
    <updated>2019-10-11T08:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天下午無意中聽到後方正在討論java的同事說“在method上面加上synchronized後，當多個thread執行此method時，同一時間只會有一個thread可以進入執行，但沒有synchronized的method不會被鎖住可以進入執行，因為thread是鎖method的”<br>最後一句話聽起來怪怪的…“thread是鎖method的”，真的是這樣嗎？</p><p>我在剛接觸java的時候，其實也有相同的疑問，因為在某個method上面增加synchronized很直覺的會認為只是會鎖此method，但若實際寫code去驗證的話，會發現不是鎖method而是會鎖住整個object，很多時候程式實際運作與自己想像是有落差的，不論是書上寫的或者在技術blog上讀到的都不一定是對的，只有自己嘗試寫code執行過才會知道</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天下午無意中聽到後方正在討論java的同事說“在method上面加上synchronized後，當多個thread執行此method時，同一時間只會有一個thread可以進入執行，但沒有synchronized的method不會被鎖住可以進入執行，因為thread是鎖me
      
    
    </summary>
    
    
      <category term="java" scheme="https://henglin31.github.io/tags/java/"/>
    
      <category term="thread" scheme="https://henglin31.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>從無到有DIY chart (二)</title>
    <link href="https://henglin31.github.io/2018/04/14/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89DIY-chart-%E4%BA%8C/"/>
    <id>https://henglin31.github.io/2018/04/14/從無到有DIY-chart-二/</id>
    <published>2018-04-14T14:17:36.000Z</published>
    <updated>2019-10-11T07:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>增加曲線效果，點與點之間的線條轉折變得更加柔和，效果如下<br><html>    <head>        </head>    <body>        <div align="center">            <h2>Chart</h2>            <div>                <canvas id="chart" width="300" height="150"></canvas>            </div>        </div>    </body></html><script language="javascript">class Chart{    constructor(params){    this._LINE_TENSION = 0.2    this._LINE_WIDTH_ORI = 2;    this._LINE_WIDTH_FOCUS = 5;    this._COLOR_GRAY = 'gray';    this._COLOR_WHITE = 'white';        this._id = params.id;    this._matrix = params.matrix;    this._radius = params.radius;    this._dataSet = [];    this._curveDataSet = [];        this._canvas;    this._canvasWidth;    this._canvasHeight;    this._ctx;    this._preFocusPoint;        this._Coordinate;        this._init();    }    _init(){        this._canvas = document.getElementById(this._id);        if(!this._canvas.getContext){            throw "can't get canvas context!";        }        this._canvasWidth = this._canvas.width;        this._canvasHeight = this._canvas.height;        this._ctx = this._canvas.getContext('2d');            this._initCoordinate();        this._initDataSet();        this._initCurveLines();        this._bindMouseEvent();        this.draw();    }        _initCoordinate(){        this._Coordinate = new Coordinate({            canvas: this._canvas,            matrix: this._matrix        });    }    _initDataSet(){        for(const [index, point] of this._matrix.entries()){            var reverseY = this._canvasHeight - point[1];            this._dataSet.push({                index: index,                x: point[0],                y: reverseY,                color: this._randomColor()            });        }    }        _initFrame(){        const rect = this._Coordinate.getChartBoundingRect();        this._drawRect({            x: 0,            y: 0,            width: this._canvasWidth,            height: this._canvasHeight,            lineWidth: this._LINE_WIDTH_ORI,            color: this._COLOR_GRAY        });                this._drawRect({            x: 0,            y: 0,            width: this._canvasWidth,            height: this._canvasHeight,            lineWidth: this._LINE_WIDTH_ORI,            color: this._COLOR_GRAY        });    }        _initLines(){        this._ctx.beginPath();        const dataLength = this._dataSet.length;        if(dataLength < 2) return;        if(dataLength == 2){            const firstPoint = this._dataSet[0];            const secondPoint = this._dataSet[1];            this._ctx.moveTo(firstPoint.x, firstPoint.y);            this._ctx.lineTo(secondPoint.x, secondPoint.y);            this._ctx.stroke();            return;        }                for(const [index, point] of this._dataSet.entries()){            if(index == 0){                this._ctx.moveTo(point.x, point.y);                continue;            }            const preControlPoint = this._curveDataSet[index - 1];            const controlPoint = this._curveDataSet[index];            this._ctx.bezierCurveTo(                preControlPoint.next.x, preControlPoint.next.y,                 controlPoint.pre.x, controlPoint.pre.y,                 point.x, point.y            );                    }        this._ctx.stroke();    }        _showControlPoint(){        for(const [index, point] of this._dataSet.entries()){            if(index == 0){                continue;            }            const preControlPoint = this._curveDataSet[index - 1];            const controlPoint = this._curveDataSet[index];                        this._drawCircle({x: preControlPoint.next.x, y: preControlPoint.next.y, radius: 2, lineWidth: 1, color: preControlPoint.oriPoint.color});            this._drawCircle({x: controlPoint.pre.x,     y: controlPoint.pre.y,     radius: 2, lineWidth: 1, color: controlPoint.oriPoint.color});                        this._ctx.stroke();        }    }        _initCircles(){        const _self = this;        this._dataSet.forEach((point) => {            _self._drawCircle({                x: point.x,                 y: point.y,                 radius: _self._radius,                 lineWidth: _self._LINE_WIDTH_ORI,                color: point.color            });        });    }        _initCurveLines(){        const dataLength = this._dataSet.length;        /*            less than three points don't need to use curve        */        if(dataLength <= 2) return;        for(let index=1; index<(dataLength-1); index++){            const prePoint = this._dataSet[index - 1];            const currentPoint = this._dataSet[index];            const nextPoint = this._dataSet[index + 1];            /*                use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale            */            const deltaX = nextPoint.x - prePoint.x;            const deltaY = nextPoint.y - prePoint.y;            const distance = this._distance(prePoint, nextPoint);            const cos = deltaX / distance;            const sin = deltaY / distance;            /*                calc current point distance between two points pre and next            */            const preRelativeDistance = this._distance(prePoint, currentPoint);            const nextRelativeDistance = this._distance(currentPoint, nextPoint);            /*                calc actual offset by current point and pre point                ps: actual offset = current point - (scale * two point distance * tension)            */            const preControlPointX = currentPoint.x - (cos * preRelativeDistance * this._LINE_TENSION);            const preControlPointY = currentPoint.y - (sin * preRelativeDistance * this._LINE_TENSION);            /*                calc actual offset by current point and next point            */            const nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * this._LINE_TENSION);            const nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * this._LINE_TENSION);            /*                            */            this._curveDataSet.push({                oriPoint: currentPoint,                pre: {x: preControlPointX, y: preControlPointY},                 next: {x: nextControlPointX, y: nextControlPointY},            });                    }            const firstPoint = this._dataSet[0];        const secondCurvePoint = this._curveDataSet[1];        this._curveDataSet.unshift({            oriPoint: firstPoint,            next: {                x: (firstPoint.x + secondCurvePoint.pre.x) / 2,                y: (firstPoint.y + secondCurvePoint.pre.y) / 2            }        });                const lastPoint = this._dataSet[dataLength - 1];        const secondLastCurvePoint = this._curveDataSet[dataLength - 2];        this._curveDataSet.push({            oriPoint: lastPoint,            pre: {                x: (lastPoint.x + secondLastCurvePoint.next.x) / 2,                 y: (lastPoint.y + secondLastCurvePoint.next.y) / 2            }        });    }        _bindMouseEvent(){        const _self = this;        this._canvas.addEventListener("mousemove", (event) => {            const rect = _self._canvas.getBoundingClientRect();            const x = event.clientX - rect.left;            const y = event.clientY - rect.top;            _self._findNearPointByMouse({x: x, y: y});        });    }        _randomColor(){        return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);    }        _drawRect(params){        this._ctx.lineWidth = params.lineWidth;        this._ctx.strokeStyle = params.color;        this._ctx.beginPath();        this._ctx.rect(params.x, params.y, params.width, params.height);        this._ctx.stroke();    }        _drawLine(point1, point2){        this._ctx.lineWidth = point2.lineWidth;        this._ctx.strokeStyle = point2.color;        this._ctx.beginPath();        this._ctx.moveTo(point1.x, point1.y);        this._ctx.lineTo(point2.x, point2.y);        this._ctx.stroke();    }    _drawCircle(point){        this._ctx.lineWidth = point.lineWidth;        this._ctx.beginPath();        this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);        this._ctx.strokeStyle = point.color;        this._ctx.fillStyle  = point.color;        this._ctx.fill();        this._ctx.stroke();    }        _drawFocusPoint(point){        this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});    }        _findNearPointByMouse(mousePos){        let minDistancePoint;        let minDistance = Number.MAX_VALUE;        for(var index=0, size= this._dataSet.length; index<size; index++){            const currentPos = this._dataSet[index];            const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);                        if(minDistance > distanceBetweenTwoPoints){                minDistancePoint = currentPos;                minDistance = Math.min(minDistance, distanceBetweenTwoPoints);            }        }        if(!this._preFocusPoint){            this._drawFocusPoint(minDistancePoint);            this._preFocusPoint = minDistancePoint;            return;        }        /*            if pre point isn't self, it's need to render        */        if(this._preFocusPoint.index !== minDistancePoint.index){            this.render();            this._drawFocusPoint(minDistancePoint);        }        this._preFocusPoint = minDistancePoint;    }        _distance(point1, point2){        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));    }        _clear(){        this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);    }        /* public */    draw(){        this._initFrame();        this._initLines();        this._initCircles();    }        render(){        this._clear();        this.draw();        console.log('render');    }    printDataSet(){        console.log('dataSet', this._dataSet);    }}class Coordinate{    constructor(params){        this._LEFT_OFFSET = 20;        this._BOTTOM_OFFSET = 20;        this._TOP_OFFSET = 10;        this._RIGHT_OFFSET = 10;                this._canvas = params.canvas;        this._oriMatrix = params.matrix;                this._chartBoundingRect;        this._xAxis;        this._yAxis;                this._init();    }        _init(){        this._initChartBoundingRect();        this._initXAxisAndYAxis();    }        _initChartBoundingRect(){        const oriCanvasRect = this._canvas.getBoundingClientRect();        //console.log(oriCanvasRect);        this._chartBoundingRect = {            left: 0 + this._LEFT_OFFSET,            top: 0 + this._TOP_OFFSET,            bottom: oriCanvasRect.height - this._BOTTOM_OFFSET,            right: oriCanvasRect.width - this._RIGHT_OFFSET,                        width: oriCanvasRect.width - this._LEFT_OFFSET - this._RIGHT_OFFSET,            height: oriCanvasRect.height - this._BOTTOM_OFFSET - this._TOP_OFFSET,        }        console.log(this._chartBoundingRect);    }    _initXAxisAndYAxis(){        let xMax = Number.MIN_VALUE;        let xMin = Number.MAX_VALUE;                let yMax = Number.MIN_VALUE;        let yMin = Number.MAX_VALUE;                this._oriMatrix.forEach((point) => {            const x = point[0];            const y = point[1];                        xMax = Math.max(xMax, x);            xMin = Math.min(xMin, x);                        yMax = Math.max(yMax, y);            yMin = Math.min(yMin, y);        });                const xNormal = (xMax - xMin);        const yNormal = (yMax - yMin);    }        getChartBoundingRect(){        return this._chartBoundingRect;    }}(function(global){    const canvasId = 'chart';    const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];    const radius = 4;    const chart = new Chart({        id: canvasId,         matrix: matrix,        radius: radius    });    chart.draw();    chart.printDataSet();    console.log('chart', chart);    console.log(chart._id);})(this);</script></p><p>主要增加的程式碼如下，參考chart.js繪製曲線的方式，自己試做看看，主要是針對點與點之間距離的計算出偏移強度<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index=<span class="number">1</span>; index&lt;(dataLength<span class="number">-1</span>); index++)&#123;</span><br><span class="line">    <span class="keyword">const</span> prePoint = <span class="keyword">this</span>._dataSet[index - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> currentPoint = <span class="keyword">this</span>._dataSet[index];</span><br><span class="line">    <span class="keyword">const</span> nextPoint = <span class="keyword">this</span>._dataSet[index + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> deltaX = nextPoint.x - prePoint.x;</span><br><span class="line">    <span class="keyword">const</span> deltaY = nextPoint.y - prePoint.y;</span><br><span class="line">    <span class="keyword">const</span> distance = <span class="keyword">this</span>._distance(prePoint, nextPoint);</span><br><span class="line">    <span class="keyword">const</span> cos = deltaX / distance;</span><br><span class="line">    <span class="keyword">const</span> sin = deltaY / distance;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        calc current point distance between two points pre and next</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> preRelativeDistance = <span class="keyword">this</span>._distance(prePoint, currentPoint);</span><br><span class="line">    <span class="keyword">const</span> nextRelativeDistance = <span class="keyword">this</span>._distance(currentPoint, nextPoint);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        calc actual offset by current point and pre point</span></span><br><span class="line"><span class="comment">        ps: actual offset = current point - (scale * two point distance * tension)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> preControlPointX = currentPoint.x - (cos * preRelativeDistance * <span class="keyword">this</span>._LINE_TENSION);<span class="comment">// _LINE_TENSION = 0.2</span></span><br><span class="line">    <span class="keyword">const</span> preControlPointY = currentPoint.y - (sin * preRelativeDistance * <span class="keyword">this</span>._LINE_TENSION);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        calc actual offset by current point and next point</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * <span class="keyword">this</span>._LINE_TENSION);</span><br><span class="line">    <span class="keyword">const</span> nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * <span class="keyword">this</span>._LINE_TENSION);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>._curveDataSet.push(&#123;</span><br><span class="line">        oriPoint: currentPoint,</span><br><span class="line">        pre: &#123;<span class="attr">x</span>: preControlPointX, <span class="attr">y</span>: preControlPointY&#125;, </span><br><span class="line">        next: &#123;<span class="attr">x</span>: nextControlPointX, <span class="attr">y</span>: nextControlPointY&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;增加曲線效果，點與點之間的線條轉折變得更加柔和，效果如下&lt;br&gt;
&lt;html&gt;
    &lt;head&gt;
    
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div align=&quot;center&quot;&gt;
            &lt;h2&gt;Chart&lt;/h2&gt;
  
      
    
    </summary>
    
    
      <category term="js" scheme="https://henglin31.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>從無到有DIY chart (一)</title>
    <link href="https://henglin31.github.io/2018/04/01/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89DIY-chart-%E4%B8%80/"/>
    <id>https://henglin31.github.io/2018/04/01/從無到有DIY-chart-一/</id>
    <published>2018-04-01T13:32:41.000Z</published>
    <updated>2018-06-06T15:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前工作中的前端開發因規範只能使用jQuery，要使用比較新的js語法只能透過underscore.js來實現<br>但最近看了許多關於es6的資料，想要來練習一下<br>若單純練習語法就太無聊了，所以決定使用es6的語法來DIY一個chart</p><p>首先使用<code>class</code>定義Chart的Object<br>在使用es6之前，只能透過擴展prototype達成method共用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Chart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._canvas;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Chart.prototype = &#123;</span><br><span class="line">    _init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._canvas = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>._id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>現在有了<code>class</code>就不需要再分開寫了，看起來直覺多了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chart</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(params)&#123;</span><br><span class="line">        <span class="keyword">this</span>._canvas;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _init()&#123;</span><br><span class="line">        <span class="keyword">this</span>._canvas = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>._id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>首先初始化canvas，canvas可以想像成是一個畫布，我們必須設定畫布的大小和透過<code>getContext(&#39;2d&#39;)</code>取得渲染環境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(params)&#123;</span><br><span class="line">    <span class="keyword">this</span>._id = params.id;</span><br><span class="line">    <span class="keyword">this</span>._canvas;</span><br><span class="line">    <span class="keyword">this</span>._canvasWidth;</span><br><span class="line">    <span class="keyword">this</span>._canvasHeight;</span><br><span class="line">    <span class="keyword">this</span>._ctx;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_init()&#123;</span><br><span class="line">    <span class="keyword">this</span>._canvas = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>._id);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>._canvas.getContext)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"can't get canvas context!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._canvasWidth = <span class="keyword">this</span>._canvas.width;</span><br><span class="line">    <span class="keyword">this</span>._canvasHeight = <span class="keyword">this</span>._canvas.height;</span><br><span class="line">    <span class="keyword">this</span>._ctx = <span class="keyword">this</span>._canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著將chart的資料設置到canvas上，因為對於canvas而言原點是從左上角<code>(0,0)</code>的座標開始，所以使用原始資料直接打出點的話，會發現會上下相反，所以需要將y軸進行反轉</p><p>因為還沒有想到chart要使用哪種顏色，就先使用亂數產生吧…<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_initDataSet()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [index, point] <span class="keyword">of</span> <span class="keyword">this</span>._matrix.entries())&#123;</span><br><span class="line">        <span class="keyword">var</span> reverseY = <span class="keyword">this</span>._canvasHeight - point[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>._dataSet.push(&#123;</span><br><span class="line">            index: index,</span><br><span class="line">            x: point[<span class="number">0</span>],</span><br><span class="line">            y: reverseY,</span><br><span class="line">            color: <span class="keyword">this</span>._randomColor()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_randomColor()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + (<span class="built_in">Math</span>.random() * <span class="number">0xFFFFFF</span> &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我們的chart需要有畫布的外框且資料兩點需要使用直線串連起來<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(params)&#123;</span><br><span class="line">    <span class="keyword">this</span>._LINE_TENSION = <span class="number">0.2</span></span><br><span class="line">    <span class="keyword">this</span>._LINE_WIDTH_ORI = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>._LINE_WIDTH_FOCUS = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">this</span>._COLOR_GRAY = <span class="string">'gray'</span>;</span><br><span class="line">    <span class="keyword">this</span>._COLOR_WHITE = <span class="string">'white'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_initFrame()&#123;</span><br><span class="line">    <span class="keyword">this</span>._drawRect(&#123;</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span>,</span><br><span class="line">        width: <span class="keyword">this</span>._canvasWidth,</span><br><span class="line">        height: <span class="keyword">this</span>._canvasHeight,</span><br><span class="line">        lineWidth: <span class="keyword">this</span>._LINE_WIDTH_ORI,</span><br><span class="line">        color: <span class="keyword">this</span>._COLOR_GRAY</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_initLines()&#123;</span><br><span class="line">    <span class="keyword">let</span> prePoint;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [index, point] <span class="keyword">of</span> <span class="keyword">this</span>._dataSet.entries())&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">            prePoint = point;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>._drawLine(prePoint, point);</span><br><span class="line">        prePoint = point;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">draw()&#123;</span><br><span class="line">    <span class="keyword">this</span>._initFrame();</span><br><span class="line">    <span class="keyword">this</span>._initLines();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行一下看看效果<br><img src="/images/chart-diy-001.png" alt="chart"></p><p>有了簡單的雛形後，接著可以慢慢慢慢進行優化，增加新功能</p><p>像現在我想凸顯每個資料點，將點放大，所以需要增加繪製圓形的function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_drawCircle(point)&#123;</span><br><span class="line">    <span class="keyword">this</span>._ctx.lineWidth = point.lineWidth;</span><br><span class="line">    <span class="keyword">this</span>._ctx.beginPath();</span><br><span class="line">    <span class="keyword">this</span>._ctx.arc(point.x, point.y, point.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    <span class="keyword">this</span>._ctx.strokeStyle = point.color;</span><br><span class="line">    <span class="keyword">this</span>._ctx.fillStyle  = point.color;</span><br><span class="line">    <span class="keyword">this</span>._ctx.fill();</span><br><span class="line">    <span class="keyword">this</span>._ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">draw()&#123;</span><br><span class="line">    <span class="keyword">this</span>._initFrame();</span><br><span class="line">    <span class="keyword">this</span>._initLines();</span><br><span class="line">    <span class="keyword">this</span>._initCircles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行一下看看效果<br><img src="/images/chart-diy-002.png" alt="chart"></p><p>市面上大部份cahrt都可以透過滑鼠去取得最近資料點，所以我們的chart也來要增加此功能</p><p>首先在canvas增加mousemove事件，用於取得目前滑鼠的座標，接著算出每個資料點與目前滑鼠之間的距離 (這次參考Flot Charts的做法)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">_bindMouseEvent()&#123;</span><br><span class="line">    <span class="keyword">const</span> _self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>._canvas.addEventListener(<span class="string">"mousemove"</span>, (event) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> rect = _self._canvas.getBoundingClientRect();</span><br><span class="line">        <span class="keyword">const</span> x = event.clientX - rect.left;</span><br><span class="line">        <span class="keyword">const</span> y = event.clientY - rect.top;</span><br><span class="line">        _self._findNearPointByMouse(&#123;<span class="attr">x</span>: x, <span class="attr">y</span>: y&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_drawFocusPoint(point)&#123;</span><br><span class="line">    <span class="keyword">this</span>._drawCircle(&#123;<span class="attr">x</span>: point.x, <span class="attr">y</span>: point.y, <span class="attr">radius</span>: <span class="keyword">this</span>._radius, <span class="attr">lineWidth</span>: <span class="keyword">this</span>._LINE_WIDTH_FOCUS, <span class="attr">color</span>: point.color&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_findNearPointByMouse(mousePos)&#123;</span><br><span class="line">    <span class="keyword">let</span> minDistancePoint;</span><br><span class="line">    <span class="keyword">let</span> minDistance = <span class="built_in">Number</span>.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index=<span class="number">0</span>, size= <span class="keyword">this</span>._dataSet.length; index&lt;size; index++)&#123;</span><br><span class="line">        <span class="keyword">const</span> currentPos = <span class="keyword">this</span>._dataSet[index];</span><br><span class="line">        <span class="keyword">const</span> distanceBetweenTwoPoints = <span class="keyword">this</span>._distance(currentPos, mousePos);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(minDistance &gt; distanceBetweenTwoPoints)&#123;</span><br><span class="line">            minDistancePoint = currentPos;</span><br><span class="line">            minDistance = <span class="built_in">Math</span>.min(minDistance, distanceBetweenTwoPoints);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>._preFocusPoint)&#123;</span><br><span class="line">        <span class="keyword">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class="line">        <span class="keyword">this</span>._preFocusPoint = minDistancePoint;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if pre point isn't self, it's need to render</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>._preFocusPoint.index !== minDistancePoint.index)&#123;</span><br><span class="line">        <span class="keyword">this</span>.render();</span><br><span class="line">        <span class="keyword">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._preFocusPoint = minDistancePoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_distance(point1, point2)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(point1.x - point2.x, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(point1.y - point2.y, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行一下看一下效果 (這裡為了顯示實際效果， 所以就直接執行js而不是使用貼圖，瀏覽器必須支援es6才能看見，畢竟沒有透過babel進行轉換)<br><html>    <head>    </head>    <body>        <div align="center">            <h2>Chart</h2>            <div>                <canvas id="chart" width="300" height="150"></canvas>            </div>        </div>    </body></html><script language="javascript">    class Chart{        constructor(params){            this._LINE_TENSION = 0.2            this._LINE_WIDTH_ORI = 2;            this._LINE_WIDTH_FOCUS = 5;            this._COLOR_GRAY = 'gray';            this._COLOR_WHITE = 'white';                        this._id = params.id;            this._matrix = params.matrix;            this._radius = params.radius;            this._dataSet = [];            this._curveDataSet = [];            this._canvas;            this._canvasWidth;            this._canvasHeight;            this._ctx;            this._preFocusPoint;                        this._init();        }        _init(){            this._canvas = document.getElementById(this._id);            if(!this._canvas.getContext){                throw "can't get canvas context!";            }            this._canvasWidth = this._canvas.width;            this._canvasHeight = this._canvas.height;            this._ctx = this._canvas.getContext('2d');                        this._initDataSet();            this._bindMouseEvent();            this.draw();        }                _initDataSet(){            for(const [index, point] of this._matrix.entries()){                var reverseY = this._canvasHeight - point[1];                this._dataSet.push({                    index: index,                    x: point[0],                    y: reverseY,                    color: this._randomColor()                });            }        }                _initFrame(){            this._drawRect({                x: 0,                y: 0,                width: this._canvasWidth,                height: this._canvasHeight,                lineWidth: this._LINE_WIDTH_ORI,                color: this._COLOR_GRAY            });        }                _initLines(){            let prePoint;            for(const [index, point] of this._dataSet.entries()){                if(index == 0){                    prePoint = point;                    continue;                }                this._drawLine(prePoint, point);                prePoint = point;            }        }                _initCircles(){            const _self = this;            this._dataSet.forEach((point) => {                _self._drawCircle({                    x: point.x,                     y: point.y,                     radius: _self._radius,                     lineWidth: _self._LINE_WIDTH_ORI,                    color: point.color                });            });        }                _bindMouseEvent(){            const _self = this;            this._canvas.addEventListener("mousemove", (event) => {                const rect = _self._canvas.getBoundingClientRect();                const x = event.clientX - rect.left;                const y = event.clientY - rect.top;                _self._findNearPointByMouse({x: x, y: y});            });        }                _randomColor(){            return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);        }                _drawRect(params){            this._ctx.lineWidth = params.lineWidth;            this._ctx.strokeStyle = params.color;            this._ctx.beginPath();            this._ctx.rect(params.x, params.y, params.width, params.height);            this._ctx.stroke();        }                _drawLine(point1, point2){            this._ctx.lineWidth = point2.lineWidth;            this._ctx.strokeStyle = point2.color;            this._ctx.beginPath();            this._ctx.moveTo(point1.x, point1.y);            this._ctx.lineTo(point2.x, point2.y);            this._ctx.stroke();        }                _drawCircle(point){            this._ctx.lineWidth = point.lineWidth;            this._ctx.beginPath();            this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);            this._ctx.strokeStyle = point.color;            this._ctx.fillStyle  = point.color;            this._ctx.fill();            this._ctx.stroke();        }                _drawFocusPoint(point){            this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});        }                _findNearPointByMouse(mousePos){            let minDistancePoint;            let minDistance = Number.MAX_VALUE;            for(var index=0, size= this._dataSet.length; index<size; index++){                const currentPos = this._dataSet[index];                const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);                                if(minDistance > distanceBetweenTwoPoints){                    minDistancePoint = currentPos;                    minDistance = Math.min(minDistance, distanceBetweenTwoPoints);                }            }            if(!this._preFocusPoint){                this._drawFocusPoint(minDistancePoint);                this._preFocusPoint = minDistancePoint;                return;            }            /*            if pre point isn't self, it need to render            */            if(this._preFocusPoint.index !== minDistancePoint.index){                this.render();                this._drawFocusPoint(minDistancePoint);            }            this._preFocusPoint = minDistancePoint;        }                _distance(point1, point2){            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));        }                _clear(){            this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);        }                /* public */        draw(){            this._initFrame();            this._initLines();            this._initCircles();        }                render(){            this._clear();            this.draw();            console.log('render');        }    }        (function(global){        const canvasId = 'chart';        const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];        const radius = 4;        const chart = new Chart({            id: canvasId,             matrix: matrix,            radius: radius        });        chart.draw();        chart.printDataSet();        console.log('chart', chart);        console.log(chart._id);    })(this);</script></p><p>以下是完整的程式碼，看起來與java有點像…<br>也可以到我<a href="https://github.com/HengLin31/chart" target="_blank" rel="noopener">github</a>上去下載完整的程式碼，今天的練習就到此結束了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chart</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(params)&#123;</span><br><span class="line">        <span class="keyword">this</span>._LINE_TENSION = <span class="number">0.2</span></span><br><span class="line">        <span class="keyword">this</span>._LINE_WIDTH_ORI = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">this</span>._LINE_WIDTH_FOCUS = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">this</span>._COLOR_GRAY = <span class="string">'gray'</span>;</span><br><span class="line">        <span class="keyword">this</span>._COLOR_WHITE = <span class="string">'white'</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>._id = params.id;</span><br><span class="line">        <span class="keyword">this</span>._matrix = params.matrix;</span><br><span class="line">        <span class="keyword">this</span>._radius = params.radius;</span><br><span class="line">        <span class="keyword">this</span>._dataSet = [];</span><br><span class="line">        <span class="keyword">this</span>._curveDataSet = [];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>._canvas;</span><br><span class="line">        <span class="keyword">this</span>._canvasWidth;</span><br><span class="line">        <span class="keyword">this</span>._canvasHeight;</span><br><span class="line">        <span class="keyword">this</span>._ctx;</span><br><span class="line">        <span class="keyword">this</span>._preFocusPoint;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _init()&#123;</span><br><span class="line">        <span class="keyword">this</span>._canvas = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>._id);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>._canvas.getContext)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">"can't get canvas context!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>._canvasWidth = <span class="keyword">this</span>._canvas.width;</span><br><span class="line">        <span class="keyword">this</span>._canvasHeight = <span class="keyword">this</span>._canvas.height;</span><br><span class="line">        <span class="keyword">this</span>._ctx = <span class="keyword">this</span>._canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>._initDataSet();</span><br><span class="line">        <span class="keyword">this</span>._bindMouseEvent();</span><br><span class="line">        <span class="keyword">this</span>.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _initDataSet()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> [index, point] <span class="keyword">of</span> <span class="keyword">this</span>._matrix.entries())&#123;</span><br><span class="line">            <span class="keyword">var</span> reverseY = <span class="keyword">this</span>._canvasHeight - point[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">this</span>._dataSet.push(&#123;</span><br><span class="line">                index: index,</span><br><span class="line">                x: point[<span class="number">0</span>],</span><br><span class="line">                y: reverseY,</span><br><span class="line">                color: <span class="keyword">this</span>._randomColor()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _initFrame()&#123;</span><br><span class="line">        <span class="keyword">this</span>._drawRect(&#123;</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span>,</span><br><span class="line">            width: <span class="keyword">this</span>._canvasWidth,</span><br><span class="line">            height: <span class="keyword">this</span>._canvasHeight,</span><br><span class="line">            lineWidth: <span class="keyword">this</span>._LINE_WIDTH_ORI,</span><br><span class="line">            color: <span class="keyword">this</span>._COLOR_GRAY</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _initLines()&#123;</span><br><span class="line">        <span class="keyword">let</span> prePoint;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> [index, point] <span class="keyword">of</span> <span class="keyword">this</span>._dataSet.entries())&#123;</span><br><span class="line">            <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">                prePoint = point;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>._drawLine(prePoint, point);</span><br><span class="line">            prePoint = point;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _initCircles()&#123;</span><br><span class="line">        <span class="keyword">const</span> _self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>._dataSet.forEach(<span class="function">(<span class="params">point</span>) =&gt;</span> &#123;</span><br><span class="line">            _self._drawCircle(&#123;</span><br><span class="line">                x: point.x, </span><br><span class="line">                y: point.y, </span><br><span class="line">                radius: _self._radius, </span><br><span class="line">                lineWidth: _self._LINE_WIDTH_ORI,</span><br><span class="line">                color: point.color</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _bindMouseEvent()&#123;</span><br><span class="line">        <span class="keyword">const</span> _self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>._canvas.addEventListener(<span class="string">"mousemove"</span>, (event) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> rect = _self._canvas.getBoundingClientRect();</span><br><span class="line">            <span class="keyword">const</span> x = event.clientX - rect.left;</span><br><span class="line">            <span class="keyword">const</span> y = event.clientY - rect.top;</span><br><span class="line">            _self._findNearPointByMouse(&#123;<span class="attr">x</span>: x, <span class="attr">y</span>: y&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _randomColor()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'#'</span> + (<span class="built_in">Math</span>.random() * <span class="number">0xFFFFFF</span> &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _drawRect(params)&#123;</span><br><span class="line">        <span class="keyword">this</span>._ctx.lineWidth = params.lineWidth;</span><br><span class="line">        <span class="keyword">this</span>._ctx.strokeStyle = params.color;</span><br><span class="line">        <span class="keyword">this</span>._ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>._ctx.rect(params.x, params.y, params.width, params.height);</span><br><span class="line">        <span class="keyword">this</span>._ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _drawLine(point1, point2)&#123;</span><br><span class="line">        <span class="keyword">this</span>._ctx.lineWidth = point2.lineWidth;</span><br><span class="line">        <span class="keyword">this</span>._ctx.strokeStyle = point2.color;</span><br><span class="line">        <span class="keyword">this</span>._ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>._ctx.moveTo(point1.x, point1.y);</span><br><span class="line">        <span class="keyword">this</span>._ctx.lineTo(point2.x, point2.y);</span><br><span class="line">        <span class="keyword">this</span>._ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _drawCircle(point)&#123;</span><br><span class="line">        <span class="keyword">this</span>._ctx.lineWidth = point.lineWidth;</span><br><span class="line">        <span class="keyword">this</span>._ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>._ctx.arc(point.x, point.y, point.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">        <span class="keyword">this</span>._ctx.strokeStyle = point.color;</span><br><span class="line">        <span class="keyword">this</span>._ctx.fillStyle  = point.color;</span><br><span class="line">        <span class="keyword">this</span>._ctx.fill();</span><br><span class="line">        <span class="keyword">this</span>._ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _drawFocusPoint(point)&#123;</span><br><span class="line">        <span class="keyword">this</span>._drawCircle(&#123;<span class="attr">x</span>: point.x, <span class="attr">y</span>: point.y, <span class="attr">radius</span>: <span class="keyword">this</span>._radius, <span class="attr">lineWidth</span>: <span class="keyword">this</span>._LINE_WIDTH_FOCUS, <span class="attr">color</span>: point.color&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _findNearPointByMouse(mousePos)&#123;</span><br><span class="line">        <span class="keyword">let</span> minDistancePoint;</span><br><span class="line">        <span class="keyword">let</span> minDistance = <span class="built_in">Number</span>.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> index=<span class="number">0</span>, size= <span class="keyword">this</span>._dataSet.length; index&lt;size; index++)&#123;</span><br><span class="line">            <span class="keyword">const</span> currentPos = <span class="keyword">this</span>._dataSet[index];</span><br><span class="line">            <span class="keyword">const</span> distanceBetweenTwoPoints = <span class="keyword">this</span>._distance(currentPos, mousePos);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(minDistance &gt; distanceBetweenTwoPoints)&#123;</span><br><span class="line">                minDistancePoint = currentPos;</span><br><span class="line">                minDistance = <span class="built_in">Math</span>.min(minDistance, distanceBetweenTwoPoints);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>._preFocusPoint)&#123;</span><br><span class="line">            <span class="keyword">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class="line">            <span class="keyword">this</span>._preFocusPoint = minDistancePoint;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        if pre point isn't self, it's need to render</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>._preFocusPoint.index !== minDistancePoint.index)&#123;</span><br><span class="line">            <span class="keyword">this</span>.render();</span><br><span class="line">            <span class="keyword">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>._preFocusPoint = minDistancePoint;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _distance(point1, point2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(point1.x - point2.x, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(point1.y - point2.y, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _clear()&#123;</span><br><span class="line">        <span class="keyword">this</span>._ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>._canvasWidth, <span class="keyword">this</span>._canvasHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* public */</span></span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="keyword">this</span>._initFrame();</span><br><span class="line">        <span class="keyword">this</span>._initLines();</span><br><span class="line">        <span class="keyword">this</span>._initCircles();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">this</span>._clear();</span><br><span class="line">        <span class="keyword">this</span>.draw();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'render'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前工作中的前端開發因規範只能使用jQuery，要使用比較新的js語法只能透過underscore.js來實現&lt;br&gt;但最近看了許多關於es6的資料，想要來練習一下&lt;br&gt;若單純練習語法就太無聊了，所以決定使用es6的語法來DIY一個chart&lt;/p&gt;
&lt;p&gt;首先使用&lt;code&gt;class&lt;/code&gt;定義Chart的Object&lt;br&gt;在使用es6之前，只能透過擴展prototype達成method共用&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Chart = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._canvas;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chart.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _init: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;現在有了&lt;code&gt;class&lt;/code&gt;就不需要再分開寫了，看起來直覺多了&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Chart&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(params)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._canvas;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _init()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://henglin31.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>標準常態分佈的機率密度函數</title>
    <link href="https://henglin31.github.io/2018/03/24/%E6%A8%99%E6%BA%96%E5%B8%B8%E6%85%8B%E5%88%86%E4%BD%88%E7%9A%84%E6%A9%9F%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B8/"/>
    <id>https://henglin31.github.io/2018/03/24/標準常態分佈的機率密度函數/</id>
    <published>2018-03-24T14:03:21.000Z</published>
    <updated>2019-10-11T10:03:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子在做SPC逆向工程…<br>為此還買了一本簡體書“程序員的數學2 概率與統計”來複習一下統計的觀念<br>皇天不負苦心人，在經過多天的努力，最終成功的產出與“SPC參考對象”相同的結果<br>為了找到正確的偏移量，在此期間不知實作了多少種不同的標準差…</p><p>下一個任務是需要產生機率密度函數去看資料的離散程度…<br>至於什麼是常態分佈，可以到<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83" target="_blank" rel="noopener">常態分佈wiki</a>上看，應該會比我自己說還要詳細<br>一直很好奇為什麼要定義成鐘型，看了下面的youtube影片就才了解，這是自然界的一種規律(巧合？)</p><div class="video-container"><iframe src="//www.youtube.com/embed/4HpvBZnHOVI" frameborder="0" allowfullscreen></iframe></div><p>許多球從中間落下（期望值的位置），最終形成的結果接近於鐘型</p><p>上面簡介完了，接著進入主題，開始剖析標準常態分佈的機率密度函數的公式<br>$ f(x) = {1 \over \sqrt{2\pi}}\exp(-{x^2 \over 2}) $</p><p>如果直接從wiki看完公式後，很容易實作出來，只是我更想知道公式背後的原理<br>以下是我看書和上網查完資料後，根據自己理解所歸納的結果(趁印象深刻趕快記錄下來)</p><p>這時需要將公式拆成兩個部分來看<br>現在先看 $ f(x) = \exp(-{x^2}) $ 這部分：</p><p>為什麼要使用 $ -x^2 $ 呢？<br>我們知道$ x^2 $函數是開口向上的鐘型形狀，如下圖所示(以下圖片都是透過Maxima產生)：<br><img src="/images/st-001.png" alt="x^2"><br>但我們要的鐘型是開口向下，想要開口向下只需要乘上-1，即 $ -x^2 $<br><img src="/images/st-002.png" alt="-x^2"></p><p>接下來看整個 $ \exp(-{x^2}) $<br>因為經過 $ -x^2 $ 的函數所得的的值是“恆負”的(除了頂點值為0)，永遠落在第二和第三象限<br>但是當 $ -x^2 $ 當作常數為底的指數時，透過函數所得到的值是“恆正”的，就會落在第一和第四象限上<br>以下是 $ 3^{-x^2} $的函數圖形<br><img src="/images/st-003.png" alt="x^2"><br>其實任何常數指數為 $ -x^2 $ 都為鐘型圖形，如下圖為$ 100^{-x^2} $的函數圖形<br><img src="/images/st-004.png" alt="x^2"><br><a id="more"></a></p><p>雖然取任何常數都可以形成鐘型，那為什麼要取exp當作底呢？<br>主要是需要它的部分特性，主要有以下五點：</p><ol><li>左右對稱(以0為中心點，常數c與-c的值會得到相同值)</li><li>x軸為0時(中心點)， $ f(0) $ 會取得最大值(鐘型的最高點)</li><li>隨著x值逐漸遠離0時(中心點)，值會漸漸縮小，且值“不會是負的”(這點很重要，因為機率值不可為負的)</li><li>當x趨近於無窮大或趨近於負無窮大時，值趨近於0</li><li>比較好做積分…(連續型的機率是透過計算面積的方式去獲得區間範圍內的機率所以要做積分)</li></ol><p>但是只有 $ f(x) = \exp(-{x^2}) $ 是不夠的，因為對機率來說，總體 $ P(\Omega) = 1 $<br>所以從負無限大到無限大做積分整個 $ f(x) $的總面積必須是1<br>嘗試對 $ \exp(-{x^2}) $從負無窮大到無窮大做積分，得到以下結果<br><img src="/images/st-005.png" alt="x^2"><br>總面積會是 $ \sqrt{\pi} $ ，所以要讓值為1的方法就是除以 $ \sqrt{\pi} $<br>最終會得到 $ f(x) = {1 \over \sqrt{\pi}}\exp(-{x^2}) $<br>我們得到了常態分佈的機率密度函數，但還不能稱為“標準”常態分佈的機率密度函數<br>因為要達到“標準”的要求還需要有以下三個特性：</p><ol><li>期望值( $ \mu $ )為0</li><li>變異數( $ Var $ )為1</li><li>標準差( $ \sigma $ )為1</li></ol><p>記做 $ N(\mu, \sigma) $， 求 $ N(0, 1) $<br>但目前得到的機率分佈函數是 $ N(0, {1 \over \sqrt{2}}) = {1 \over \sqrt{\pi}}\exp(-{x^2}) $ 這不符合標準的定義，不是我們要的</p><p>我們先從wiki上看看連續型隨機變數求期望值和變異數的公式:</p><p>$ E[X] = \int xf(x)dx $<br>$ Var(x) = E[(x-\mu)^2] $</p><p>因為標準的期望值為0，則 $ \mu = 0 $ ，帶入後得到 $ Var(x) = E[x^2] $</p><p>先令$ g(x) = af(ax) $，其中a是一個大於零的常數，我們需要求出a值<br>a值需要滿足 $ \int x^2g(x) = Var(x) $ 積分等於1<br>$ \int x^2g(x) $ 積分後求得 $ 1 \over {2a^2} $，因為 $ {1 \over {2a^2}} = 1$<br>所以得到$ a = {1 \over \sqrt{2}} $可滿足 $ Var(x) = 1 $ 且 $ \mu = 0 $<br>也可以求得 $ \sigma = \sqrt{Var(x)} = 1 $，滿足前面所提到的三個條件<br>$ N(0, 1) = {1 \over \sqrt{2}} f({x \over \sqrt{2}}) $ 帶入公式後得到 $ f(x) = {1 \over \sqrt{2\pi}}\exp(-{x^2 \over 2}) $<br>這樣就符合“標準”常態機率密度函數</p><p>在理解後再回頭看公式，就不覺得怪了<br>以上所做的一切努力都是為了“湊出”滿足機率定義的函數</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子在做SPC逆向工程…&lt;br&gt;為此還買了一本簡體書“程序員的數學2 概率與統計”來複習一下統計的觀念&lt;br&gt;皇天不負苦心人，在經過多天的努力，最終成功的產出與“SPC參考對象”相同的結果&lt;br&gt;為了找到正確的偏移量，在此期間不知實作了多少種不同的標準差…&lt;/p&gt;
&lt;p&gt;下一個任務是需要產生機率密度函數去看資料的離散程度…&lt;br&gt;至於什麼是常態分佈，可以到&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;常態分佈wiki&lt;/a&gt;上看，應該會比我自己說還要詳細&lt;br&gt;一直很好奇為什麼要定義成鐘型，看了下面的youtube影片就才了解，這是自然界的一種規律(巧合？)&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/4HpvBZnHOVI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;許多球從中間落下（期望值的位置），最終形成的結果接近於鐘型&lt;/p&gt;
&lt;p&gt;上面簡介完了，接著進入主題，開始剖析標準常態分佈的機率密度函數的公式&lt;br&gt;$ f(x) = {1 \over \sqrt{2\pi}}\exp(-{x^2 \over 2}) $&lt;/p&gt;
&lt;p&gt;如果直接從wiki看完公式後，很容易實作出來，只是我更想知道公式背後的原理&lt;br&gt;以下是我看書和上網查完資料後，根據自己理解所歸納的結果(趁印象深刻趕快記錄下來)&lt;/p&gt;
&lt;p&gt;這時需要將公式拆成兩個部分來看&lt;br&gt;現在先看 $ f(x) = \exp(-{x^2}) $ 這部分：&lt;/p&gt;
&lt;p&gt;為什麼要使用 $ -x^2 $ 呢？&lt;br&gt;我們知道$ x^2 $函數是開口向上的鐘型形狀，如下圖所示(以下圖片都是透過Maxima產生)：&lt;br&gt;&lt;img src=&quot;/images/st-001.png&quot; alt=&quot;x^2&quot;&gt;&lt;br&gt;但我們要的鐘型是開口向下，想要開口向下只需要乘上-1，即 $ -x^2 $&lt;br&gt;&lt;img src=&quot;/images/st-002.png&quot; alt=&quot;-x^2&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下來看整個 $ \exp(-{x^2}) $&lt;br&gt;因為經過 $ -x^2 $ 的函數所得的的值是“恆負”的(除了頂點值為0)，永遠落在第二和第三象限&lt;br&gt;但是當 $ -x^2 $ 當作常數為底的指數時，透過函數所得到的值是“恆正”的，就會落在第一和第四象限上&lt;br&gt;以下是 $ 3^{-x^2} $的函數圖形&lt;br&gt;&lt;img src=&quot;/images/st-003.png&quot; alt=&quot;x^2&quot;&gt;&lt;br&gt;其實任何常數指數為 $ -x^2 $ 都為鐘型圖形，如下圖為$ 100^{-x^2} $的函數圖形&lt;br&gt;&lt;img src=&quot;/images/st-004.png&quot; alt=&quot;x^2&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="math" scheme="https://henglin31.github.io/tags/math/"/>
    
      <category term="probability" scheme="https://henglin31.github.io/tags/probability/"/>
    
      <category term="statistics" scheme="https://henglin31.github.io/tags/statistics/"/>
    
  </entry>
  
  <entry>
    <title>Linux 如何避免重複執行特定jar</title>
    <link href="https://henglin31.github.io/2018/03/17/Linux-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E9%87%8D%E8%A4%87%E5%9F%B7%E8%A1%8C%E7%89%B9%E5%AE%9Ajar/"/>
    <id>https://henglin31.github.io/2018/03/17/Linux-如何避免重複執行特定jar/</id>
    <published>2018-03-17T13:00:34.000Z</published>
    <updated>2018-04-01T13:49:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>因為Linux是真正多人多工，若是在不同電腦上遠端登入<br>執行同一個特定jar，就會造成重複執行<br>所以在一般情況下，會寫script 做成 service<br>再透過 start stop restart 去執行</p><p>但是有些時候我們只是要執行一個Java的小程式<br>不會想要花費時間將它製作成 service<br>所以只需寫一個script，去檢查特定程式的JVM是否已經啟動<br>若是已經啟動的話就刪除目前執行的JVM</p><figure class="highlight shell"><figcaption><span>kill jar JVM, if exist .sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PID=$(ps aux | grep jar-[0-9] | awk '&#123;print $2&#125;')</span><br><span class="line">echo "PID: "$PID</span><br><span class="line">if [ -z $PID ]; then</span><br><span class="line">    echo "not exist PID"</span><br><span class="line">else</span><br><span class="line">    echo "kill PID: "$PID</span><br><span class="line">    kill -9 $PID</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><a id="more"></a><p>第1行 ps aux 是找出所有user目前執行中的process<br>接著使用 grep 找出特定的process，因為這個jar會帶版號<br>例如： jar-1.1.jar 或是升級後 jar-1.2.jar<br>所以多判斷帶版號的regex<br>最後執行 awk 印出第2欄（因為第2欄是process的PID）<br>第3行是檢查PID是否為空字串<br>若PID不是空字串就表示JVM已經存在需要執行第7行去強制刪除JVM<br>PS: 要不要刪除JVM就看個人了，因為這是用在開發中的jar，需要重新執行，所以使用kill</p><p>這樣一個簡單的script就完成了，現在只需要在執行jar前呼叫此.sh檔<br>就可以避免重複執行了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為Linux是真正多人多工，若是在不同電腦上遠端登入&lt;br&gt;執行同一個特定jar，就會造成重複執行&lt;br&gt;所以在一般情況下，會寫script 做成 service&lt;br&gt;再透過 start stop restart 去執行&lt;/p&gt;
&lt;p&gt;但是有些時候我們只是要執行一個Java的小程式&lt;br&gt;不會想要花費時間將它製作成 service&lt;br&gt;所以只需寫一個script，去檢查特定程式的JVM是否已經啟動&lt;br&gt;若是已經啟動的話就刪除目前執行的JVM&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;figcaption&gt;&lt;span&gt;kill jar JVM, if exist .sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PID=$(ps aux | grep jar-[0-9] | awk &#39;&amp;#123;print $2&amp;#125;&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &quot;PID: &quot;$PID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ -z $PID ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    echo &quot;not exist PID&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    echo &quot;kill PID: &quot;$PID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kill -9 $PID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="shell" scheme="https://henglin31.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>使用 WeakReference 解決 Android 發生 memory leak 問題</title>
    <link href="https://henglin31.github.io/2018/03/10/%E4%BD%BF%E7%94%A8-WeakReference-%E8%A7%A3%E6%B1%BA-Android-%E7%99%BC%E7%94%9F-memory-leak-%E5%95%8F%E9%A1%8C/"/>
    <id>https://henglin31.github.io/2018/03/10/使用-WeakReference-解決-Android-發生-memory-leak-問題/</id>
    <published>2018-03-10T13:03:49.000Z</published>
    <updated>2018-03-25T16:07:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>源由:<br>前陣子幫離職的同事改寫他的Android APP<br>因為客戶反映此APP在運行一天之後輕則沒有反應，重則crash…<br>所以需要常常重啟APP</p><p>在Android Studio上觀察了一下memory<br>執行了一段時間後發現記憶體會不正常增長，就算手動執行GC也無法釋放<br>初步研判是發生了memory leak<br>馬上做heap dump<br>再使用MAT稍微分析了一下</p><p>果然…<br><a id="more"></a><br>activity的context沒有被正常釋放掉<br>主因是activity將自身的context傳給了AsyncTask去執行跟Server拿資料的任務<br>因為此APP是屬於Web Service，需要頻繁的執行request<br>所以同時間會產生多個AsyncTask<br>最終造成多個AsyncTask需等待其他AsyncTask完成任務<br>但又佔用activity的context，所以activity無法釋放</p><p>簡單的說就是AsyncTask的生命週期比activity的生命週期還要長<br>所以activity沒辦法回收memory</p><p>確認問題的原因後，接下來就好辦了</p><p>首先是解決activity context無法釋放的問題<br>在這裡我是將傳入activity context宣告成WeakReference<br>WeakReference是Java的弱引用，可以讓 activityContext 可以被系統正常GC<br>不會因AsyncTask長期佔用 activityContext 造成 memory 無法釋放的問題發生</p><figure class="highlight java"><figcaption><span>WeakReference 使用方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WeakReference&lt;Context&gt; contextRef = <span class="keyword">new</span> WeakReference&lt;Context&gt;(activityContext);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != contextRef.get())&#123;<span class="comment">//判斷有無被系統GC</span></span><br><span class="line">    Context context = contextRef.get();</span><br><span class="line">    <span class="comment">//可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是最佳的做法應該是不要隨意傳遞activity的context，因為他的生命週期非常短暫<br>若真的需要使用context的話應該使用application context，而不是activity context<br>因為application context是APP的context，所以不像activity context一直不斷被創建和釋放<br>只是application context不能用來更新UI</p><p>若想使用activity context去更新UI的話，也應該要回歸到activity內部執行<br>而不是讓外部的Object直接引用，無形中提高了memory leak發生的風險</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源由:&lt;br&gt;前陣子幫離職的同事改寫他的Android APP&lt;br&gt;因為客戶反映此APP在運行一天之後輕則沒有反應，重則crash…&lt;br&gt;所以需要常常重啟APP&lt;/p&gt;
&lt;p&gt;在Android Studio上觀察了一下memory&lt;br&gt;執行了一段時間後發現記憶體會不正常增長，就算手動執行GC也無法釋放&lt;br&gt;初步研判是發生了memory leak&lt;br&gt;馬上做heap dump&lt;br&gt;再使用MAT稍微分析了一下&lt;/p&gt;
&lt;p&gt;果然…&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://henglin31.github.io/tags/java/"/>
    
      <category term="android" scheme="https://henglin31.github.io/tags/android/"/>
    
      <category term="memory leak" scheme="https://henglin31.github.io/tags/memory-leak/"/>
    
  </entry>
  
  <entry>
    <title>比較好的nested map寫法</title>
    <link href="https://henglin31.github.io/2018/03/03/%E6%AF%94%E8%BC%83%E5%A5%BD%E7%9A%84nested-map%E5%AF%AB%E6%B3%95/"/>
    <id>https://henglin31.github.io/2018/03/03/比較好的nested-map寫法/</id>
    <published>2018-03-03T15:02:41.000Z</published>
    <updated>2018-03-25T16:09:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在幫離職同事修正Android的bug時，看到了一段令人匪夷所思的code<br>仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group</p><p>輸入資料為n*m的matrix<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[][] dataMatrix = &#123;&#123;<span class="string">"level 1"</span>, <span class="string">"level 2"</span>, <span class="string">"level 3"</span>, <span class="string">"data 1"</span>&#125;,</span><br><span class="line">                         &#123;<span class="string">"level 1"</span>, <span class="string">"level 2"</span>, <span class="string">"level 3"</span>, <span class="string">"data 2"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p><p>但是原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1</p><figure class="highlight java"><figcaption><span>程式碼 1:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class="line">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">String level1 = <span class="string">"level 1"</span>;</span><br><span class="line">String level2 = <span class="string">"level 2"</span>;</span><br><span class="line">String level3 = <span class="string">"level 3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(level1))&#123;</span><br><span class="line">    <span class="keyword">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.get(level1).get(level2).put(level3, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        map.get(level1).put(level2, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">        <span class="keyword">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.get(level1).get(level2).put(level3, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    map.put(level1, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">    <span class="keyword">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.get(level1).get(level2).put(level3, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        map.get(level1).put(level2, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">        <span class="keyword">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.get(level1).get(level2).put(level3, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">            map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(map.get(level1).get(level2).get(level3).get(<span class="number">0</span>));</span><br><span class="line">System.out.println(map.get(level1).get(level2).get(level3).get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><a id="more"></a><p>程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改…<br>看到這段程式碼時，當下真的有種想幫他重構的衝動<br>但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益<br>最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2</p><figure class="highlight java"><figcaption><span>程式碼 2:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class="line">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">String level1 = <span class="string">"level 1"</span>;</span><br><span class="line">String level2 = <span class="string">"level 2"</span>;</span><br><span class="line">String level3 = <span class="string">"level 3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!map.containsKey(level1)) &#123;</span><br><span class="line">    map.put(level1, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!map.get(level1).containsKey(level2)) &#123;</span><br><span class="line">    map.get(level1).put(level2, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!map.get(level1).get(level2).containsKey(level3)) &#123;</span><br><span class="line">    map.get(level1).get(level2).put(level3, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.get(level1).get(level2).get(level3).add(<span class="string">"data 1"</span>);</span><br><span class="line">map.get(level1).get(level2).get(level3).add(<span class="string">"data 2"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map.get(level1).get(level2).get(level3).get(<span class="number">0</span>));</span><br><span class="line">System.out.println(map.get(level1).get(level2).get(level3).get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化<br>因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null<br>以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可<br>不管之後增加幾層map都不需要寫成複雜的巢狀判斷式</p><p>隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可…<br>就如同下方的程式碼 3</p><figure class="highlight java"><figcaption><span>程式碼 3:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map&lt;level 1 + level 2 + level 3, List&lt;data&gt;&gt;</span></span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">String level1 = <span class="string">"level 1"</span>;</span><br><span class="line">String level2 = <span class="string">"level 2"</span>;</span><br><span class="line">String level3 = <span class="string">"level 3"</span>;</span><br><span class="line"></span><br><span class="line">String combinKey = level1 + level2 + level3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!map.put(combinKey)) &#123;</span><br><span class="line">    map,put(combinKey, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.get(combinKey).add(<span class="string">"data 1"</span>);</span><br><span class="line">map.get(combinKey).add(<span class="string">"data 2"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map.get(combinKey).get(<span class="number">0</span>));</span><br><span class="line">System.out.println(map.get(combinKey).get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>若是能夠使用 java 8 的 stream 的話就更簡單了，如同下方的程式碼 4</p><figure class="highlight java"><figcaption><span>程式碼 4:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; map = Arrays.stream(dataMatrix).collect(</span><br><span class="line">                Collectors.toMap(</span><br><span class="line">                    kv -&gt; kv[<span class="number">0</span>] + kv[<span class="number">1</span>] + kv[<span class="number">2</span>],</span><br><span class="line">                    kv -&gt; Lists.newArrayList(kv[<span class="number">3</span>]),</span><br><span class="line">                    (newVal, oldVal) -&gt; &#123;</span><br><span class="line">                        newVal.addAll(oldVal);</span><br><span class="line">                        <span class="keyword">return</span> newVal;</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            );</span><br></pre></td></tr></table></figure><p>結論：<br>我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養<br>不是只求程式會跑就好，這樣只會累積一些不必要的技術債…<br>所以我覺得每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀<br>時時提醒自己不要埋地雷給別人踩，顯現自己的專業</p><p>此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在幫離職同事修正Android的bug時，看到了一段令人匪夷所思的code&lt;br&gt;仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group&lt;/p&gt;
&lt;p&gt;輸入資料為n*m的matrix&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[][] dataMatrix = &amp;#123;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;level 1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;level 2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;level 3&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;level 1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;level 2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;level 3&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;程式碼 1:&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Map&amp;lt;level 1, Map&amp;lt;level 2, Map&amp;lt;level 3, List&amp;lt;data&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Map&amp;lt;String, Map&amp;lt;String, Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&amp;gt;&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String level1 = &lt;span class=&quot;string&quot;&gt;&quot;level 1&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String level2 = &lt;span class=&quot;string&quot;&gt;&quot;level 2&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String level3 = &lt;span class=&quot;string&quot;&gt;&quot;level 3&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.containsKey(level1))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.get(level1).containsKey(level2))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.get(level1).get(level2).containsKey(level3))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).put(level3, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map.get(level1).put(level2, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.get(level1).get(level2).containsKey(level3))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).put(level3, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    map.put(level1, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.get(level1).containsKey(level2))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.get(level1).get(level2).containsKey(level3))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).put(level3, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map.get(level1).put(level2, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.get(level1).get(level2).containsKey(level3))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).put(level3, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(level1).get(level2).get(level3).add(&lt;span class=&quot;string&quot;&gt;&quot;data 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(map.get(level1).get(level2).get(level3).get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(map.get(level1).get(level2).get(level3).get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://henglin31.github.io/tags/java/"/>
    
      <category term="clean code" scheme="https://henglin31.github.io/tags/clean-code/"/>
    
  </entry>
  
  <entry>
    <title>更換hexo themes</title>
    <link href="https://henglin31.github.io/2018/02/20/%E6%9B%B4%E6%8F%9Bhexo-themes/"/>
    <id>https://henglin31.github.io/2018/02/20/更換hexo-themes/</id>
    <published>2018-02-20T13:41:43.000Z</published>
    <updated>2018-03-17T16:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>稍微嘗試更換hexo themes<br>雖然原生的landscape theme的介面已經很簡潔<br>但還是想要更精簡一些</p><p>比較了幾個比較知名的theme<br>最後決定使用yilia這個theme<br>介面簡潔乾淨而且RWD的效果也不錯<br>除了不支援舊版IE以外沒什麼好挑惕的<br>最後當然要幫作者github上的yilia專案加顆星<br>也順便學習設定disqus當作留言板</p><p>今天是連假的最後一天<br>這幾天有空的時候就練習Git的操作<br>感覺不賴</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;稍微嘗試更換hexo themes&lt;br&gt;雖然原生的landscape theme的介面已經很簡潔&lt;br&gt;但還是想要更精簡一些&lt;/p&gt;
&lt;p&gt;比較了幾個比較知名的theme&lt;br&gt;最後決定使用yilia這個theme&lt;br&gt;介面簡潔乾淨而且RWD的效果也不錯&lt;br&gt;除了不支
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://henglin31.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>第一篇Blog，從SVN到Git</title>
    <link href="https://henglin31.github.io/2018/02/16/%E7%AC%AC%E4%B8%80%E7%AF%87Blog%EF%BC%8C%E5%BE%9ESVN%E5%88%B0Git/"/>
    <id>https://henglin31.github.io/2018/02/16/第一篇Blog，從SVN到Git/</id>
    <published>2018-02-16T09:28:42.000Z</published>
    <updated>2018-02-18T08:11:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天是大年初一<br>趁春節的這段時間，來讀之前買的 O’Reilly “版本控制使用Git”</p><p>在這之前都是使用SVN來管理自己的source code<br>直到去年我的MacBook Pro的SSD硬碟無預期掛掉…<br>近五年的code就跟著一起消失了…</p><p>所以今年改使用Git管理，因為可以免費將code上傳到github上儲存<br>至少下次硬碟壞掉時，code不會跟著蒸發</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是大年初一&lt;br&gt;趁春節的這段時間，來讀之前買的 O’Reilly “版本控制使用Git”&lt;/p&gt;
&lt;p&gt;在這之前都是使用SVN來管理自己的source code&lt;br&gt;直到去年我的MacBook Pro的SSD硬碟無預期掛掉…&lt;br&gt;近五年的code就跟著一起消失了…
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://henglin31.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
