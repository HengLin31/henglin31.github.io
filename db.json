{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/googlef6c955fb09e49d48.html","path":"googlef6c955fb09e49d48.html","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1d74dbfe483b784140740c3c8913a295e9c63aca","modified":1520089417000},{"_id":"themes/yilia/.DS_Store","hash":"661fbb253b203cda19b997d93744afab85b5b445","modified":1518885531000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1518766939000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1518766939000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1518766939000},{"_id":"themes/yilia/_config.yml","hash":"b2aa8a5d5485dabc414e90c5f888deab916c599a","modified":1518881843000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1518766939000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1518766939000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1518766939000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1518766939000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1518766939000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1518766939000},{"_id":"source/_posts/Linux-如何避免重複執行特定jar.md","hash":"19a28bd32c2a663f3f641bb2c6bac6282584bd12","modified":1521302661000},{"_id":"source/_posts/使用-WeakReference-解決-Android-發生-memory-leak-問題.md","hash":"44f08f91cc6ad1158a27b62d0c0f56ffd4bd1e16","modified":1520688707000},{"_id":"source/_posts/更換hexo-themes.md","hash":"b5aaacf4d1dd5cbb9d3f088186cfb2967790e642","modified":1520355884000},{"_id":"source/_posts/比較好的nested-map寫法.md","hash":"bacd3946cbe3eb5fc31527490b6c647881143954","modified":1520356060000},{"_id":"source/_posts/第一篇Blog，從SVN到Git.md","hash":"750f2030b4b8abcd5a7437a59caa821d49ae4b08","modified":1518941505000},{"_id":"source/_posts/.DS_Store","hash":"80113056083cd288c3160dc116b0e8b4f3cef34e","modified":1521299153000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518766939000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"1efc9d034adf6456e816fcbb20023807ca64bbd0","modified":1518767044000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1518767044000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1518766939000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518766925000},{"_id":"themes/yilia/.git/index","hash":"6db65bb4d369595d1ad1979d130aeaaab6a857e5","modified":1518766939000},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1518766939000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1518766939000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1518766939000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1518766939000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1518766939000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1518766939000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1518766939000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1518766939000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1518766939000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1518766939000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1518766939000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1518766939000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1518766939000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1518766939000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1518766939000},{"_id":"themes/yilia/source/googlef6c955fb09e49d48.html","hash":"20626ce3703e9ed561e62b08c9ab89968fde4361","modified":1518885657000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1518766939000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1518766939000},{"_id":"themes/yilia/layout/.DS_Store","hash":"22f5eef2275c7b08742d28cfe85ab44849c47d73","modified":1518880926000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1518766939000},{"_id":"themes/yilia/source/.DS_Store","hash":"cf3c2ea82d89f42c99327ab1ed1564e9843fc5af","modified":1518780104000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1518766939000},{"_id":"themes/yilia/source-src/.DS_Store","hash":"16fd14b5fed94e155d63b8f25ccd9cd6c40995c9","modified":1518885635000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518766939000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1518766939000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1518766939000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1518766925000},{"_id":"themes/yilia/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1518766925000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"9443501ffded543b21afc6d6ff842840a109723f","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1518766939000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1518766939000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1518766939000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1518766939000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1518766939000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1518766939000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1518766939000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1518766939000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1518766939000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1518766939000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1518766939000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1518766939000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1518766939000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1518766939000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1518766939000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1518766939000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1518766939000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1518766939000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1518766939000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1518766939000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1518766939000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1518766939000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1518766939000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1518766939000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1518766939000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1518766939000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1518766939000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1518766939000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1518766939000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1518766939000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1518766939000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1518766939000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1518766939000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1518766939000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1518766939000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1518766939000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1518766939000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1518766939000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1518766939000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1518766939000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1518766939000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1518766939000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1518766939000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1518766939000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1518766939000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1518766939000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1518766939000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1518766939000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1518766939000},{"_id":"themes/yilia/.git/objects/pack/pack-2a3671e37306f5316414a4c829b868393dcf07ac.idx","hash":"dd89b7a8a3bebd8e29106242daee9999d2edda44","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1518766939000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1518766939000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1518766939000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1518766939000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"9443501ffded543b21afc6d6ff842840a109723f","modified":1518766939000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518766939000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"9443501ffded543b21afc6d6ff842840a109723f","modified":1518766939000},{"_id":"themes/yilia/.git/objects/pack/pack-2a3671e37306f5316414a4c829b868393dcf07ac.pack","hash":"d7ade42cc38a51c1544ae10903fe0a1526266320","modified":1518766939000},{"_id":"public/content.json","hash":"4ba0bbfe1845783663cab69f10ecbc232bf4e3f0","modified":1521302733424},{"_id":"public/sitemap.xml","hash":"4470c10c7f309cf50710a66e7c988bf2d0ab458c","modified":1521302733546},{"_id":"public/2018/03/17/Linux-如何避免重複執行特定jar/index.html","hash":"ae1273436bc01d02980b980fc5bd5b13ccdeebfb","modified":1521302733572},{"_id":"public/2018/03/10/使用-WeakReference-解決-Android-發生-memory-leak-問題/index.html","hash":"b33fec40396d5839961342270b865f907d2a0d96","modified":1521302733572},{"_id":"public/2018/03/03/比較好的nested-map寫法/index.html","hash":"3df8db3d71db53f60a6bf1e98f4fc04e90e3cf7c","modified":1521302733573},{"_id":"public/2018/02/20/更換hexo-themes/index.html","hash":"3dc3098100097a27890c887948837109f7a816db","modified":1521302733573},{"_id":"public/2018/02/16/第一篇Blog，從SVN到Git/index.html","hash":"22a0c957775fb18c769270968707bff4f695c626","modified":1521302733573},{"_id":"public/archives/index.html","hash":"b0dbc77615fcd9604ed0219c6a9638f4b65dcd70","modified":1521302733573},{"_id":"public/archives/2018/02/index.html","hash":"e2f2ad20014099aee6bd0a7c336165ca12a5ea0a","modified":1521302733573},{"_id":"public/archives/2018/index.html","hash":"a4cdfa585c63d89c572f3dba565ebbbb561355a8","modified":1521302733573},{"_id":"public/archives/2018/03/index.html","hash":"3884cdcd3a4ab0c792f98d98d4212a1d565ffb38","modified":1521302733574},{"_id":"public/index.html","hash":"74cb37d1f91fde65760179a197b1e01050ba1d49","modified":1521302733574},{"_id":"public/tags/shell/index.html","hash":"b16be209ee2a5a24e8f15d37281e2327048a8389","modified":1521302733574},{"_id":"public/tags/java/index.html","hash":"677560486c43fb09af08eaf46da25f82cc2e8a88","modified":1521302733574},{"_id":"public/tags/android/index.html","hash":"e8f6c0a1641544e4f86657d02f12b7f494426b2f","modified":1521302733575},{"_id":"public/tags/memory-leak/index.html","hash":"1af513017168631137177b986785591f14f43bd6","modified":1521302733575},{"_id":"public/tags/hexo/index.html","hash":"d69885ec1c4674e4e62214e8cd2eaf3dd4dd6838","modified":1521302733575},{"_id":"public/tags/clean-code/index.html","hash":"dec2fc622971d72357e19188d87ab766cf70c71e","modified":1521302733576},{"_id":"public/tags/Blog/index.html","hash":"796ab8b6032a95e08e730f56c0b25484a98b5505","modified":1521302733576},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1521302733579},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1521302733579},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1521302733579},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1521302733579},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1521302733579},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1521302733579},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1521302733579},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1521302733579},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1521302733580},{"_id":"public/googlef6c955fb09e49d48.html","hash":"20626ce3703e9ed561e62b08c9ab89968fde4361","modified":1521302733587},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1521302733587},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1521302733587},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1521302733587},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1521302733587}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Linux 如何避免重複執行特定jar","date":"2018-03-17T13:00:34.000Z","_content":"\n因為Linux是真正多人多工，若是在不同電腦上遠端登入\n執行同一個特定jar，就會造成重複執行\n所以在一般情況下，會寫script 做成 service\n再透過 start stop restart 去執行\n\n但是目前我遇到的問題是，需要幫還不熟悉linux同事寫一個script\n讓他可以執行他寫的jar，需求上是不允許重複執行又不要做成 service\n而且若發現JVM執行中，則需要刪除舊的JVM後重新執行\n\n所以寫個這個script，去做刪除JVM的動作\n\n```shell kill jar JVM, if exist .sh\n    PID=$(ps aux | grep jar-[0-9] | awk '{print $2}')\n    echo \"PID: \"$PID\n    if [ -z $PID ]; then\n        echo \"not exist PID\"\n    else\n        echo \"kill PID: \"$PID\n        kill -9 $PID\n    fi\n\n```\n\n第1行 ps aux 是找出所有user目前執行中的process\n接著使用 grep 找出特定的process，因為這個jar會帶版號\n例如： jar-1.1.jar 或是升級後 jar-1.2.jar\n所以多判斷帶版號的regex\n最後執行 awk 印出第2欄（因為第2欄是process的PID）\n第3行是檢查PID是否為空字串\n若PID不是空字串就表示JVM已經存在需要執行第7行去強制刪除JVM\n\n這樣一個簡單的script就完成了，現在同事只需要在執行jar前呼叫此.sh檔\n就可以避免重複執行了\n","source":"_posts/Linux-如何避免重複執行特定jar.md","raw":"---\ntitle: Linux 如何避免重複執行特定jar\ndate: 2018-03-17 21:00:34\ntags:\n- shell\n---\n\n因為Linux是真正多人多工，若是在不同電腦上遠端登入\n執行同一個特定jar，就會造成重複執行\n所以在一般情況下，會寫script 做成 service\n再透過 start stop restart 去執行\n\n但是目前我遇到的問題是，需要幫還不熟悉linux同事寫一個script\n讓他可以執行他寫的jar，需求上是不允許重複執行又不要做成 service\n而且若發現JVM執行中，則需要刪除舊的JVM後重新執行\n\n所以寫個這個script，去做刪除JVM的動作\n\n```shell kill jar JVM, if exist .sh\n    PID=$(ps aux | grep jar-[0-9] | awk '{print $2}')\n    echo \"PID: \"$PID\n    if [ -z $PID ]; then\n        echo \"not exist PID\"\n    else\n        echo \"kill PID: \"$PID\n        kill -9 $PID\n    fi\n\n```\n\n第1行 ps aux 是找出所有user目前執行中的process\n接著使用 grep 找出特定的process，因為這個jar會帶版號\n例如： jar-1.1.jar 或是升級後 jar-1.2.jar\n所以多判斷帶版號的regex\n最後執行 awk 印出第2欄（因為第2欄是process的PID）\n第3行是檢查PID是否為空字串\n若PID不是空字串就表示JVM已經存在需要執行第7行去強制刪除JVM\n\n這樣一個簡單的script就完成了，現在同事只需要在執行jar前呼叫此.sh檔\n就可以避免重複執行了\n","slug":"Linux-如何避免重複執行特定jar","published":1,"updated":"2018-03-17T16:04:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjevkd9do0000uln9vj0bzhvr","content":"<p>因為Linux是真正多人多工，若是在不同電腦上遠端登入<br>執行同一個特定jar，就會造成重複執行<br>所以在一般情況下，會寫script 做成 service<br>再透過 start stop restart 去執行</p>\n<p>但是目前我遇到的問題是，需要幫還不熟悉linux同事寫一個script<br>讓他可以執行他寫的jar，需求上是不允許重複執行又不要做成 service<br>而且若發現JVM執行中，則需要刪除舊的JVM後重新執行</p>\n<p>所以寫個這個script，去做刪除JVM的動作</p>\n<figure class=\"highlight shell\"><figcaption><span>kill jar JVM, if exist .sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(ps aux | grep jar-[0-9] | awk '&#123;print $2&#125;')</span><br><span class=\"line\">echo \"PID: \"$PID</span><br><span class=\"line\">if [ -z $PID ]; then</span><br><span class=\"line\">    echo \"not exist PID\"</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo \"kill PID: \"$PID</span><br><span class=\"line\">    kill -9 $PID</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>第1行 ps aux 是找出所有user目前執行中的process<br>接著使用 grep 找出特定的process，因為這個jar會帶版號<br>例如： jar-1.1.jar 或是升級後 jar-1.2.jar<br>所以多判斷帶版號的regex<br>最後執行 awk 印出第2欄（因為第2欄是process的PID）<br>第3行是檢查PID是否為空字串<br>若PID不是空字串就表示JVM已經存在需要執行第7行去強制刪除JVM</p>\n<p>這樣一個簡單的script就完成了，現在同事只需要在執行jar前呼叫此.sh檔<br>就可以避免重複執行了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>因為Linux是真正多人多工，若是在不同電腦上遠端登入<br>執行同一個特定jar，就會造成重複執行<br>所以在一般情況下，會寫script 做成 service<br>再透過 start stop restart 去執行</p>\n<p>但是目前我遇到的問題是，需要幫還不熟悉linux同事寫一個script<br>讓他可以執行他寫的jar，需求上是不允許重複執行又不要做成 service<br>而且若發現JVM執行中，則需要刪除舊的JVM後重新執行</p>\n<p>所以寫個這個script，去做刪除JVM的動作</p>\n<figure class=\"highlight shell\"><figcaption><span>kill jar JVM, if exist .sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(ps aux | grep jar-[0-9] | awk '&#123;print $2&#125;')</span><br><span class=\"line\">echo \"PID: \"$PID</span><br><span class=\"line\">if [ -z $PID ]; then</span><br><span class=\"line\">    echo \"not exist PID\"</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo \"kill PID: \"$PID</span><br><span class=\"line\">    kill -9 $PID</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>第1行 ps aux 是找出所有user目前執行中的process<br>接著使用 grep 找出特定的process，因為這個jar會帶版號<br>例如： jar-1.1.jar 或是升級後 jar-1.2.jar<br>所以多判斷帶版號的regex<br>最後執行 awk 印出第2欄（因為第2欄是process的PID）<br>第3行是檢查PID是否為空字串<br>若PID不是空字串就表示JVM已經存在需要執行第7行去強制刪除JVM</p>\n<p>這樣一個簡單的script就完成了，現在同事只需要在執行jar前呼叫此.sh檔<br>就可以避免重複執行了</p>\n"},{"title":"使用 WeakReference 解決 Android 發生 memory leak 問題","date":"2018-03-10T13:03:49.000Z","_content":"\n先說解法\n使用 WeakReference 讓 activityContext 可以被系統正常GC\n不會因被因AsyncTask長期佔用造成memory leak的問題發生\n\n```java WeakReference 使用方式\n    WeakReference<Context> contextRef = new WeakReference<Context>(activityContext);\n    if(null != contextRef.get()){//判斷有無被系統GC\n        Context context = contextRef.get();\n        //可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務\n    }\n```\n\n為什麼會發生 memory leak \n主要是 AsyncTask 取得 activityContext 長時間佔用，造成 Activity 無法被回收\n主要原因是 AsyncTask 任務是向 server request 資料回手機後，接著將資料更新到UI上\n所以有可能 AsyncTask 的生命週期會長於 Activity 的生命週期\n因 activityContext 無法回收，最終發生 memory leak...\n\n\n\n\n","source":"_posts/使用-WeakReference-解決-Android-發生-memory-leak-問題.md","raw":"---\ntitle: 使用 WeakReference 解決 Android 發生 memory leak 問題\ndate: 2018-03-10 21:03:49\ntags:\n- java\n- android\n- memory leak\n---\n\n先說解法\n使用 WeakReference 讓 activityContext 可以被系統正常GC\n不會因被因AsyncTask長期佔用造成memory leak的問題發生\n\n```java WeakReference 使用方式\n    WeakReference<Context> contextRef = new WeakReference<Context>(activityContext);\n    if(null != contextRef.get()){//判斷有無被系統GC\n        Context context = contextRef.get();\n        //可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務\n    }\n```\n\n為什麼會發生 memory leak \n主要是 AsyncTask 取得 activityContext 長時間佔用，造成 Activity 無法被回收\n主要原因是 AsyncTask 任務是向 server request 資料回手機後，接著將資料更新到UI上\n所以有可能 AsyncTask 的生命週期會長於 Activity 的生命週期\n因 activityContext 無法回收，最終發生 memory leak...\n\n\n\n\n","slug":"使用-WeakReference-解決-Android-發生-memory-leak-問題","published":1,"updated":"2018-03-10T13:31:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjevkd9du0001uln91qyumb1f","content":"<p>先說解法<br>使用 WeakReference 讓 activityContext 可以被系統正常GC<br>不會因被因AsyncTask長期佔用造成memory leak的問題發生</p>\n<figure class=\"highlight java\"><figcaption><span>WeakReference 使用方式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakReference&lt;Context&gt; contextRef = <span class=\"keyword\">new</span> WeakReference&lt;Context&gt;(activityContext);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != contextRef.get())&#123;<span class=\"comment\">//判斷有無被系統GC</span></span><br><span class=\"line\">    Context context = contextRef.get();</span><br><span class=\"line\">    <span class=\"comment\">//可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>為什麼會發生 memory leak<br>主要是 AsyncTask 取得 activityContext 長時間佔用，造成 Activity 無法被回收<br>主要原因是 AsyncTask 任務是向 server request 資料回手機後，接著將資料更新到UI上<br>所以有可能 AsyncTask 的生命週期會長於 Activity 的生命週期<br>因 activityContext 無法回收，最終發生 memory leak…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先說解法<br>使用 WeakReference 讓 activityContext 可以被系統正常GC<br>不會因被因AsyncTask長期佔用造成memory leak的問題發生</p>\n<figure class=\"highlight java\"><figcaption><span>WeakReference 使用方式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakReference&lt;Context&gt; contextRef = <span class=\"keyword\">new</span> WeakReference&lt;Context&gt;(activityContext);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != contextRef.get())&#123;<span class=\"comment\">//判斷有無被系統GC</span></span><br><span class=\"line\">    Context context = contextRef.get();</span><br><span class=\"line\">    <span class=\"comment\">//可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>為什麼會發生 memory leak<br>主要是 AsyncTask 取得 activityContext 長時間佔用，造成 Activity 無法被回收<br>主要原因是 AsyncTask 任務是向 server request 資料回手機後，接著將資料更新到UI上<br>所以有可能 AsyncTask 的生命週期會長於 Activity 的生命週期<br>因 activityContext 無法回收，最終發生 memory leak…</p>\n"},{"title":"更換hexo themes","date":"2018-02-20T13:41:43.000Z","_content":"\n稍微嘗試更換hexo themes\n雖然原生的landscape theme已經很簡潔\n但原生的選單格式覺得可以更精簡些\n\n比較了幾個比較知名的theme\n最後決定使用yilia這個theme\n介面簡潔乾淨而且RWD的效果也不錯\n除了不太支援舊版IE以外沒什麼好挑惕的\n最後當然要幫作者github上的yilia專案加顆星\n也順便學習設定disqus當作留言板\n\n\n今天是連假的最後一天\n這幾天有空的時候就練習Git的操作\n感覺不賴\n","source":"_posts/更換hexo-themes.md","raw":"---\ntitle: 更換hexo themes\ndate: 2018-02-20 21:41:43\ntags:\n- hexo\n---\n\n稍微嘗試更換hexo themes\n雖然原生的landscape theme已經很簡潔\n但原生的選單格式覺得可以更精簡些\n\n比較了幾個比較知名的theme\n最後決定使用yilia這個theme\n介面簡潔乾淨而且RWD的效果也不錯\n除了不太支援舊版IE以外沒什麼好挑惕的\n最後當然要幫作者github上的yilia專案加顆星\n也順便學習設定disqus當作留言板\n\n\n今天是連假的最後一天\n這幾天有空的時候就練習Git的操作\n感覺不賴\n","slug":"更換hexo-themes","published":1,"updated":"2018-03-06T17:04:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjevkd9e10003uln9hbvvpyz7","content":"<p>稍微嘗試更換hexo themes<br>雖然原生的landscape theme已經很簡潔<br>但原生的選單格式覺得可以更精簡些</p>\n<p>比較了幾個比較知名的theme<br>最後決定使用yilia這個theme<br>介面簡潔乾淨而且RWD的效果也不錯<br>除了不太支援舊版IE以外沒什麼好挑惕的<br>最後當然要幫作者github上的yilia專案加顆星<br>也順便學習設定disqus當作留言板</p>\n<p>今天是連假的最後一天<br>這幾天有空的時候就練習Git的操作<br>感覺不賴</p>\n","site":{"data":{}},"excerpt":"","more":"<p>稍微嘗試更換hexo themes<br>雖然原生的landscape theme已經很簡潔<br>但原生的選單格式覺得可以更精簡些</p>\n<p>比較了幾個比較知名的theme<br>最後決定使用yilia這個theme<br>介面簡潔乾淨而且RWD的效果也不錯<br>除了不太支援舊版IE以外沒什麼好挑惕的<br>最後當然要幫作者github上的yilia專案加顆星<br>也順便學習設定disqus當作留言板</p>\n<p>今天是連假的最後一天<br>這幾天有空的時候就練習Git的操作<br>感覺不賴</p>\n"},{"title":"比較好的nested map寫法","date":"2018-03-03T15:02:41.000Z","_content":"\n在幫離職同事修正Android的bug時，看到了一段令人匪夷所思的code\n仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group\n\n輸入資料為n*m的matrix\n```javascript\n[[\"level 1\", \"level 2\", \"level 3\", \"data 1\"]\n[\"level 1\", \"level 2\", \"level 3\", \"data 2\"]]\n```\n\n因為原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1\n\n```java 程式碼 1:\n    //Map<level 1, Map<level 2, Map<level 3, List<data>>>>\n    Map<String, Map<String, Map<String, List<String>>>> map = new HashMap<>();\n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n    \n    if(map.containsKey(level1)){\n        if(map.get(level1).containsKey(level2)){\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }else{\n            map.get(level1).put(level2, new HashMap<>());\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }\n    }else{\n        map.put(level1, new HashMap<>());\n        if(map.get(level1).containsKey(level2)){\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }else{\n            map.get(level1).put(level2, new HashMap<>());\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }\n    }\n\n    System.out.println(map.get(level1).get(level2).get(level3).get(0));\n    System.out.println(map.get(level1).get(level2).get(level3).get(1));\n```\n\n程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改...\n看到這段程式碼時，當下真的有種想幫他重構的衝動\n但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益\n最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2\n\n```java 程式碼 2:\n    //Map<level 1, Map<level 2, Map<level 3, List<data>>>>\n    Map<String, Map<String, Map<String, List<String>>>> map = new HashMap<>();\n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n\n    if(!map.containsKey(level1)) {\n        map.put(level1, new HashMap<>());\n    }\n    if(!map.get(level1).containsKey(level2)) {\n        map.get(level1).put(level2, new HashMap<>());\n    }\n    if(!map.get(level1).get(level2).containsKey(level3)) {\n        map.get(level1).get(level2).put(level3, new LinkedList<>());\n    }\n\n    map.get(level1).get(level2).get(level3).add(\"data 1\");\n    map.get(level1).get(level2).get(level3).add(\"data 2\");\n    \n    System.out.println(map.get(level1).get(level2).get(level3).get(0));\n    System.out.println(map.get(level1).get(level2).get(level3).get(1));\n```\n\n程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化\n因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null\n以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可\n不管之後增加幾層map都不需要寫成複雜的巢狀判斷式\n\n隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可...\n就如同下方的程式碼 3\n\n```java 程式碼 3:\n    //Map<level 1 + level 2 + level 3, List<data>>\n    Map<String, List<String>> map = new HashMap<>();\n    \n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n    \n    String combinKey = level1 + level2 + level3;\n    \n    if(!map.put(combinKey)) {\n        map,put(combinKey, new LinkedList<>());\n    }\n\n    map.get(combinKey).add(\"data 1\");\n    map.get(combinKey).add(\"data 2\");\n    \n    System.out.println(map.get(combinKey).get(0));\n    System.out.println(map.get(combinKey).get(1));\n```\n\n結論： \n我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養\n不是只求程式會跑就好，這樣只會累積一些不必要的技術債...\n所以我認為每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀\n時時提醒自己不要埋地雷給別人踩\n\n此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上...\n","source":"_posts/比較好的nested-map寫法.md","raw":"---\ntitle: 比較好的nested map寫法\ndate: 2018-03-03 23:02:41\ntags:\n- java\n- clean code\n---\n\n在幫離職同事修正Android的bug時，看到了一段令人匪夷所思的code\n仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group\n\n輸入資料為n*m的matrix\n```javascript\n[[\"level 1\", \"level 2\", \"level 3\", \"data 1\"]\n[\"level 1\", \"level 2\", \"level 3\", \"data 2\"]]\n```\n\n因為原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1\n\n```java 程式碼 1:\n    //Map<level 1, Map<level 2, Map<level 3, List<data>>>>\n    Map<String, Map<String, Map<String, List<String>>>> map = new HashMap<>();\n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n    \n    if(map.containsKey(level1)){\n        if(map.get(level1).containsKey(level2)){\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }else{\n            map.get(level1).put(level2, new HashMap<>());\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }\n    }else{\n        map.put(level1, new HashMap<>());\n        if(map.get(level1).containsKey(level2)){\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }else{\n            map.get(level1).put(level2, new HashMap<>());\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }\n    }\n\n    System.out.println(map.get(level1).get(level2).get(level3).get(0));\n    System.out.println(map.get(level1).get(level2).get(level3).get(1));\n```\n\n程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改...\n看到這段程式碼時，當下真的有種想幫他重構的衝動\n但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益\n最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2\n\n```java 程式碼 2:\n    //Map<level 1, Map<level 2, Map<level 3, List<data>>>>\n    Map<String, Map<String, Map<String, List<String>>>> map = new HashMap<>();\n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n\n    if(!map.containsKey(level1)) {\n        map.put(level1, new HashMap<>());\n    }\n    if(!map.get(level1).containsKey(level2)) {\n        map.get(level1).put(level2, new HashMap<>());\n    }\n    if(!map.get(level1).get(level2).containsKey(level3)) {\n        map.get(level1).get(level2).put(level3, new LinkedList<>());\n    }\n\n    map.get(level1).get(level2).get(level3).add(\"data 1\");\n    map.get(level1).get(level2).get(level3).add(\"data 2\");\n    \n    System.out.println(map.get(level1).get(level2).get(level3).get(0));\n    System.out.println(map.get(level1).get(level2).get(level3).get(1));\n```\n\n程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化\n因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null\n以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可\n不管之後增加幾層map都不需要寫成複雜的巢狀判斷式\n\n隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可...\n就如同下方的程式碼 3\n\n```java 程式碼 3:\n    //Map<level 1 + level 2 + level 3, List<data>>\n    Map<String, List<String>> map = new HashMap<>();\n    \n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n    \n    String combinKey = level1 + level2 + level3;\n    \n    if(!map.put(combinKey)) {\n        map,put(combinKey, new LinkedList<>());\n    }\n\n    map.get(combinKey).add(\"data 1\");\n    map.get(combinKey).add(\"data 2\");\n    \n    System.out.println(map.get(combinKey).get(0));\n    System.out.println(map.get(combinKey).get(1));\n```\n\n結論： \n我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養\n不是只求程式會跑就好，這樣只會累積一些不必要的技術債...\n所以我認為每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀\n時時提醒自己不要埋地雷給別人踩\n\n此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上...\n","slug":"比較好的nested-map寫法","published":1,"updated":"2018-03-06T17:07:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjevkd9e40004uln95mm2kxkq","content":"<p>在幫離職同事修正Android的bug時，看到了一段令人匪夷所思的code<br>仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group</p>\n<p>輸入資料為n*m的matrix<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"string\">\"level 1\"</span>, <span class=\"string\">\"level 2\"</span>, <span class=\"string\">\"level 3\"</span>, <span class=\"string\">\"data 1\"</span>]</span><br><span class=\"line\">[<span class=\"string\">\"level 1\"</span>, <span class=\"string\">\"level 2\"</span>, <span class=\"string\">\"level 3\"</span>, <span class=\"string\">\"data 2\"</span>]]</span><br></pre></td></tr></table></figure></p>\n<p>因為原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 1:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(map.containsKey(level1))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    map.put(level1, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改…<br>看到這段程式碼時，當下真的有種想幫他重構的衝動<br>但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益<br>最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 2:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.containsKey(level1)) &#123;</span><br><span class=\"line\">    map.put(level1, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.get(level1).containsKey(level2)) &#123;</span><br><span class=\"line\">    map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.get(level1).get(level2).containsKey(level3)) &#123;</span><br><span class=\"line\">    map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化<br>因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null<br>以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可<br>不管之後增加幾層map都不需要寫成複雜的巢狀判斷式</p>\n<p>隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可…<br>就如同下方的程式碼 3</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 3:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1 + level 2 + level 3, List&lt;data&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String combinKey = level1 + level2 + level3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.put(combinKey)) &#123;</span><br><span class=\"line\">    map,put(combinKey, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.get(combinKey).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">map.get(combinKey).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(combinKey).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(combinKey).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>結論：<br>我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養<br>不是只求程式會跑就好，這樣只會累積一些不必要的技術債…<br>所以我認為每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀<br>時時提醒自己不要埋地雷給別人踩</p>\n<p>此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在幫離職同事修正Android的bug時，看到了一段令人匪夷所思的code<br>仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group</p>\n<p>輸入資料為n*m的matrix<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"string\">\"level 1\"</span>, <span class=\"string\">\"level 2\"</span>, <span class=\"string\">\"level 3\"</span>, <span class=\"string\">\"data 1\"</span>]</span><br><span class=\"line\">[<span class=\"string\">\"level 1\"</span>, <span class=\"string\">\"level 2\"</span>, <span class=\"string\">\"level 3\"</span>, <span class=\"string\">\"data 2\"</span>]]</span><br></pre></td></tr></table></figure></p>\n<p>因為原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 1:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(map.containsKey(level1))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    map.put(level1, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改…<br>看到這段程式碼時，當下真的有種想幫他重構的衝動<br>但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益<br>最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 2:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.containsKey(level1)) &#123;</span><br><span class=\"line\">    map.put(level1, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.get(level1).containsKey(level2)) &#123;</span><br><span class=\"line\">    map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.get(level1).get(level2).containsKey(level3)) &#123;</span><br><span class=\"line\">    map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化<br>因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null<br>以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可<br>不管之後增加幾層map都不需要寫成複雜的巢狀判斷式</p>\n<p>隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可…<br>就如同下方的程式碼 3</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 3:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1 + level 2 + level 3, List&lt;data&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String combinKey = level1 + level2 + level3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.put(combinKey)) &#123;</span><br><span class=\"line\">    map,put(combinKey, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.get(combinKey).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">map.get(combinKey).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(combinKey).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(combinKey).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>結論：<br>我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養<br>不是只求程式會跑就好，這樣只會累積一些不必要的技術債…<br>所以我認為每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀<br>時時提醒自己不要埋地雷給別人踩</p>\n<p>此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上…</p>\n"},{"title":"第一篇Blog，從SVN到Git","date":"2018-02-16T09:28:42.000Z","_content":"\n今天是大年初一\n趁春節的這段時間，來讀之前買的 O'Reilly “版本控制使用Git”\n\n在這之前都是使用SVN來管理自己的source code\n直到去年我的MacBook Pro的SSD硬碟無預期掛掉...\n近五年的code就跟著一起消失了...\n\n所以今年改使用Git管理，因為可以免費將code上傳到github上儲存\n至少下次硬碟壞掉時，code不會跟著蒸發\n","source":"_posts/第一篇Blog，從SVN到Git.md","raw":"---\ntitle: 第一篇Blog，從SVN到Git\ndate: 2018-02-16 17:28:42\ntags:\n- Blog\n---\n\n今天是大年初一\n趁春節的這段時間，來讀之前買的 O'Reilly “版本控制使用Git”\n\n在這之前都是使用SVN來管理自己的source code\n直到去年我的MacBook Pro的SSD硬碟無預期掛掉...\n近五年的code就跟著一起消失了...\n\n所以今年改使用Git管理，因為可以免費將code上傳到github上儲存\n至少下次硬碟壞掉時，code不會跟著蒸發\n","slug":"第一篇Blog，從SVN到Git","published":1,"updated":"2018-02-18T08:11:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjevkd9e80005uln9hl5ilw7h","content":"<p>今天是大年初一<br>趁春節的這段時間，來讀之前買的 O’Reilly “版本控制使用Git”</p>\n<p>在這之前都是使用SVN來管理自己的source code<br>直到去年我的MacBook Pro的SSD硬碟無預期掛掉…<br>近五年的code就跟著一起消失了…</p>\n<p>所以今年改使用Git管理，因為可以免費將code上傳到github上儲存<br>至少下次硬碟壞掉時，code不會跟著蒸發</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天是大年初一<br>趁春節的這段時間，來讀之前買的 O’Reilly “版本控制使用Git”</p>\n<p>在這之前都是使用SVN來管理自己的source code<br>直到去年我的MacBook Pro的SSD硬碟無預期掛掉…<br>近五年的code就跟著一起消失了…</p>\n<p>所以今年改使用Git管理，因為可以免費將code上傳到github上儲存<br>至少下次硬碟壞掉時，code不會跟著蒸發</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjevkd9do0000uln9vj0bzhvr","tag_id":"cjevkd9dy0002uln9bbjw314q","_id":"cjevkd9ea0007uln9l87yagut"},{"post_id":"cjevkd9du0001uln91qyumb1f","tag_id":"cjevkd9ea0006uln9s4wzttkl","_id":"cjevkd9ec000buln9q4yb1qjv"},{"post_id":"cjevkd9du0001uln91qyumb1f","tag_id":"cjevkd9eb0008uln9rcv3h0nx","_id":"cjevkd9ec000culn96r2pss7o"},{"post_id":"cjevkd9du0001uln91qyumb1f","tag_id":"cjevkd9eb0009uln9v1shjkhf","_id":"cjevkd9ed000euln958ty9k2h"},{"post_id":"cjevkd9e10003uln9hbvvpyz7","tag_id":"cjevkd9ec000auln9yoioa6i0","_id":"cjevkd9ed000fuln9wrn17mut"},{"post_id":"cjevkd9e40004uln95mm2kxkq","tag_id":"cjevkd9ea0006uln9s4wzttkl","_id":"cjevkd9ee000iuln9isl5eiir"},{"post_id":"cjevkd9e40004uln95mm2kxkq","tag_id":"cjevkd9ee000guln91baq5xax","_id":"cjevkd9ee000juln9tykq6ljx"},{"post_id":"cjevkd9e80005uln9hl5ilw7h","tag_id":"cjevkd9ee000huln9ykxrlokv","_id":"cjevkd9ee000kuln9zu5gadpq"}],"Tag":[{"name":"shell","_id":"cjevkd9dy0002uln9bbjw314q"},{"name":"java","_id":"cjevkd9ea0006uln9s4wzttkl"},{"name":"android","_id":"cjevkd9eb0008uln9rcv3h0nx"},{"name":"memory leak","_id":"cjevkd9eb0009uln9v1shjkhf"},{"name":"hexo","_id":"cjevkd9ec000auln9yoioa6i0"},{"name":"clean code","_id":"cjevkd9ee000guln91baq5xax"},{"name":"Blog","_id":"cjevkd9ee000huln9ykxrlokv"}]}}