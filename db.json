{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/resume/link.svg","path":"resume/link.svg","modified":0,"renderable":0},{"_id":"source/images/chart-diy-001.png","path":"images/chart-diy-001.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-recordreader-001.png","path":"images/hadoop-recordreader-001.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-004.png","path":"images/hadoop-writable-004.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-006.png","path":"images/hadoop-writable-006.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-005.png","path":"images/hadoop-writable-005.png","modified":0,"renderable":0},{"_id":"source/images/java-unit-test-mockito-powermock-1-002.png","path":"images/java-unit-test-mockito-powermock-1-002.png","modified":0,"renderable":0},{"_id":"source/images/java-unit-test-mockito-powermock-1-001.png","path":"images/java-unit-test-mockito-powermock-1-001.png","modified":0,"renderable":0},{"_id":"source/images/java-unit-test-mockito-powermock-2-002.png","path":"images/java-unit-test-mockito-powermock-2-002.png","modified":0,"renderable":0},{"_id":"source/images/java-unit-test-mockito-powermock-2-001.png","path":"images/java-unit-test-mockito-powermock-2-001.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-001.png","path":"images/thread-pool-executor-001.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-002.png","path":"images/thread-pool-executor-002.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-003.png","path":"images/thread-pool-executor-003.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-004.png","path":"images/thread-pool-executor-004.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-005.png","path":"images/thread-pool-executor-005.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-006.png","path":"images/thread-pool-executor-006.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-007.png","path":"images/thread-pool-executor-007.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-008.png","path":"images/thread-pool-executor-008.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-009.png","path":"images/thread-pool-executor-009.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool-executor-010.png","path":"images/thread-pool-executor-010.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/googlef6c955fb09e49d48.html","path":"googlef6c955fb09e49d48.html","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"source/images/app-icon-002.png","path":"images/app-icon-002.png","modified":0,"renderable":0},{"_id":"source/images/chart-diy-002.png","path":"images/chart-diy-002.png","modified":0,"renderable":0},{"_id":"source/images/fork-join-001.png","path":"images/fork-join-001.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-003.png","path":"images/hadoop-writable-003.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-009.png","path":"images/hadoop-writable-009.png","modified":0,"renderable":0},{"_id":"source/images/jcconf-2018-001.png","path":"images/jcconf-2018-001.png","modified":0,"renderable":0},{"_id":"source/images/jcconf-2018-002.png","path":"images/jcconf-2018-002.png","modified":0,"renderable":0},{"_id":"source/images/jcconf-2019-001.png","path":"images/jcconf-2019-001.png","modified":0,"renderable":0},{"_id":"source/images/jsdc-2019-002.png","path":"images/jsdc-2019-002.png","modified":0,"renderable":0},{"_id":"source/images/jsdc-2019-003.png","path":"images/jsdc-2019-003.png","modified":0,"renderable":0},{"_id":"source/images/jsdc-2019-001.png","path":"images/jsdc-2019-001.png","modified":0,"renderable":0},{"_id":"source/images/jsdc-2019-005.png","path":"images/jsdc-2019-005.png","modified":0,"renderable":0},{"_id":"source/images/jsdc-2019-004.png","path":"images/jsdc-2019-004.png","modified":0,"renderable":0},{"_id":"source/images/reentrant-read-write-lock-001.png","path":"images/reentrant-read-write-lock-001.png","modified":0,"renderable":0},{"_id":"source/images/spring-cloud-gradle-docker-001.png","path":"images/spring-cloud-gradle-docker-001.png","modified":0,"renderable":0},{"_id":"source/images/spring-cloud-gradle-docker-002.png","path":"images/spring-cloud-gradle-docker-002.png","modified":0,"renderable":0},{"_id":"source/images/st-005.png","path":"images/st-005.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"source/images/app-icon-003.png","path":"images/app-icon-003.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-002.png","path":"images/hadoop-writable-002.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-007.png","path":"images/hadoop-writable-007.png","modified":0,"renderable":0},{"_id":"source/images/nio-byte-buffer-001.png","path":"images/nio-byte-buffer-001.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/images/app-icon-001.png","path":"images/app-icon-001.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-001.png","path":"images/hadoop-writable-001.png","modified":0,"renderable":0},{"_id":"source/images/st-001.png","path":"images/st-001.png","modified":0,"renderable":0},{"_id":"source/images/st-004.png","path":"images/st-004.png","modified":0,"renderable":0},{"_id":"source/assets/avatar.png","path":"assets/avatar.png","modified":0,"renderable":0},{"_id":"source/images/hadoop-writable-008.png","path":"images/hadoop-writable-008.png","modified":0,"renderable":0},{"_id":"source/images/st-003.png","path":"images/st-003.png","modified":0,"renderable":0},{"_id":"source/images/st-002.png","path":"images/st-002.png","modified":0,"renderable":0},{"_id":"source/images/heng-002.png","path":"images/heng-002.png","modified":0,"renderable":0},{"_id":"source/images/heng-001.png","path":"images/heng-001.png","modified":0,"renderable":0},{"_id":"source/images/jcconf-2020-001.png","path":"images/jcconf-2020-001.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"fb617188c4f8fd940893ea401ece0a8d996f65a7","modified":1587811684000},{"_id":"themes/yilia/.DS_Store","hash":"10af0e520caf203fb43cc84cb5e72914e1397965","modified":1531670186000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1518766939000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1518766939000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1518766939000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1518766939000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1518766939000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1518766939000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1518766939000},{"_id":"themes/yilia/_config.yml","hash":"776344d4ec0519ba7031e2c3ec57f49a1f43132f","modified":1574271180000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1518766939000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1518766939000},{"_id":"source/_posts/JCConf-2019-1.md","hash":"6a475ac3fc04a3ec8ac393a9fa1a238ca90a98b2","modified":1606536938000},{"_id":"source/_posts/JCConf-2020.md","hash":"144a17340ac8201103f5edf62c51433c8e07df3f","modified":1606541274000},{"_id":"source/_posts/.DS_Store","hash":"80113056083cd288c3160dc116b0e8b4f3cef34e","modified":1580430053000},{"_id":"source/_posts/Hadoop-RecordReader.md","hash":"befa406ba423dd15850c86bf6fe258116cfce564","modified":1573476909000},{"_id":"source/_posts/JCConf-2019.md","hash":"f30e27287b7b37359287e664fe61494619843d9e","modified":1570716700000},{"_id":"source/_posts/JCConf-2018.md","hash":"90c8c16086c525e41e1e5d8b6baa690ab07b436c","modified":1570716615000},{"_id":"source/_posts/JSDC-2019.md","hash":"041fcfbf96b9df0ca564d79044cb1f5849227f50","modified":1572097738000},{"_id":"source/_posts/Hadoop-Writable.md","hash":"f550460237f9a1f713c2e2d8c59bb3c48fad6549","modified":1573476957000},{"_id":"source/_posts/Java-NIO-ByteBuffer-基本操作圖.md","hash":"c32fd8f26e15557d415db68d3fea105504ae44c9","modified":1579006333000},{"_id":"source/_posts/Java-BlockingQueue-適合應用在哪些場景.md","hash":"147d7a6fd650919fadcae135e05173cc33a3d0da","modified":1581293732000},{"_id":"source/_posts/Java-ReentrantLock-和-ReentrantReadWriteLock-的使用時機.md","hash":"88285bed4f9774a17dff815dc0c3a1a20b0a2781","modified":1578222620000},{"_id":"source/_posts/Java-Unit-Test-使用-Mockito-Powermock-1.md","hash":"ef9c3629e3e72eca8ad80360368fb68f2e49dcdf","modified":1587996811000},{"_id":"source/_posts/Java-Unit-Test-使用-Mockito-Powermock-3.md","hash":"591f174de9c0a9b8a2790369c4b93da7a91ea595","modified":1598693402000},{"_id":"source/_posts/Java-volatile-的使用時機.md","hash":"9d192e184f2bc5b5078905646290a6e5e44042c9","modified":1579625814000},{"_id":"source/_posts/Java-Unit-Test-使用-Mockito-Powermock-2.md","hash":"eec2eaae9336de1a9239dea9f25a77343d732426","modified":1592133006000},{"_id":"source/_posts/Linux-如何避免重複執行特定jar.md","hash":"f6d101ab7a709e5abdb8283d4ef9c86a3f8614fc","modified":1579629183000},{"_id":"source/_posts/spring-cloud-使用-gradle-打包-docker-image.md","hash":"491ec98d17c43079c64171fab6f6339c48686b89","modified":1573563712000},{"_id":"source/_posts/你真的了解Java中的Thread運作嗎？-容易讓人誤解的synchronized-method.md","hash":"df1e1c931d42b806943c246280a6f1ed54ecfcd2","modified":1581285850000},{"_id":"source/_posts/使用-Gradle-自動初始化-Spock.md","hash":"95f65b5688d86e1a10624efdb371962ad24f46c9","modified":1528125494000},{"_id":"source/_posts/使用-WeakReference-解決-Android-發生-memory-leak-問題.md","hash":"f97832b75923f8d6af641659aada72de22914d39","modified":1579628513000},{"_id":"source/_posts/使用視覺化來解釋數學原理的youtube-3Blue1Brown.md","hash":"609e9ddbed0b3bc6cff906544223da8d908ef029","modified":1579626622000},{"_id":"source/_posts/對於-Java-Fork-Join-framework-的理解.md","hash":"a8f8a6eebe33c39aeb0739684e7c83c29fe28777","modified":1578409557000},{"_id":"source/_posts/從無到有DIY-chart-二.md","hash":"404a99e3567af1fb9073178de7dc6042f4e5e2b3","modified":1571717939000},{"_id":"source/_posts/對於-Java-ThreadPoolExecutor-的理解.md","hash":"a57de8c4ddd9cc0e3dcac2d273970f6735b127f1","modified":1578381837000},{"_id":"source/_posts/從無到有DIY-chart-一.md","hash":"250579b99f096f0a933baf118d4f40cd783b7cc5","modified":1579625097000},{"_id":"source/_posts/提升Socket傳送Large-file的速度.md","hash":"de0edd5f2e1e1ae8a7e8fcc6a24f0a0fa8e95d6b","modified":1579804938000},{"_id":"source/_posts/更換hexo-themes.md","hash":"8788e40c23d032ea853fa0db2cf5747f1804fe1c","modified":1571711418000},{"_id":"source/_posts/標準常態分佈的機率密度函數.md","hash":"11f21fe60f90b8bc130f3d093bc001c94e831420","modified":1579625181000},{"_id":"source/_posts/第一篇Blog，從SVN到Git.md","hash":"c5a5f0ec3cb97805517130edc8562f4edc5fb258","modified":1572789777000},{"_id":"source/_posts/比較好的nested-map寫法.md","hash":"920906ee8c3eb241ad5dec91f2f65c37fa8b5dbd","modified":1579625196000},{"_id":"source/_posts/簡易版shell-script作自動化處理.md","hash":"1a4cf552c9e40bd527ab2b48cb45f789f62ddd10","modified":1581217352000},{"_id":"source/_posts/用illustrator幫自己畫一個新頭像.md","hash":"7e84c3b846dfbca5bd67bdc1ae11a79fe65734c9","modified":1570722145000},{"_id":"source/_posts/關於-Java-CompletableFuture-的用法.md","hash":"8e7e130498f2122af67f4412838de0ba72921fa4","modified":1587560120000},{"_id":"source/resume/data.json","hash":"6ca90fb09d46e990e14f975da06d0bd871301422","modified":1580428730000},{"_id":"source/resume/link.svg","hash":"046b90f72c65e3a4bb5b3e5635ca38aef8525535","modified":1571368602000},{"_id":"source/resume/main.js","hash":"99a54eaba684cffc5c4716bfc3d643f45a364e4a","modified":1571987353000},{"_id":"source/resume/progress.css","hash":"b0d200754444e4230b65c40613599b2c8fd69439","modified":1571987251000},{"_id":"source/resume/index.html","hash":"43fa4d283fb9fdbc6dd4b1557ebe9254ca9b31aa","modified":1580430366000},{"_id":"source/_drafts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1580430062000},{"_id":"source/_drafts/以前設計的APP-Icon.md","hash":"80034ecafe8cf2eecaafa8f03644c0c8297ad182","modified":1579624968000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1570716247000},{"_id":"source/images/chart-diy-001.png","hash":"737647a3fbd83abf5339b6c525ca6e705970b1c3","modified":1522595338000},{"_id":"source/images/hadoop-recordreader-001.png","hash":"355fb08d1e4306a475725e65b5792ec399865535","modified":1573020088000},{"_id":"source/images/hadoop-writable-004.png","hash":"e604c4cfa6c46da58f1c8e5b4ce8d1b30840f274","modified":1572759611000},{"_id":"source/images/hadoop-writable-006.png","hash":"0929a352ea6548f78f7d4b4630b12d786b32142e","modified":1572786229000},{"_id":"source/images/hadoop-writable-005.png","hash":"fba1c4c748082a844e30778629345b3feb96fd50","modified":1572786216000},{"_id":"source/images/java-unit-test-mockito-powermock-1-002.png","hash":"2bc772fb5b7c38d47619dc6504d71e7b36650832","modified":1587791227000},{"_id":"source/images/java-unit-test-mockito-powermock-1-001.png","hash":"546c7f18e21cf5b6576cf1e8d68068b96b4bea99","modified":1587791648000},{"_id":"source/images/java-unit-test-mockito-powermock-2-002.png","hash":"fd62148822714c16e547a3bcc9610eb2c5cfe325","modified":1592132130000},{"_id":"source/images/java-unit-test-mockito-powermock-2-001.png","hash":"9be9721c5d97ae0aaa57a91f665aeb8fcf4e2be1","modified":1592131867000},{"_id":"source/images/thread-pool-executor-001.png","hash":"067b42fc310640267445296fce248373eac22fda","modified":1578229850000},{"_id":"source/images/thread-pool-executor-002.png","hash":"47535ef3b38cfb32dac97f59d265461df4d00d6c","modified":1578229862000},{"_id":"source/images/thread-pool-executor-003.png","hash":"24d4d0b6b5acdc44d9cde6ccaeef39eb77ad145c","modified":1578229877000},{"_id":"source/images/thread-pool-executor-004.png","hash":"51eed64efcf2bac35a42b44dfcaad74692d73fab","modified":1578229886000},{"_id":"source/images/thread-pool-executor-005.png","hash":"1994b290b01ae571de9968fb9a65e4a48b17f6a9","modified":1578229901000},{"_id":"source/images/thread-pool-executor-006.png","hash":"ecfa45309ce2379f1e6fcae91d70487202b6937b","modified":1578229914000},{"_id":"source/images/thread-pool-executor-007.png","hash":"a885de8c06cb65bd0b307f52b0662cee526d6b2c","modified":1578232733000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"1efc9d034adf6456e816fcbb20023807ca64bbd0","modified":1518767044000},{"_id":"source/images/thread-pool-executor-008.png","hash":"96ce34f383cab2d255f54883a59d32c39b249a8f","modified":1578232756000},{"_id":"source/images/thread-pool-executor-009.png","hash":"7baa23e90b44666a72a2b26a078411c29d5c9957","modified":1578229944000},{"_id":"source/images/thread-pool-executor-010.png","hash":"485f02586d921e58bd338aac5d9d5e2ddd71d6cb","modified":1578229956000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518766939000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1518766939000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518766925000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1518767044000},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1518766939000},{"_id":"themes/yilia/.git/index","hash":"6db65bb4d369595d1ad1979d130aeaaab6a857e5","modified":1518766939000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1518766939000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1518766939000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1518766939000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1518766939000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1518766939000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1518766939000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1518766939000},{"_id":"themes/yilia/layout/.DS_Store","hash":"22f5eef2275c7b08742d28cfe85ab44849c47d73","modified":1518880926000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1518766939000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1518766939000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1518766939000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1518766939000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1518766939000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1518766939000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1518766939000},{"_id":"themes/yilia/source/.DS_Store","hash":"545d503a1be0dfd5343bc707e0befd4ffb1ecc6d","modified":1531670181000},{"_id":"themes/yilia/source/googlef6c955fb09e49d48.html","hash":"20626ce3703e9ed561e62b08c9ab89968fde4361","modified":1518885657000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1518766939000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1518766939000},{"_id":"themes/yilia/source-src/.DS_Store","hash":"16fd14b5fed94e155d63b8f25ccd9cd6c40995c9","modified":1518885635000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1518766939000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1518766939000},{"_id":"source/images/app-icon-002.png","hash":"12bc4f5424f48161cfc3ecdd2ba8ec16921bfee5","modified":1570718186000},{"_id":"source/images/chart-diy-002.png","hash":"c284f3d1c4e9ec9ae3c3c020e2c5d17b3f4ccf74","modified":1522595440000},{"_id":"source/images/fork-join-001.png","hash":"881ccd7cb57bdad8b3312cf390754c8cd55daefb","modified":1578408860000},{"_id":"source/images/hadoop-writable-003.png","hash":"d87dbae6a1d9b54da8a79b58924dc7b83b1a5ade","modified":1572778376000},{"_id":"source/images/hadoop-writable-009.png","hash":"f59c57bf2f8aeb3d1f5ce6a0a323a72bf28dcc8d","modified":1572786825000},{"_id":"source/images/jcconf-2018-001.png","hash":"8c2e3c2522e01ffb5d4d67afa567822608cd0776","modified":1570714236000},{"_id":"source/images/jcconf-2018-002.png","hash":"f412fd26faa1e1c278af8f5d3e66a41ff8b986d0","modified":1570714236000},{"_id":"source/images/jcconf-2019-001.png","hash":"105b39b7a9eafde41c0aaeda6ab982a87a337a97","modified":1570714236000},{"_id":"source/images/jsdc-2019-002.png","hash":"e25aaf552b1e977fa3a8eae6b1c2b8a4fb2a1f47","modified":1572095761000},{"_id":"source/images/jsdc-2019-003.png","hash":"2c9898d79f2316b86d79e46ceff8560d94c5d910","modified":1572095760000},{"_id":"source/images/jsdc-2019-001.png","hash":"ef17ee2187ad8c77a54a2728ea76907136a7e3e1","modified":1572095760000},{"_id":"source/images/jsdc-2019-005.png","hash":"9a53c152d171c2cabe155e4c5ef54428826da640","modified":1572095760000},{"_id":"source/images/jsdc-2019-004.png","hash":"9ed6386bb6529b74e51d7b784b5a1a2f873b66c8","modified":1572095760000},{"_id":"source/images/reentrant-read-write-lock-001.png","hash":"f412b5ff89130151a41dbaf0321319dc853f837e","modified":1578124447000},{"_id":"source/images/spring-cloud-gradle-docker-001.png","hash":"3a05c4e4a0caacaa38e68c4f2b4f81c8268b878d","modified":1573473299000},{"_id":"source/images/spring-cloud-gradle-docker-002.png","hash":"ab83e66d739ae48019ff3c3d0ec388c1f48cef47","modified":1573475747000},{"_id":"source/images/st-005.png","hash":"2f94f87d403b1b99827ae523a6d42a76ed47b04e","modified":1521968961000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518766939000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1518766939000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1518766939000},{"_id":"source/images/app-icon-003.png","hash":"e65901b659b3ebe01354b3ffbe2fb4cd2377d271","modified":1570718580000},{"_id":"source/images/hadoop-writable-002.png","hash":"39c8a6603c83330668d33cbb8fdcff3724747c1c","modified":1572785777000},{"_id":"source/images/hadoop-writable-007.png","hash":"819ca45d28f33bf25971ca430a0d4bb35a6c1adf","modified":1572787313000},{"_id":"source/images/nio-byte-buffer-001.png","hash":"a9f251d99e042aafb394b9bdd9670dd00fa51f79","modified":1571812370000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1518766925000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1518766925000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"9443501ffded543b21afc6d6ff842840a109723f","modified":1518766939000},{"_id":"themes/yilia/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1518766925000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1518766939000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1518766939000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1518766939000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1518766939000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1518766939000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1518766939000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1518766939000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1518766939000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1518766939000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1518766939000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1518766939000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1518766939000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1518766939000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1518766939000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1518766939000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1518766939000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1518766939000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1518766939000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1518766939000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1518766939000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1518766939000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1518766939000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1518766939000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1518766939000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1518766939000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1518766939000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1518766939000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1518766939000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1518766939000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1518766939000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1518766939000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1518766939000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1518766939000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1518766939000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1518766939000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1518766939000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1518766939000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1518766939000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1518766939000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1518766939000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1518766939000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1518766939000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1518766939000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1518766939000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1518766939000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1518766939000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1518766939000},{"_id":"source/images/app-icon-001.png","hash":"6b7963067d7e7f08a14c79d24be8e557c8ba1aef","modified":1570718236000},{"_id":"source/images/hadoop-writable-001.png","hash":"488e7a4ca95dee85d05d173a16c67bdba33b78e9","modified":1572785498000},{"_id":"source/images/st-001.png","hash":"755199424b395d5ba10b161cec8a20993dc68b23","modified":1521967598000},{"_id":"source/images/st-004.png","hash":"f7ec8687ea8756ebed4957aee26da4bce5b2bc07","modified":1521969719000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1518766939000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1518766939000},{"_id":"source/assets/avatar.png","hash":"051012510a3057692395a06c508ab23225fa1c37","modified":1531671255000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1518766939000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1518766939000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1518766939000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1518766939000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1518766939000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1518766939000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1518766939000},{"_id":"source/images/hadoop-writable-008.png","hash":"1efde4f3b6669aacb8576ba69423c270c5f05836","modified":1572787807000},{"_id":"source/images/st-003.png","hash":"c12882f52d6537cce223b739a5e853db537d4cba","modified":1521967994000},{"_id":"themes/yilia/.git/objects/pack/pack-2a3671e37306f5316414a4c829b868393dcf07ac.idx","hash":"dd89b7a8a3bebd8e29106242daee9999d2edda44","modified":1518766939000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"9443501ffded543b21afc6d6ff842840a109723f","modified":1518766939000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518766939000},{"_id":"source/images/st-002.png","hash":"564d4bb161ad872375c4cfc69be31fbfeb5771d9","modified":1521967645000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"9443501ffded543b21afc6d6ff842840a109723f","modified":1518766939000},{"_id":"source/images/heng-002.png","hash":"bcb46780fd962bf9db9f32f6b034df22eada5f3a","modified":1531706586000},{"_id":"source/images/heng-001.png","hash":"96d3720a39040f9ee2fded302d070e16142bf8b7","modified":1531381930000},{"_id":"themes/yilia/.git/objects/pack/pack-2a3671e37306f5316414a4c829b868393dcf07ac.pack","hash":"d7ade42cc38a51c1544ae10903fe0a1526266320","modified":1518766939000},{"_id":"public/resume/data.json","hash":"549df1a8936975a20f3993d3493e0652a5a53473","modified":1606537221312},{"_id":"public/atom.xml","hash":"32c92c40f9dc60d006f96d1b0cb4ab46d240545d","modified":1606541413802},{"_id":"public/content.json","hash":"7204bce09bbc636f768d71f1ba886589e57bfe69","modified":1606541414151},{"_id":"public/resume/progress.css","hash":"b0d200754444e4230b65c40613599b2c8fd69439","modified":1606537221370},{"_id":"public/resume/main.js","hash":"99a54eaba684cffc5c4716bfc3d643f45a364e4a","modified":1606537221370},{"_id":"public/sitemap.xml","hash":"c60dc38168a759e6622f8aed0262f6c2f83542ec","modified":1606541414218},{"_id":"public/resume/index.html","hash":"eede53aa02326975ded8d8111f1de3df3f12de6b","modified":1606537221729},{"_id":"public/2020/08/29/Java-Unit-Test-使用-Mockito-Powermock-3/index.html","hash":"64d55a9db019b0d995e96410082a9f7637cd600c","modified":1606537222161},{"_id":"public/2020/06/14/Java-Unit-Test-使用-Mockito-Powermock-2/index.html","hash":"14ff61a0a03ea39894d7160dbe2d943dbf106e7b","modified":1606537222176},{"_id":"public/2020/04/19/關於-Java-CompletableFuture-的用法/index.html","hash":"997114c318d41d3b694d8352aed84f17a488ed69","modified":1606537222181},{"_id":"public/2020/04/25/Java-Unit-Test-使用-Mockito-Powermock-1/index.html","hash":"cda614d954bfa86fb7c7c93a268d32dc7dec5971","modified":1606537222181},{"_id":"public/2020/01/13/Java-NIO-ByteBuffer-基本操作圖/index.html","hash":"36bff203f53e41fd365ee24c970da5ec5c3c7fd2","modified":1606537222182},{"_id":"public/2020/01/06/Java-BlockingQueue-適合應用在哪些場景/index.html","hash":"860ceaa9c9f430b04ea2b33f1bb0d8a63aacc6bd","modified":1606537222182},{"_id":"public/2020/01/03/Java-volatile-的使用時機/index.html","hash":"a62d92ecb66ffccca6c1f57234a5557bbbfaec04","modified":1606537222182},{"_id":"public/2020/01/07/對於-Java-Fork-Join-framework-的理解/index.html","hash":"f427340ac0131594a687566303d21d3c7aff8120","modified":1606537222182},{"_id":"public/2020/01/05/對於-Java-ThreadPoolExecutor-的理解/index.html","hash":"807cd6e70e8852320bb822d5cfa7760500531859","modified":1606537222182},{"_id":"public/2020/01/04/Java-ReentrantLock-和-ReentrantReadWriteLock-的使用時機/index.html","hash":"b4dbfdb5effc6b1a2b152721433ca212baaa8ffb","modified":1606537222182},{"_id":"public/2019/11/03/Hadoop-Writable/index.html","hash":"185c8548226b1f90f36e5382af6f0516d802f537","modified":1606537222182},{"_id":"public/2019/11/06/Hadoop-RecordReader/index.html","hash":"a8844acc780f4339d297b50ab632346f9e6f5969","modified":1606537222182},{"_id":"public/2019/11/11/spring-cloud-使用-gradle-打包-docker-image/index.html","hash":"eff4c7d4a3b5137d10adfc9d03c1b46e40984eab","modified":1606537222183},{"_id":"public/2018/10/21/JCConf-2018/index.html","hash":"a275af2048b4e78bab623c259c9edae946d5d35d","modified":1606537222183},{"_id":"public/2019/10/04/JCConf-2019/index.html","hash":"030f744375f68956c42fad4d665ef610f0357f99","modified":1606537222183},{"_id":"public/2018/07/15/用illustrator幫自己畫一個新頭像/index.html","hash":"bef772624f143759778839bdaf39e7160237b70e","modified":1606537222183},{"_id":"public/2019/10/22/簡易版shell-script作自動化處理/index.html","hash":"c918360585dfd0941552731c39ef9f9489e4e555","modified":1606537222183},{"_id":"public/2018/06/24/使用視覺化來解釋數學原理的youtube-3Blue1Brown/index.html","hash":"8b0edd0723e077df569ec887f868f6cd74687f5e","modified":1606537222183},{"_id":"public/2019/10/26/JSDC-2019/index.html","hash":"34d3adb3351c6b8d19d9454cbc2a2273d0f59f44","modified":1606537222183},{"_id":"public/2018/04/29/你真的了解Java中的Thread運作嗎？-容易讓人誤解的synchronized-method/index.html","hash":"32ddf8ea4833ce864bf22f5d1dc5248e50f0f764","modified":1606537222183},{"_id":"public/2018/05/20/使用-Gradle-自動初始化-Spock/index.html","hash":"64e0a4092766768e9f62f5cc8f16bb46b739acf0","modified":1606537222183},{"_id":"public/2018/05/13/提升Socket傳送Large-file的速度/index.html","hash":"7a9b0cac031995ea34af5ed4641dc8a3eaddb87b","modified":1606537222183},{"_id":"public/2018/04/14/從無到有DIY-chart-二/index.html","hash":"3f673282e6dc781300b91c22397c2ca5dd509f41","modified":1606537222184},{"_id":"public/2018/04/01/從無到有DIY-chart-一/index.html","hash":"b316b42c7e15046119aa8673c74a38780e4bbe56","modified":1606537222184},{"_id":"public/2018/03/10/使用-WeakReference-解決-Android-發生-memory-leak-問題/index.html","hash":"a12912cdf0b9376867565d0c0a9b4f6bef02d161","modified":1606537222184},{"_id":"public/2018/03/03/比較好的nested-map寫法/index.html","hash":"51fb6fe19ac1d5aa47ab1f4a6a366a2133ca8603","modified":1606537222184},{"_id":"public/2018/03/17/Linux-如何避免重複執行特定jar/index.html","hash":"b51b1730889e7db74ab7d22ff13a10adb0e1e5a5","modified":1606537222184},{"_id":"public/2018/02/20/更換hexo-themes/index.html","hash":"1d103e49e470597e75bb9f722062df517962a991","modified":1606537222184},{"_id":"public/2018/03/24/標準常態分佈的機率密度函數/index.html","hash":"c2d704ce7390060d5aeace81932c324f3c42b4bd","modified":1606537222184},{"_id":"public/archives/index.html","hash":"6b2e8580a2d18185847fceaf4fd603147ea2c062","modified":1606541414225},{"_id":"public/archives/page/2/index.html","hash":"31ed1a01d683aaf3e2405d626d4c3a49ea89a1b6","modified":1606537222185},{"_id":"public/2018/02/16/第一篇Blog，從SVN到Git/index.html","hash":"5abb34146d41f6f7cff11d4368bac2955b160cec","modified":1606537222185},{"_id":"public/archives/page/3/index.html","hash":"bf6503ab5314711472d6610dcc470f141ce0bb3e","modified":1606537222185},{"_id":"public/archives/2018/index.html","hash":"7490f072f17f91ee479703eb5a7591297c29d6b1","modified":1606537222185},{"_id":"public/archives/2018/page/2/index.html","hash":"ec5976052a7ee8fc55a79c4b417f07b1b9f891e8","modified":1606537222185},{"_id":"public/archives/2018/02/index.html","hash":"f45b936f81f81f853590868ba0eee55aac72c5e7","modified":1606537222185},{"_id":"public/archives/2018/03/index.html","hash":"32b4f193f3e729e8fc2a429b48de07d921b08d3c","modified":1606537222185},{"_id":"public/archives/2018/04/index.html","hash":"d2d36bf730cc8ba825942d14d148e8c98681c94b","modified":1606537222185},{"_id":"public/archives/2018/06/index.html","hash":"1e63f0be769fc310ab9d5325a07ccb9e4033334b","modified":1606537222185},{"_id":"public/archives/2018/07/index.html","hash":"1c78370858f62a8037e9f031c79a76994d1211bc","modified":1606537222186},{"_id":"public/archives/2018/10/index.html","hash":"53c27d711139723d43b14bf8fa9cdfc793ea5009","modified":1606537222186},{"_id":"public/archives/2019/index.html","hash":"3564caece40684ec9ce77566d0be1fbb75e87bba","modified":1606537222186},{"_id":"public/archives/2018/05/index.html","hash":"b821aaa737565511afc7b65dd087514f5fa9a15a","modified":1606537222186},{"_id":"public/archives/2019/10/index.html","hash":"aae193303843c2847ac8dd35c774c3ad01bfd7ac","modified":1606537222186},{"_id":"public/archives/2019/11/index.html","hash":"bc147c6d22353344ad4ab787b5a7528949c9e77e","modified":1606537222186},{"_id":"public/archives/2020/index.html","hash":"21fb24ac4235a08bf4d0df18ed7e00d8a13c0980","modified":1606541414225},{"_id":"public/archives/2020/04/index.html","hash":"d7b611f6e03a820fb5647875b49460cea0b079dc","modified":1606537222186},{"_id":"public/archives/2020/01/index.html","hash":"a76707d0c7bb227b9b3ed2f751fa5bdc1232f5b1","modified":1606537222186},{"_id":"public/index.html","hash":"eff5085465fff29c861b5cf7935cacb9a0d0d757","modified":1606541414225},{"_id":"public/archives/2020/06/index.html","hash":"27fd42cdaf01a4b7f0d292b375506348dbf1bf89","modified":1606537222187},{"_id":"public/archives/2020/08/index.html","hash":"de6b8d95bf06ed3ace2a5a0216db653f2d9ef633","modified":1606537222187},{"_id":"public/page/2/index.html","hash":"00148aeaaf03c91e308ed14845e448d2cbc63edd","modified":1606537222187},{"_id":"public/page/3/index.html","hash":"eb26def3634e7168979408f7e5e371d2b34a49f5","modified":1606537222187},{"_id":"public/tags/hadoop/index.html","hash":"08909cc2d8ffd8fddb21a8fd794152f4e9dcd079","modified":1606537222187},{"_id":"public/tags/big-data/index.html","hash":"729b32891e4b029e2fdec6d06b08ac72553a9a70","modified":1606537222187},{"_id":"public/tags/conference/index.html","hash":"71a32da09c70f60e9a67f399f4c104ee235184d8","modified":1606541414225},{"_id":"public/tags/java/index.html","hash":"4df6648bfe75919cc20f317706e0616e2088f25e","modified":1606537222188},{"_id":"public/tags/thread/index.html","hash":"da754d0d84f8669cfaf0e759693a1e2652b94c6e","modified":1606537222188},{"_id":"public/tags/java/page/2/index.html","hash":"fb5b97c235c9bb0bdc84942faebef3355c366e75","modified":1606537222188},{"_id":"public/tags/nio/index.html","hash":"a0106c2f1ef7a7f008824878c32e88cc2bbc99ec","modified":1606537222188},{"_id":"public/tags/unit-test/index.html","hash":"5a01114ce97d07c420481ea404542cf7b9548fde","modified":1606537222188},{"_id":"public/tags/shell/index.html","hash":"7d5ee2b0de13feb0966628ccfae956ac54643783","modified":1606537222188},{"_id":"public/tags/gradle/index.html","hash":"7c80dfb9baffcf89e052fbb563a7563f24a0c505","modified":1606537222188},{"_id":"public/tags/spring-cloud/index.html","hash":"8e56824678d529c1762892173da0d17576c3e87e","modified":1606537222188},{"_id":"public/tags/docker/index.html","hash":"4b5973c7db1f69172ca15700b2e8c62e3ef2a571","modified":1606537222188},{"_id":"public/tags/android/index.html","hash":"0b05588f2428a1fa58a8853e068549a0fbc53427","modified":1606537222188},{"_id":"public/tags/memory-leak/index.html","hash":"5b4a1b2f2ed979d142792a0988dc9d4c5c6eb540","modified":1606537222188},{"_id":"public/tags/Blog/index.html","hash":"6730fbe9d94a0927588e6ed7bf3570abd07223d5","modified":1606537222188},{"_id":"public/tags/hexo/index.html","hash":"a4e950f0b1d4886a077a9797f593774ef162a358","modified":1606537222188},{"_id":"public/tags/clean-code/index.html","hash":"9c873e9b998d13de4eb7793ec054edeccda1f1ec","modified":1606537222189},{"_id":"public/tags/illustrator/index.html","hash":"910efd035d287cf12cf36f1119179918b2bc8215","modified":1606537222189},{"_id":"public/tags/statistics/index.html","hash":"c0fdfe77aff6d22e8b0ed3c522b2e123ffe09d1d","modified":1606537222189},{"_id":"public/tags/math/index.html","hash":"e2da79155620182e4ed6dd1f3cac12d03578a1d8","modified":1606537222189},{"_id":"public/tags/js/index.html","hash":"5e69f1b9b65ba34168ddf61ea1f66ab35453d957","modified":1606537222189},{"_id":"public/tags/probability/index.html","hash":"2d8ee8183859ca9858119622ef389a0e9b40bfd0","modified":1606537222189},{"_id":"public/2020/11/28/JCConf-2020/index.html","hash":"cd218e090a6bef5663d63aeb1454cdf05ca7100d","modified":1606541414225},{"_id":"public/archives/page/4/index.html","hash":"bc8fa7712b5bb8543d086ff5361a10ffc35c6cfd","modified":1606537222191},{"_id":"public/archives/2020/page/2/index.html","hash":"71d9c296e7826bdd0840d784cc4ea66f105e9f1b","modified":1606537222192},{"_id":"public/archives/2020/11/index.html","hash":"f50e8a22b349084e30d27bdfec5de408cf0ea5c1","modified":1606541414225},{"_id":"public/page/4/index.html","hash":"24534fdfd4e63a209ddb301b5ed9752a328d4d80","modified":1606537222192},{"_id":"source/images/jcconf-2020-001.png","hash":"dc67dd8d468761c15cd881a8c58e427409bada97","modified":1606541139000},{"_id":"public/images/jcconf-2020-001.png","hash":"dc67dd8d468761c15cd881a8c58e427409bada97","modified":1606541414231}],"Category":[],"Data":[],"Page":[{"_content":"{\n    \"contents\": [\n        {\n            \"title\": \"2019 Servtech - Senior Engineer\",\n            \"content\": [\n                \"I was responsible for Android tablet and smart watch APP that It can help the factory to record the production line workflow via QR code. And user can use google voice (RecognizerIntent) trigger button to next step. It responds quickly to real-time situations for managers monitor.\",\n                \"Responsible for output customized reports based on domain knowhow with big data computing like machine fault diagnosis statistics report, machine cutting tools history report, etc.\"\n            ]\n        },\n        {\n            \"title\": \"2018\",\n            \"content\": [\n                \"Responsible for back-end project by Spring Boot framework that I simplify the deployment process. it's a RESTful Server for front-end call API. It's easier to use than Spring MVC. And I reduce configuration complexity and improve deployment efficiency.<br/><strong> - Key skill: Spring Boot</strong>\",\n                \"I was responsible for SPC module, it calculate the results of CUSUM and EWMA, both were the most common tool for monitoring a quality characteristic of interest.\"\n            ]\n        },\n        {\n            \"title\": \"2017\",\n            \"content\": [\n                \"Responsible for factory work order scheduling module that automated multi-line work order scheduling by work order information. It use optimization algorithms ( reference OptaPlanner ). It is used instead of manual scheduling and assist decision-making and reduce time spent.\",\n                \"I was responsible for Android APP that It can display platform information on mobile phone. Additionally,  it send an exception alert message when factory machine trigger alert. It allows managers to keep abreast of situation anywhere then they leave the factory. And I resolved APP crashed problem when Android 5.0 update to Android 6.0.<br/><strong> - Key skill: Android</strong>\",\n                \"To assist middleware message platform project, it's used for exchange of information among different devices, e.g. Data transfer among platform, Android, iPhone. And I was improved performance of middleware message platform. Before that the mobile phone requesting two months of data needs to be executed for 90 seconds from platform. Eventually, it takes only 5 seconds to complete. It's using pre-processing data and proxy LRU cache.\"\n            ]\n        },\n        {\n            \"title\": \"2016\",\n            \"content\": [\n                \"Responsible for output customized reports based on domain knowhow with big data computing like machine alarm statistics report, CNC program (G-code) processed runtime history report, etc.\",\n                \"I resolved the problem that it's big data computing customer report was too large causing out of memory issue. I try my best to prevent the data from staying in memory for long term and the report was quickly append and then merged. I effectively control the memory usage to be stable.\"\n            ]\n        },\n        {\n            \"title\": \"2015\",\n            \"content\": [\n                \"Responsible for output customized reports based on domain knowhow with big data computing like machine utilization report, machine status history report, etc.\",\n                \"I resolved the problem that it's excessive amount of instant volume message data. It uses a data compression and encrypted technology. It makes a 1MB message that it was reduced to 27KB. It effectively reduces the consumption of bandwidth.<br/><strong> - Key skill: Protocol Buffers</strong>\",\n                \"I was responsible for big data rule engine module, it's similar to Excel calculation rules for calculation and pivot analysis of big data. It can generate diverse reports according to demand that it quickly with simple rules. It use expression and Trie tree process data.\"\n            ]\n        },\n        {\n            \"title\": \"2014\",\n            \"content\": [\n                \"I  was responsible for back-end project by Spring MVC framework that I focus on real-time monitor and RPC module, it's a RESTful Server for front-end call API. We switched to Spring MVC for security reasons. The project use gradle build and it use MockMVC test ( Unit test framework ).<br/><strong> - Key skills: Spring MVC, RabbitMQ, Gradle</strong>\",\n                \"I'm improved I/O read file and Master-slave RPC performance that it use NIO selected channel and byte buffer in data processing, it prevent I/O blocking problem.<br/><strong> - Key skill: NIO</strong>\",\n                \"We participate Intel Global Challenge take first place, I was responsible for demo platform and APP Icon.@[https://www.apec.org/Press/Features/2014/1912_Startups.aspx]@\"\n            ]\n        },\n        {\n            \"title\": \"2014 Institute for Information Industry (iii) - Platform application development engineer\",\n            \"content\": [\n                \"I was imported NoSQL on project when the accumulated amount of data was too large. Finally, I deploy cluster of Hbase relies on Zookeeper. It provide data aggregation for a large number of machines.<br/><strong> - Key skills: HBase, Zookeeper</strong>\",\n                \"I was improved the stability of the platform that it use Memory Analyzer(MAT) analyze file of memory dump. I found some object reference static object, it can't release by garbage collection. I use weak reference resolved the problem of occasional memory leaks.\"\n            ]\n        },\n        {\n            \"title\": \"2013\",\n            \"content\": [\n                \"Responsible for back-end project by Strust2 framework, and JPA with MySQL. It's a RESTful Server for front-end call API. And it use message queue for other services.<br/><strong> - Key skills: Struts2, ActiveMQ</strong>\",\n                \"I was improved platform performance that it change real-time data processed from database to memory and reduce front-end API request by using pre-processing data. Finally, at peak concurrent time, it can handle data volume of more than 100 machines. Before that it can handle data volume of 30 machines. ( It fetch CNC controller or PLC point data from factory machine )\"\n            ]\n        }\n    ]\n}\n","source":"resume/data.json","raw":"{\n    \"contents\": [\n        {\n            \"title\": \"2019 Servtech - Senior Engineer\",\n            \"content\": [\n                \"I was responsible for Android tablet and smart watch APP that It can help the factory to record the production line workflow via QR code. And user can use google voice (RecognizerIntent) trigger button to next step. It responds quickly to real-time situations for managers monitor.\",\n                \"Responsible for output customized reports based on domain knowhow with big data computing like machine fault diagnosis statistics report, machine cutting tools history report, etc.\"\n            ]\n        },\n        {\n            \"title\": \"2018\",\n            \"content\": [\n                \"Responsible for back-end project by Spring Boot framework that I simplify the deployment process. it's a RESTful Server for front-end call API. It's easier to use than Spring MVC. And I reduce configuration complexity and improve deployment efficiency.<br/><strong> - Key skill: Spring Boot</strong>\",\n                \"I was responsible for SPC module, it calculate the results of CUSUM and EWMA, both were the most common tool for monitoring a quality characteristic of interest.\"\n            ]\n        },\n        {\n            \"title\": \"2017\",\n            \"content\": [\n                \"Responsible for factory work order scheduling module that automated multi-line work order scheduling by work order information. It use optimization algorithms ( reference OptaPlanner ). It is used instead of manual scheduling and assist decision-making and reduce time spent.\",\n                \"I was responsible for Android APP that It can display platform information on mobile phone. Additionally,  it send an exception alert message when factory machine trigger alert. It allows managers to keep abreast of situation anywhere then they leave the factory. And I resolved APP crashed problem when Android 5.0 update to Android 6.0.<br/><strong> - Key skill: Android</strong>\",\n                \"To assist middleware message platform project, it's used for exchange of information among different devices, e.g. Data transfer among platform, Android, iPhone. And I was improved performance of middleware message platform. Before that the mobile phone requesting two months of data needs to be executed for 90 seconds from platform. Eventually, it takes only 5 seconds to complete. It's using pre-processing data and proxy LRU cache.\"\n            ]\n        },\n        {\n            \"title\": \"2016\",\n            \"content\": [\n                \"Responsible for output customized reports based on domain knowhow with big data computing like machine alarm statistics report, CNC program (G-code) processed runtime history report, etc.\",\n                \"I resolved the problem that it's big data computing customer report was too large causing out of memory issue. I try my best to prevent the data from staying in memory for long term and the report was quickly append and then merged. I effectively control the memory usage to be stable.\"\n            ]\n        },\n        {\n            \"title\": \"2015\",\n            \"content\": [\n                \"Responsible for output customized reports based on domain knowhow with big data computing like machine utilization report, machine status history report, etc.\",\n                \"I resolved the problem that it's excessive amount of instant volume message data. It uses a data compression and encrypted technology. It makes a 1MB message that it was reduced to 27KB. It effectively reduces the consumption of bandwidth.<br/><strong> - Key skill: Protocol Buffers</strong>\",\n                \"I was responsible for big data rule engine module, it's similar to Excel calculation rules for calculation and pivot analysis of big data. It can generate diverse reports according to demand that it quickly with simple rules. It use expression and Trie tree process data.\"\n            ]\n        },\n        {\n            \"title\": \"2014\",\n            \"content\": [\n                \"I  was responsible for back-end project by Spring MVC framework that I focus on real-time monitor and RPC module, it's a RESTful Server for front-end call API. We switched to Spring MVC for security reasons. The project use gradle build and it use MockMVC test ( Unit test framework ).<br/><strong> - Key skills: Spring MVC, RabbitMQ, Gradle</strong>\",\n                \"I'm improved I/O read file and Master-slave RPC performance that it use NIO selected channel and byte buffer in data processing, it prevent I/O blocking problem.<br/><strong> - Key skill: NIO</strong>\",\n                \"We participate Intel Global Challenge take first place, I was responsible for demo platform and APP Icon.@[https://www.apec.org/Press/Features/2014/1912_Startups.aspx]@\"\n            ]\n        },\n        {\n            \"title\": \"2014 Institute for Information Industry (iii) - Platform application development engineer\",\n            \"content\": [\n                \"I was imported NoSQL on project when the accumulated amount of data was too large. Finally, I deploy cluster of Hbase relies on Zookeeper. It provide data aggregation for a large number of machines.<br/><strong> - Key skills: HBase, Zookeeper</strong>\",\n                \"I was improved the stability of the platform that it use Memory Analyzer(MAT) analyze file of memory dump. I found some object reference static object, it can't release by garbage collection. I use weak reference resolved the problem of occasional memory leaks.\"\n            ]\n        },\n        {\n            \"title\": \"2013\",\n            \"content\": [\n                \"Responsible for back-end project by Strust2 framework, and JPA with MySQL. It's a RESTful Server for front-end call API. And it use message queue for other services.<br/><strong> - Key skills: Struts2, ActiveMQ</strong>\",\n                \"I was improved platform performance that it change real-time data processed from database to memory and reduce front-end API request by using pre-processing data. Finally, at peak concurrent time, it can handle data volume of more than 100 machines. Before that it can handle data volume of 30 machines. ( It fetch CNC controller or PLC point data from factory machine )\"\n            ]\n        }\n    ]\n}\n","date":"2020-01-30T23:58:50.000Z","updated":"2020-01-30T23:58:50.000Z","path":"resume/data.json","layout":"false","title":"","comments":1,"_id":"cki16mr4m00010rpjqndxb00a","content":"{\"contents\":[{\"title\":\"2019 Servtech - Senior Engineer\",\"content\":[\"I was responsible for Android tablet and smart watch APP that It can help the factory to record the production line workflow via QR code. And user can use google voice (RecognizerIntent) trigger button to next step. It responds quickly to real-time situations for managers monitor.\",\"Responsible for output customized reports based on domain knowhow with big data computing like machine fault diagnosis statistics report, machine cutting tools history report, etc.\"]},{\"title\":\"2018\",\"content\":[\"Responsible for back-end project by Spring Boot framework that I simplify the deployment process. it's a RESTful Server for front-end call API. It's easier to use than Spring MVC. And I reduce configuration complexity and improve deployment efficiency.<br><strong> - Key skill: Spring Boot</strong>\",\"I was responsible for SPC module, it calculate the results of CUSUM and EWMA, both were the most common tool for monitoring a quality characteristic of interest.\"]},{\"title\":\"2017\",\"content\":[\"Responsible for factory work order scheduling module that automated multi-line work order scheduling by work order information. It use optimization algorithms ( reference OptaPlanner ). It is used instead of manual scheduling and assist decision-making and reduce time spent.\",\"I was responsible for Android APP that It can display platform information on mobile phone. Additionally,  it send an exception alert message when factory machine trigger alert. It allows managers to keep abreast of situation anywhere then they leave the factory. And I resolved APP crashed problem when Android 5.0 update to Android 6.0.<br><strong> - Key skill: Android</strong>\",\"To assist middleware message platform project, it's used for exchange of information among different devices, e.g. Data transfer among platform, Android, iPhone. And I was improved performance of middleware message platform. Before that the mobile phone requesting two months of data needs to be executed for 90 seconds from platform. Eventually, it takes only 5 seconds to complete. It's using pre-processing data and proxy LRU cache.\"]},{\"title\":\"2016\",\"content\":[\"Responsible for output customized reports based on domain knowhow with big data computing like machine alarm statistics report, CNC program (G-code) processed runtime history report, etc.\",\"I resolved the problem that it's big data computing customer report was too large causing out of memory issue. I try my best to prevent the data from staying in memory for long term and the report was quickly append and then merged. I effectively control the memory usage to be stable.\"]},{\"title\":\"2015\",\"content\":[\"Responsible for output customized reports based on domain knowhow with big data computing like machine utilization report, machine status history report, etc.\",\"I resolved the problem that it's excessive amount of instant volume message data. It uses a data compression and encrypted technology. It makes a 1MB message that it was reduced to 27KB. It effectively reduces the consumption of bandwidth.<br><strong> - Key skill: Protocol Buffers</strong>\",\"I was responsible for big data rule engine module, it's similar to Excel calculation rules for calculation and pivot analysis of big data. It can generate diverse reports according to demand that it quickly with simple rules. It use expression and Trie tree process data.\"]},{\"title\":\"2014\",\"content\":[\"I  was responsible for back-end project by Spring MVC framework that I focus on real-time monitor and RPC module, it's a RESTful Server for front-end call API. We switched to Spring MVC for security reasons. The project use gradle build and it use MockMVC test ( Unit test framework ).<br><strong> - Key skills: Spring MVC, RabbitMQ, Gradle</strong>\",\"I'm improved I/O read file and Master-slave RPC performance that it use NIO selected channel and byte buffer in data processing, it prevent I/O blocking problem.<br><strong> - Key skill: NIO</strong>\",\"We participate Intel Global Challenge take first place, I was responsible for demo platform and APP Icon.@[https://www.apec.org/Press/Features/2014/1912_Startups.aspx]@\"]},{\"title\":\"2014 Institute for Information Industry (iii) - Platform application development engineer\",\"content\":[\"I was imported NoSQL on project when the accumulated amount of data was too large. Finally, I deploy cluster of Hbase relies on Zookeeper. It provide data aggregation for a large number of machines.<br><strong> - Key skills: HBase, Zookeeper</strong>\",\"I was improved the stability of the platform that it use Memory Analyzer(MAT) analyze file of memory dump. I found some object reference static object, it can't release by garbage collection. I use weak reference resolved the problem of occasional memory leaks.\"]},{\"title\":\"2013\",\"content\":[\"Responsible for back-end project by Strust2 framework, and JPA with MySQL. It's a RESTful Server for front-end call API. And it use message queue for other services.<br><strong> - Key skills: Struts2, ActiveMQ</strong>\",\"I was improved platform performance that it change real-time data processed from database to memory and reduce front-end API request by using pre-processing data. Finally, at peak concurrent time, it can handle data volume of more than 100 machines. Before that it can handle data volume of 30 machines. ( It fetch CNC controller or PLC point data from factory machine )\"]}]}","site":{"data":{}},"excerpt":"","more":"{\"contents\":[{\"title\":\"2019 Servtech - Senior Engineer\",\"content\":[\"I was responsible for Android tablet and smart watch APP that It can help the factory to record the production line workflow via QR code. And user can use google voice (RecognizerIntent) trigger button to next step. It responds quickly to real-time situations for managers monitor.\",\"Responsible for output customized reports based on domain knowhow with big data computing like machine fault diagnosis statistics report, machine cutting tools history report, etc.\"]},{\"title\":\"2018\",\"content\":[\"Responsible for back-end project by Spring Boot framework that I simplify the deployment process. it's a RESTful Server for front-end call API. It's easier to use than Spring MVC. And I reduce configuration complexity and improve deployment efficiency.<br><strong> - Key skill: Spring Boot</strong>\",\"I was responsible for SPC module, it calculate the results of CUSUM and EWMA, both were the most common tool for monitoring a quality characteristic of interest.\"]},{\"title\":\"2017\",\"content\":[\"Responsible for factory work order scheduling module that automated multi-line work order scheduling by work order information. It use optimization algorithms ( reference OptaPlanner ). It is used instead of manual scheduling and assist decision-making and reduce time spent.\",\"I was responsible for Android APP that It can display platform information on mobile phone. Additionally,  it send an exception alert message when factory machine trigger alert. It allows managers to keep abreast of situation anywhere then they leave the factory. And I resolved APP crashed problem when Android 5.0 update to Android 6.0.<br><strong> - Key skill: Android</strong>\",\"To assist middleware message platform project, it's used for exchange of information among different devices, e.g. Data transfer among platform, Android, iPhone. And I was improved performance of middleware message platform. Before that the mobile phone requesting two months of data needs to be executed for 90 seconds from platform. Eventually, it takes only 5 seconds to complete. It's using pre-processing data and proxy LRU cache.\"]},{\"title\":\"2016\",\"content\":[\"Responsible for output customized reports based on domain knowhow with big data computing like machine alarm statistics report, CNC program (G-code) processed runtime history report, etc.\",\"I resolved the problem that it's big data computing customer report was too large causing out of memory issue. I try my best to prevent the data from staying in memory for long term and the report was quickly append and then merged. I effectively control the memory usage to be stable.\"]},{\"title\":\"2015\",\"content\":[\"Responsible for output customized reports based on domain knowhow with big data computing like machine utilization report, machine status history report, etc.\",\"I resolved the problem that it's excessive amount of instant volume message data. It uses a data compression and encrypted technology. It makes a 1MB message that it was reduced to 27KB. It effectively reduces the consumption of bandwidth.<br><strong> - Key skill: Protocol Buffers</strong>\",\"I was responsible for big data rule engine module, it's similar to Excel calculation rules for calculation and pivot analysis of big data. It can generate diverse reports according to demand that it quickly with simple rules. It use expression and Trie tree process data.\"]},{\"title\":\"2014\",\"content\":[\"I  was responsible for back-end project by Spring MVC framework that I focus on real-time monitor and RPC module, it's a RESTful Server for front-end call API. We switched to Spring MVC for security reasons. The project use gradle build and it use MockMVC test ( Unit test framework ).<br><strong> - Key skills: Spring MVC, RabbitMQ, Gradle</strong>\",\"I'm improved I/O read file and Master-slave RPC performance that it use NIO selected channel and byte buffer in data processing, it prevent I/O blocking problem.<br><strong> - Key skill: NIO</strong>\",\"We participate Intel Global Challenge take first place, I was responsible for demo platform and APP Icon.@[https://www.apec.org/Press/Features/2014/1912_Startups.aspx]@\"]},{\"title\":\"2014 Institute for Information Industry (iii) - Platform application development engineer\",\"content\":[\"I was imported NoSQL on project when the accumulated amount of data was too large. Finally, I deploy cluster of Hbase relies on Zookeeper. It provide data aggregation for a large number of machines.<br><strong> - Key skills: HBase, Zookeeper</strong>\",\"I was improved the stability of the platform that it use Memory Analyzer(MAT) analyze file of memory dump. I found some object reference static object, it can't release by garbage collection. I use weak reference resolved the problem of occasional memory leaks.\"]},{\"title\":\"2013\",\"content\":[\"Responsible for back-end project by Strust2 framework, and JPA with MySQL. It's a RESTful Server for front-end call API. And it use message queue for other services.<br><strong> - Key skills: Struts2, ActiveMQ</strong>\",\"I was improved platform performance that it change real-time data processed from database to memory and reduce front-end API request by using pre-processing data. Finally, at peak concurrent time, it can handle data volume of more than 100 machines. Before that it can handle data volume of 30 machines. ( It fetch CNC controller or PLC point data from factory machine )\"]}]}"},{"_content":"(function(){\n    class Progress {\n        constructor(data){\n            this.contents = data.contents\n        }\n\n        buildHtml () {\n            const contentLen = this.contents.length\n            let progressActive = `<div class=\"progress active\"></div>`\n            return this.contents.map((item, index) => {\n                const detail = item.content.map((content) =>{\n                    const linkStartIndex = content.indexOf('@[')\n                    const linkEndIndex = content.indexOf(']@')\n                    if(linkStartIndex > -1 && linkEndIndex > -1){\n                        const link = content.substring(linkStartIndex + 2, linkEndIndex)\n                        const newContent = content.substring(0, linkStartIndex);\n                        return `<li>${newContent}<a href=\"${link}\" target=\"_blank\"><img src=\"link.svg\" alt=\"link\" title=\"link\" class=\"icon-svg\"></a></li>`\n                    }else{\n                        return `<li>${content}</li>`\n                    }\n                }).join('')\n                if(contentLen === (index + 1)){\n                    progressActive = ``\n                }\n                return `\n                <div class=\"progress-bar\">\n                    <div class=\"ball active\"></div>\n                    <div class=\"detail\">\n                        <div class=\"flow-detail title\">${item.title}</div>\n                        <ul class=\"flow-detail\">${detail}</ul>\n                    </div>\n                    ${progressActive}\n                </div>\n                `\n            }).join('')\n        }\n    }\n    fetch('data.json', {headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}}).then((res) => {\n        return res.json()\n    }).then((data) => {\n        const content = new Progress(data).buildHtml()\n        document.getElementById('content').innerHTML = content\n    })\n    \n})()","source":"resume/main.js","raw":"(function(){\n    class Progress {\n        constructor(data){\n            this.contents = data.contents\n        }\n\n        buildHtml () {\n            const contentLen = this.contents.length\n            let progressActive = `<div class=\"progress active\"></div>`\n            return this.contents.map((item, index) => {\n                const detail = item.content.map((content) =>{\n                    const linkStartIndex = content.indexOf('@[')\n                    const linkEndIndex = content.indexOf(']@')\n                    if(linkStartIndex > -1 && linkEndIndex > -1){\n                        const link = content.substring(linkStartIndex + 2, linkEndIndex)\n                        const newContent = content.substring(0, linkStartIndex);\n                        return `<li>${newContent}<a href=\"${link}\" target=\"_blank\"><img src=\"link.svg\" alt=\"link\" title=\"link\" class=\"icon-svg\"></a></li>`\n                    }else{\n                        return `<li>${content}</li>`\n                    }\n                }).join('')\n                if(contentLen === (index + 1)){\n                    progressActive = ``\n                }\n                return `\n                <div class=\"progress-bar\">\n                    <div class=\"ball active\"></div>\n                    <div class=\"detail\">\n                        <div class=\"flow-detail title\">${item.title}</div>\n                        <ul class=\"flow-detail\">${detail}</ul>\n                    </div>\n                    ${progressActive}\n                </div>\n                `\n            }).join('')\n        }\n    }\n    fetch('data.json', {headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}}).then((res) => {\n        return res.json()\n    }).then((data) => {\n        const content = new Progress(data).buildHtml()\n        document.getElementById('content').innerHTML = content\n    })\n    \n})()","date":"2019-10-25T07:09:13.000Z","updated":"2019-10-25T07:09:13.000Z","path":"resume/main.js","layout":"false","title":"","comments":1,"_id":"cki16mr4o00030rpjv7tn36qj","content":"(function(){\n    class Progress {\n        constructor(data){\n            this.contents = data.contents\n        }\n\n        buildHtml () {\n            const contentLen = this.contents.length\n            let progressActive = `<div class=\"progress active\"></div>`\n            return this.contents.map((item, index) => {\n                const detail = item.content.map((content) =>{\n                    const linkStartIndex = content.indexOf('@[')\n                    const linkEndIndex = content.indexOf(']@')\n                    if(linkStartIndex > -1 && linkEndIndex > -1){\n                        const link = content.substring(linkStartIndex + 2, linkEndIndex)\n                        const newContent = content.substring(0, linkStartIndex);\n                        return `<li>${newContent}<a href=\"${link}\" target=\"_blank\"><img src=\"link.svg\" alt=\"link\" title=\"link\" class=\"icon-svg\"></a></li>`\n                    }else{\n                        return `<li>${content}</li>`\n                    }\n                }).join('')\n                if(contentLen === (index + 1)){\n                    progressActive = ``\n                }\n                return `\n                <div class=\"progress-bar\">\n                    <div class=\"ball active\"></div>\n                    <div class=\"detail\">\n                        <div class=\"flow-detail title\">${item.title}</div>\n                        <ul class=\"flow-detail\">${detail}</ul>\n                    </div>\n                    ${progressActive}\n                </div>\n                `\n            }).join('')\n        }\n    }\n    fetch('data.json', {headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}}).then((res) => {\n        return res.json()\n    }).then((data) => {\n        const content = new Progress(data).buildHtml()\n        document.getElementById('content').innerHTML = content\n    })\n    \n})()","site":{"data":{}},"excerpt":"","more":"(function(){\n    class Progress {\n        constructor(data){\n            this.contents = data.contents\n        }\n\n        buildHtml () {\n            const contentLen = this.contents.length\n            let progressActive = `<div class=\"progress active\"></div>`\n            return this.contents.map((item, index) => {\n                const detail = item.content.map((content) =>{\n                    const linkStartIndex = content.indexOf('@[')\n                    const linkEndIndex = content.indexOf(']@')\n                    if(linkStartIndex > -1 && linkEndIndex > -1){\n                        const link = content.substring(linkStartIndex + 2, linkEndIndex)\n                        const newContent = content.substring(0, linkStartIndex);\n                        return `<li>${newContent}<a href=\"${link}\" target=\"_blank\"><img src=\"link.svg\" alt=\"link\" title=\"link\" class=\"icon-svg\"></a></li>`\n                    }else{\n                        return `<li>${content}</li>`\n                    }\n                }).join('')\n                if(contentLen === (index + 1)){\n                    progressActive = ``\n                }\n                return `\n                <div class=\"progress-bar\">\n                    <div class=\"ball active\"></div>\n                    <div class=\"detail\">\n                        <div class=\"flow-detail title\">${item.title}</div>\n                        <ul class=\"flow-detail\">${detail}</ul>\n                    </div>\n                    ${progressActive}\n                </div>\n                `\n            }).join('')\n        }\n    }\n    fetch('data.json', {headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}}).then((res) => {\n        return res.json()\n    }).then((data) => {\n        const content = new Progress(data).buildHtml()\n        document.getElementById('content').innerHTML = content\n    })\n    \n})()"},{"_content":"body {\n    margin: 30px;\n    padding: 10px;\n    font-size: 1rem;\n}\n\na {\n    text-decoration: none;\n}\n\nstrong {\n    font-size: 1rem;\n    position: relative;\n    margin-left: 20px;\n}\n\n.title {\n    font-size: 1.5rem;\n}\n\n.progress-bar {\n    width: 100%;\n    height: 100px;\n    display: table;\n}\n\n.ball {\n    width: 20px;\n    height: 20px;\n    border-radius: 10px;\n    margin-left: 20px;\n}\n\n.progress {\n    width: 3px;\n    height: 100%;\n    margin-left: 28px;\n}\n\n.detail {\n    margin-left: 40px;\n    float:left;\n    position: relative;\n    top: -30px;\n    left: 5px;\n}\n\n.flow-detail {\n    margin: 2px;\n}\n\n.active {\n    background-color: #A8A8A8\n}\n\n.icon-svg {\n    width: 20px;\n    height: 20px;\n}","source":"resume/progress.css","raw":"body {\n    margin: 30px;\n    padding: 10px;\n    font-size: 1rem;\n}\n\na {\n    text-decoration: none;\n}\n\nstrong {\n    font-size: 1rem;\n    position: relative;\n    margin-left: 20px;\n}\n\n.title {\n    font-size: 1.5rem;\n}\n\n.progress-bar {\n    width: 100%;\n    height: 100px;\n    display: table;\n}\n\n.ball {\n    width: 20px;\n    height: 20px;\n    border-radius: 10px;\n    margin-left: 20px;\n}\n\n.progress {\n    width: 3px;\n    height: 100%;\n    margin-left: 28px;\n}\n\n.detail {\n    margin-left: 40px;\n    float:left;\n    position: relative;\n    top: -30px;\n    left: 5px;\n}\n\n.flow-detail {\n    margin: 2px;\n}\n\n.active {\n    background-color: #A8A8A8\n}\n\n.icon-svg {\n    width: 20px;\n    height: 20px;\n}","date":"2019-10-25T07:07:31.000Z","updated":"2019-10-25T07:07:31.000Z","path":"resume/progress.css","layout":"false","title":"","comments":1,"_id":"cki16mr4r00050rpjbyhvgpv5","content":"body {\n    margin: 30px;\n    padding: 10px;\n    font-size: 1rem;\n}\n\na {\n    text-decoration: none;\n}\n\nstrong {\n    font-size: 1rem;\n    position: relative;\n    margin-left: 20px;\n}\n\n.title {\n    font-size: 1.5rem;\n}\n\n.progress-bar {\n    width: 100%;\n    height: 100px;\n    display: table;\n}\n\n.ball {\n    width: 20px;\n    height: 20px;\n    border-radius: 10px;\n    margin-left: 20px;\n}\n\n.progress {\n    width: 3px;\n    height: 100%;\n    margin-left: 28px;\n}\n\n.detail {\n    margin-left: 40px;\n    float:left;\n    position: relative;\n    top: -30px;\n    left: 5px;\n}\n\n.flow-detail {\n    margin: 2px;\n}\n\n.active {\n    background-color: #A8A8A8\n}\n\n.icon-svg {\n    width: 20px;\n    height: 20px;\n}","site":{"data":{}},"excerpt":"","more":"body {\n    margin: 30px;\n    padding: 10px;\n    font-size: 1rem;\n}\n\na {\n    text-decoration: none;\n}\n\nstrong {\n    font-size: 1rem;\n    position: relative;\n    margin-left: 20px;\n}\n\n.title {\n    font-size: 1.5rem;\n}\n\n.progress-bar {\n    width: 100%;\n    height: 100px;\n    display: table;\n}\n\n.ball {\n    width: 20px;\n    height: 20px;\n    border-radius: 10px;\n    margin-left: 20px;\n}\n\n.progress {\n    width: 3px;\n    height: 100%;\n    margin-left: 28px;\n}\n\n.detail {\n    margin-left: 40px;\n    float:left;\n    position: relative;\n    top: -30px;\n    left: 5px;\n}\n\n.flow-detail {\n    margin: 2px;\n}\n\n.active {\n    background-color: #A8A8A8\n}\n\n.icon-svg {\n    width: 20px;\n    height: 20px;\n}"},{"_content":"<html>\n    \n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n        <link rel=\"stylesheet\" href=\"progress.css\"/>\n        <script language=\"javascript\" type=\"module\" src=\"main.js\"></script>\n        <title>\n        </title>\n    </head>\n    \n    <body>\n        <h1>\n            <a href=\"https://www.cakeresume.com/s--4Bb__GJvxBLLmXRNg-TlCQ--/enjoymycodinglife\" target=\"_blank\">\n                CakeResume\n                <img src=\"link.svg\" alt=\"CakeResume\" title=\"CakeResume\" class=\"icon-svg\">\n            </a>\n        </h1>\n    \t<h1>Java ( Special Event: key skill marks the time when I first used the technology )</h1>\n        <div id=\"content\"></div>\n    </body>\n</html>","source":"resume/index.html","raw":"<html>\n    \n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n        <link rel=\"stylesheet\" href=\"progress.css\"/>\n        <script language=\"javascript\" type=\"module\" src=\"main.js\"></script>\n        <title>\n        </title>\n    </head>\n    \n    <body>\n        <h1>\n            <a href=\"https://www.cakeresume.com/s--4Bb__GJvxBLLmXRNg-TlCQ--/enjoymycodinglife\" target=\"_blank\">\n                CakeResume\n                <img src=\"link.svg\" alt=\"CakeResume\" title=\"CakeResume\" class=\"icon-svg\">\n            </a>\n        </h1>\n    \t<h1>Java ( Special Event: key skill marks the time when I first used the technology )</h1>\n        <div id=\"content\"></div>\n    </body>\n</html>","date":"2020-01-31T00:26:06.000Z","updated":"2020-01-31T00:26:06.000Z","path":"resume/index.html","title":"","comments":1,"layout":"page","_id":"cki16mr4u00070rpjtfssnhid","content":"<html>\n    \n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <link rel=\"stylesheet\" href=\"progress.css\">\n        <script language=\"javascript\" type=\"module\" src=\"main.js\"></script>\n        <title>\n        </title>\n    </head>\n    \n    <body>\n        <h1>\n            <a href=\"https://www.cakeresume.com/s--4Bb__GJvxBLLmXRNg-TlCQ--/enjoymycodinglife\" target=\"_blank\">\n                CakeResume\n                <img src=\"link.svg\" alt=\"CakeResume\" title=\"CakeResume\" class=\"icon-svg\">\n            </a>\n        </h1>\n    \t<h1>Java ( Special Event: key skill marks the time when I first used the technology )</h1>\n        <div id=\"content\"></div>\n    </body>\n</html>","site":{"data":{}},"excerpt":"","more":"<html>\n    \n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <link rel=\"stylesheet\" href=\"progress.css\">\n        <script language=\"javascript\" type=\"module\" src=\"main.js\"></script>\n        <title>\n        </title>\n    </head>\n    \n    <body>\n        <h1>\n            <a href=\"https://www.cakeresume.com/s--4Bb__GJvxBLLmXRNg-TlCQ--/enjoymycodinglife\" target=\"_blank\">\n                CakeResume\n                <img src=\"link.svg\" alt=\"CakeResume\" title=\"CakeResume\" class=\"icon-svg\">\n            </a>\n        </h1>\n    \t<h1>Java ( Special Event: key skill marks the time when I first used the technology )</h1>\n        <div id=\"content\"></div>\n    </body>\n</html>"}],"Post":[{"title":"JCConf 2020","date":"2020-11-28T04:15:49.000Z","_content":"\n上星期也去參加 JCConf ，本以為今年會停辦，沒想到會正常舉行，現場也滿多人的\n受疫情影響今年國外講師都是透過視訊連線，主題跟去年差不多都是環繞 Microservices\n對我來說今年的亮點應該是上午場的 RSocket\n現場有示範 RSocket 在 Spring 上的應用\n回家後查了 RSocket 發現不是只有 Java 版本，還有 JS, Go 和 C++ 的版本\n\n它可以有四種交互方式:\n  - request / response (stream of 1) 與傳統的 http 一樣一去一回\n  - request / stream (finite stream of many) 神奇，回傳一個 stream 給你操作\n  - fire-and-forget (no response) 單向，不需要回應\n  - channel (bi-directional streams) 雙向 streams 與 websocket 一樣一直來來回回\n\n值得花點時間研究一下\n\n今年的識別證\n<img src=\"/images/jcconf-2020-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n","source":"_posts/JCConf-2020.md","raw":"---\ntitle: JCConf 2020\ndate: 2020-11-28 12:15:49\ntags:\n- conference\n---\n\n上星期也去參加 JCConf ，本以為今年會停辦，沒想到會正常舉行，現場也滿多人的\n受疫情影響今年國外講師都是透過視訊連線，主題跟去年差不多都是環繞 Microservices\n對我來說今年的亮點應該是上午場的 RSocket\n現場有示範 RSocket 在 Spring 上的應用\n回家後查了 RSocket 發現不是只有 Java 版本，還有 JS, Go 和 C++ 的版本\n\n它可以有四種交互方式:\n  - request / response (stream of 1) 與傳統的 http 一樣一去一回\n  - request / stream (finite stream of many) 神奇，回傳一個 stream 給你操作\n  - fire-and-forget (no response) 單向，不需要回應\n  - channel (bi-directional streams) 雙向 streams 與 websocket 一樣一直來來回回\n\n值得花點時間研究一下\n\n今年的識別證\n<img src=\"/images/jcconf-2020-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n","slug":"JCConf-2020","published":1,"updated":"2020-11-28T05:27:54.000Z","_id":"cki16mr4n00020rpjark14an6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上星期也去參加 JCConf ，本以為今年會停辦，沒想到會正常舉行，現場也滿多人的<br>受疫情影響今年國外講師都是透過視訊連線，主題跟去年差不多都是環繞 Microservices<br>對我來說今年的亮點應該是上午場的 RSocket<br>現場有示範 RSocket 在 Spring 上的應用<br>回家後查了 RSocket 發現不是只有 Java 版本，還有 JS, Go 和 C++ 的版本</p>\n<p>它可以有四種交互方式:</p>\n<ul>\n<li>request / response (stream of 1) 與傳統的 http 一樣一去一回</li>\n<li>request / stream (finite stream of many) 神奇，回傳一個 stream 給你操作</li>\n<li>fire-and-forget (no response) 單向，不需要回應</li>\n<li>channel (bi-directional streams) 雙向 streams 與 websocket 一樣一直來來回回</li>\n</ul>\n<p>值得花點時間研究一下</p>\n<p>今年的識別證<br><img src=\"/images/jcconf-2020-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上星期也去參加 JCConf ，本以為今年會停辦，沒想到會正常舉行，現場也滿多人的<br>受疫情影響今年國外講師都是透過視訊連線，主題跟去年差不多都是環繞 Microservices<br>對我來說今年的亮點應該是上午場的 RSocket<br>現場有示範 RSocket 在 Spring 上的應用<br>回家後查了 RSocket 發現不是只有 Java 版本，還有 JS, Go 和 C++ 的版本</p>\n<p>它可以有四種交互方式:</p>\n<ul>\n<li>request / response (stream of 1) 與傳統的 http 一樣一去一回</li>\n<li>request / stream (finite stream of many) 神奇，回傳一個 stream 給你操作</li>\n<li>fire-and-forget (no response) 單向，不需要回應</li>\n<li>channel (bi-directional streams) 雙向 streams 與 websocket 一樣一直來來回回</li>\n</ul>\n<p>值得花點時間研究一下</p>\n<p>今年的識別證<br><img src=\"/images/jcconf-2020-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n"},{"title":"Hadoop RecordReader","date":"2019-11-06T05:03:25.000Z","_content":"\n很多時候我們會自定義一些讀取資料的格式，而hadoop默認的RecordReader是LineRecordReader\n會一行一行的讀取資料，key為偏移量，value為整行內容\n\n現在嘗試客製化一個新的RecordReader，在此使用LineRecrodReader為基礎\n並使用上一篇BuyPhoneJob的運算結果封裝成BuyPhoneBean，實現RecordReader後，可自定義資料格式傳給map\n\n第一步建立BuyPhoneBean，一樣implements Writable，做序列化和反序列化\ncustomerIds雖然為多個值組成，但在這裡當整個字串處理\n\n| procuctName   | productPrice | customerIds         |\n| ------------- | ------------ | ------------------- |\n| iPhone 8 Plus | 449.97       | 001,026,022,015,007 |\n| iPhone 7      | 207.0        | 004,029,024,018,010 |\n| ...           | ...          | ...                 |\n\n```java \npublic class BuyPhoneBean implements Writable {\n    private String productName;\n    private double productPrice;\n    private String customerIds;\n\n    public BuyPhoneBean(){\n        super();\n    }\n\n    @Override\n    public void write(DataOutput out) throws IOException {\n        out.writeUTF(this.productName);\n        out.writeDouble(this.productPrice);\n        out.writeUTF(this.customerIds);\n    }\n\n    @Override\n    public void readFields(DataInput in) throws IOException {\n        this.productName = in.readUTF();\n        this.productPrice = in.readDouble();\n        this.customerIds = in.readUTF();\n    }\n    \n    ...\n\n}\n\n```\n- - -\n第二步自定義RecordReader，讀取依舊是使用LineRecordReader，只是將結果改為key是productName，而value是BuyPhoneBean\n在繼承RecordReader後需要Override一些methods，運作方式會在之後做說明\n這裡需要注意的是LineRecordReader使用完後在close method上進行關閉\n\n```java \npublic class BuyPhoneRecordReader extends RecordReader<Text, BuyPhoneBean> {\n    private static Logger logger = LoggerFactory.getLogger(BuyPhoneRecordReader.class);\n\n    private LineRecordReader lineRecordReader;\n\n    private Text key = new Text();\n    private BuyPhoneBean value = new BuyPhoneBean();\n\n    private Text lineValue;\n\n    @Override\n    public void initialize(InputSplit split, TaskAttemptContext context) throws IOException {\n        this.lineRecordReader = new LineRecordReader();\n        this.lineRecordReader.initialize(split, context);\n    }\n\n    @Override\n    public boolean nextKeyValue() throws IOException, InterruptedException {\n        if(lineRecordReader.nextKeyValue()){\n            lineValue = lineRecordReader.getCurrentValue();\n            byte[] line = lineValue.getBytes();\n            int lineLen = lineValue.getLength();\n            String data = new String(line, 0, lineLen);\n            setKeyValue(this.key, this.value, data.split(REGEX_COLS_SPLIT_SYMBOL));\n        }else{\n            return false;\n        }\n        return true;\n    }\n\n    private void setKeyValue(Text key, BuyPhoneBean value, String[] cols){\n        if(cols.length < 3){\n            logger.warn(\"this cols[] length < 3\");\n            return;\n        }\n        String productName = cols[0];\n        double productPrice = Double.parseDouble(cols[1]);\n        String customerIds = cols[2];\n\n        key.set(new Text(productName));\n\n        value.setProductName(productName);\n        value.setProductPrice(productPrice);\n        value.setCustomerIds(customerIds);\n    }\n\n    @Override\n    public Text getCurrentKey() throws IOException, InterruptedException {\n        return this.key;\n    }\n\n    @Override\n    public BuyPhoneBean getCurrentValue() throws IOException, InterruptedException {\n        return this.value;\n    }\n\n    @Override\n    public float getProgress() throws IOException, InterruptedException {\n        return this.lineRecordReader.getProgress();\n    }\n\n    @Override\n    public void close() throws IOException {\n        this.lineRecordReader.close();\n    }\n}\n\n```\n- - -\n運作方式可看hadoop Mapper的source code (org.apache.hadoop.mapreduce.Mapper)\n這裡擷取裡面136~151行的code，這裡可以看到 while(context.netKeyValue) 就是執行RecordReader的nextKeyValue method\n而 map(context.getCurrentKey(), context.getCurrentValue(), context) 就是執行RecordReader的getCurrentKey()和getCurrentValue() method\n在每次執行context.nextKeyValue()時判斷是否有下筆資料，因為我是借用LineRecordReader讀資料，所以直接使用它的nextKeyValue\n只是將資料重新封裝成key是productName，value是BuyPhoneBean\n\n```java \n  /**\n   * Expert users can override this method for more complete control over the\n   * execution of the Mapper.\n   * @param context\n   * @throws IOException\n   */\n  public void run(Context context) throws IOException, InterruptedException {\n    setup(context);\n    try {\n      while (context.nextKeyValue()) {\n        map(context.getCurrentKey(), context.getCurrentValue(), context);\n      }\n    } finally {\n      cleanup(context);\n    }\n  }\n\n```\n- - -\n第三步將客製化的RecordReader覆寫到InputFormat，才可以讓hadoop使用自己做的RecordReader\n\n```java \npublic class BuyPhoneInputFormat extends FileInputFormat<Text, BuyPhoneBean> {\n    @Override\n    public RecordReader<Text, BuyPhoneBean> createRecordReader(InputSplit split, TaskAttemptContext context) throws IOException, InterruptedException {\n        BuyPhoneRecordReader recordReader = new BuyPhoneRecordReader();\n        recordReader.initialize(split, context);\n        return recordReader;\n    }\n}\n\n```\n- - -\n執行job前需要指定setInputFormatClass為我們上一步建立的BuyPhoneInputFormat\n\n```java \npublic static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf = new Configuration();\n    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();\n\n    if(otherArgs.length < 2){\n        System.err.println(\"Usage: \" + JOB_NAME + \" <in> <out>\");\n        System.exit(2);\n    }\n\n    Job job = new HadoopJob(conf, JOB_NAME)\n            .mapReduce(TestRecordReaderJob.class, SequenceMapper.class, SequenceReducer.class)\n            .mapKeyValue(Text.class, BuyPhoneBean.class)\n            .reducerKeyValue(Text.class, BuyPhoneBean.class)\n            .getJob();\n\n    job.setInputFormatClass(BuyPhoneInputFormat.class);\n    job.setOutputFormatClass(SequenceFileOutputFormat.class);\n\n    FileInputFormat.setInputPaths(job, new Path(otherArgs[0]));\n    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));\n\n    System.exit(job.waitForCompletion(true) ? 0 : 1);\n}\n```\n\n這裡mapper與reducer沒做特別處理，只是單純的輸出，主要還是測試自己寫的RecordReader\n<img src=\"/images/hadoop-recordreader-001.png\" width=\"300px\" height=\"15%\" alt=\"img1\"/>\n","source":"_posts/Hadoop-RecordReader.md","raw":"---\ntitle: Hadoop RecordReader\ndate: 2019-11-06 13:03:25\ntags:\n- hadoop\n- big data\n---\n\n很多時候我們會自定義一些讀取資料的格式，而hadoop默認的RecordReader是LineRecordReader\n會一行一行的讀取資料，key為偏移量，value為整行內容\n\n現在嘗試客製化一個新的RecordReader，在此使用LineRecrodReader為基礎\n並使用上一篇BuyPhoneJob的運算結果封裝成BuyPhoneBean，實現RecordReader後，可自定義資料格式傳給map\n\n第一步建立BuyPhoneBean，一樣implements Writable，做序列化和反序列化\ncustomerIds雖然為多個值組成，但在這裡當整個字串處理\n\n| procuctName   | productPrice | customerIds         |\n| ------------- | ------------ | ------------------- |\n| iPhone 8 Plus | 449.97       | 001,026,022,015,007 |\n| iPhone 7      | 207.0        | 004,029,024,018,010 |\n| ...           | ...          | ...                 |\n\n```java \npublic class BuyPhoneBean implements Writable {\n    private String productName;\n    private double productPrice;\n    private String customerIds;\n\n    public BuyPhoneBean(){\n        super();\n    }\n\n    @Override\n    public void write(DataOutput out) throws IOException {\n        out.writeUTF(this.productName);\n        out.writeDouble(this.productPrice);\n        out.writeUTF(this.customerIds);\n    }\n\n    @Override\n    public void readFields(DataInput in) throws IOException {\n        this.productName = in.readUTF();\n        this.productPrice = in.readDouble();\n        this.customerIds = in.readUTF();\n    }\n    \n    ...\n\n}\n\n```\n- - -\n第二步自定義RecordReader，讀取依舊是使用LineRecordReader，只是將結果改為key是productName，而value是BuyPhoneBean\n在繼承RecordReader後需要Override一些methods，運作方式會在之後做說明\n這裡需要注意的是LineRecordReader使用完後在close method上進行關閉\n\n```java \npublic class BuyPhoneRecordReader extends RecordReader<Text, BuyPhoneBean> {\n    private static Logger logger = LoggerFactory.getLogger(BuyPhoneRecordReader.class);\n\n    private LineRecordReader lineRecordReader;\n\n    private Text key = new Text();\n    private BuyPhoneBean value = new BuyPhoneBean();\n\n    private Text lineValue;\n\n    @Override\n    public void initialize(InputSplit split, TaskAttemptContext context) throws IOException {\n        this.lineRecordReader = new LineRecordReader();\n        this.lineRecordReader.initialize(split, context);\n    }\n\n    @Override\n    public boolean nextKeyValue() throws IOException, InterruptedException {\n        if(lineRecordReader.nextKeyValue()){\n            lineValue = lineRecordReader.getCurrentValue();\n            byte[] line = lineValue.getBytes();\n            int lineLen = lineValue.getLength();\n            String data = new String(line, 0, lineLen);\n            setKeyValue(this.key, this.value, data.split(REGEX_COLS_SPLIT_SYMBOL));\n        }else{\n            return false;\n        }\n        return true;\n    }\n\n    private void setKeyValue(Text key, BuyPhoneBean value, String[] cols){\n        if(cols.length < 3){\n            logger.warn(\"this cols[] length < 3\");\n            return;\n        }\n        String productName = cols[0];\n        double productPrice = Double.parseDouble(cols[1]);\n        String customerIds = cols[2];\n\n        key.set(new Text(productName));\n\n        value.setProductName(productName);\n        value.setProductPrice(productPrice);\n        value.setCustomerIds(customerIds);\n    }\n\n    @Override\n    public Text getCurrentKey() throws IOException, InterruptedException {\n        return this.key;\n    }\n\n    @Override\n    public BuyPhoneBean getCurrentValue() throws IOException, InterruptedException {\n        return this.value;\n    }\n\n    @Override\n    public float getProgress() throws IOException, InterruptedException {\n        return this.lineRecordReader.getProgress();\n    }\n\n    @Override\n    public void close() throws IOException {\n        this.lineRecordReader.close();\n    }\n}\n\n```\n- - -\n運作方式可看hadoop Mapper的source code (org.apache.hadoop.mapreduce.Mapper)\n這裡擷取裡面136~151行的code，這裡可以看到 while(context.netKeyValue) 就是執行RecordReader的nextKeyValue method\n而 map(context.getCurrentKey(), context.getCurrentValue(), context) 就是執行RecordReader的getCurrentKey()和getCurrentValue() method\n在每次執行context.nextKeyValue()時判斷是否有下筆資料，因為我是借用LineRecordReader讀資料，所以直接使用它的nextKeyValue\n只是將資料重新封裝成key是productName，value是BuyPhoneBean\n\n```java \n  /**\n   * Expert users can override this method for more complete control over the\n   * execution of the Mapper.\n   * @param context\n   * @throws IOException\n   */\n  public void run(Context context) throws IOException, InterruptedException {\n    setup(context);\n    try {\n      while (context.nextKeyValue()) {\n        map(context.getCurrentKey(), context.getCurrentValue(), context);\n      }\n    } finally {\n      cleanup(context);\n    }\n  }\n\n```\n- - -\n第三步將客製化的RecordReader覆寫到InputFormat，才可以讓hadoop使用自己做的RecordReader\n\n```java \npublic class BuyPhoneInputFormat extends FileInputFormat<Text, BuyPhoneBean> {\n    @Override\n    public RecordReader<Text, BuyPhoneBean> createRecordReader(InputSplit split, TaskAttemptContext context) throws IOException, InterruptedException {\n        BuyPhoneRecordReader recordReader = new BuyPhoneRecordReader();\n        recordReader.initialize(split, context);\n        return recordReader;\n    }\n}\n\n```\n- - -\n執行job前需要指定setInputFormatClass為我們上一步建立的BuyPhoneInputFormat\n\n```java \npublic static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf = new Configuration();\n    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();\n\n    if(otherArgs.length < 2){\n        System.err.println(\"Usage: \" + JOB_NAME + \" <in> <out>\");\n        System.exit(2);\n    }\n\n    Job job = new HadoopJob(conf, JOB_NAME)\n            .mapReduce(TestRecordReaderJob.class, SequenceMapper.class, SequenceReducer.class)\n            .mapKeyValue(Text.class, BuyPhoneBean.class)\n            .reducerKeyValue(Text.class, BuyPhoneBean.class)\n            .getJob();\n\n    job.setInputFormatClass(BuyPhoneInputFormat.class);\n    job.setOutputFormatClass(SequenceFileOutputFormat.class);\n\n    FileInputFormat.setInputPaths(job, new Path(otherArgs[0]));\n    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));\n\n    System.exit(job.waitForCompletion(true) ? 0 : 1);\n}\n```\n\n這裡mapper與reducer沒做特別處理，只是單純的輸出，主要還是測試自己寫的RecordReader\n<img src=\"/images/hadoop-recordreader-001.png\" width=\"300px\" height=\"15%\" alt=\"img1\"/>\n","slug":"Hadoop-RecordReader","published":1,"updated":"2019-11-11T12:55:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr4q00040rpjwvr5tsin","content":"<p>很多時候我們會自定義一些讀取資料的格式，而hadoop默認的RecordReader是LineRecordReader<br>會一行一行的讀取資料，key為偏移量，value為整行內容</p>\n<p>現在嘗試客製化一個新的RecordReader，在此使用LineRecrodReader為基礎<br>並使用上一篇BuyPhoneJob的運算結果封裝成BuyPhoneBean，實現RecordReader後，可自定義資料格式傳給map</p>\n<p>第一步建立BuyPhoneBean，一樣implements Writable，做序列化和反序列化<br>customerIds雖然為多個值組成，但在這裡當整個字串處理</p>\n<table>\n<thead>\n<tr>\n<th>procuctName</th>\n<th>productPrice</th>\n<th>customerIds</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iPhone 8 Plus</td>\n<td>449.97</td>\n<td>001,026,022,015,007</td>\n</tr>\n<tr>\n<td>iPhone 7</td>\n<td>207.0</td>\n<td>004,029,024,018,010</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String productName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> productPrice;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String customerIds;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BuyPhoneBean</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.productName);</span><br><span class=\"line\">        out.writeDouble(<span class=\"keyword\">this</span>.productPrice);</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.customerIds);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productName = in.readUTF();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productPrice = in.readDouble();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customerIds = in.readUTF();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>第二步自定義RecordReader，讀取依舊是使用LineRecordReader，只是將結果改為key是productName，而value是BuyPhoneBean<br>在繼承RecordReader後需要Override一些methods，運作方式會在之後做說明<br>這裡需要注意的是LineRecordReader使用完後在close method上進行關閉</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneRecordReader</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecordReader</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">BuyPhoneBean</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(BuyPhoneRecordReader.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LineRecordReader lineRecordReader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text key = <span class=\"keyword\">new</span> Text();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BuyPhoneBean value = <span class=\"keyword\">new</span> BuyPhoneBean();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text lineValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(InputSplit split, TaskAttemptContext context)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lineRecordReader = <span class=\"keyword\">new</span> LineRecordReader();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lineRecordReader.initialize(split, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nextKeyValue</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lineRecordReader.nextKeyValue())&#123;</span><br><span class=\"line\">            lineValue = lineRecordReader.getCurrentValue();</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] line = lineValue.getBytes();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> lineLen = lineValue.getLength();</span><br><span class=\"line\">            String data = <span class=\"keyword\">new</span> String(line, <span class=\"number\">0</span>, lineLen);</span><br><span class=\"line\">            setKeyValue(<span class=\"keyword\">this</span>.key, <span class=\"keyword\">this</span>.value, data.split(REGEX_COLS_SPLIT_SYMBOL));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setKeyValue</span><span class=\"params\">(Text key, BuyPhoneBean value, String[] cols)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cols.length &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"this cols[] length &lt; 3\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String productName = cols[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">double</span> productPrice = Double.parseDouble(cols[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        String customerIds = cols[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        key.set(<span class=\"keyword\">new</span> Text(productName));</span><br><span class=\"line\"></span><br><span class=\"line\">        value.setProductName(productName);</span><br><span class=\"line\">        value.setProductPrice(productPrice);</span><br><span class=\"line\">        value.setCustomerIds(customerIds);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Text <span class=\"title\">getCurrentKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BuyPhoneBean <span class=\"title\">getCurrentValue</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getProgress</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.lineRecordReader.getProgress();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lineRecordReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>運作方式可看hadoop Mapper的source code (org.apache.hadoop.mapreduce.Mapper)<br>這裡擷取裡面136~151行的code，這裡可以看到 while(context.netKeyValue) 就是執行RecordReader的nextKeyValue method<br>而 map(context.getCurrentKey(), context.getCurrentValue(), context) 就是執行RecordReader的getCurrentKey()和getCurrentValue() method<br>在每次執行context.nextKeyValue()時判斷是否有下筆資料，因為我是借用LineRecordReader讀資料，所以直接使用它的nextKeyValue<br>只是將資料重新封裝成key是productName，value是BuyPhoneBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Expert users can override this method for more complete control over the</span></span><br><span class=\"line\"><span class=\"comment\"> * execution of the Mapper.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(Context context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">  setup(context);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (context.nextKeyValue()) &#123;</span><br><span class=\"line\">      map(context.getCurrentKey(), context.getCurrentValue(), context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    cleanup(context);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>第三步將客製化的RecordReader覆寫到InputFormat，才可以讓hadoop使用自己做的RecordReader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneInputFormat</span> <span class=\"keyword\">extends</span> <span class=\"title\">FileInputFormat</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">BuyPhoneBean</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RecordReader&lt;Text, BuyPhoneBean&gt; <span class=\"title\">createRecordReader</span><span class=\"params\">(InputSplit split, TaskAttemptContext context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        BuyPhoneRecordReader recordReader = <span class=\"keyword\">new</span> BuyPhoneRecordReader();</span><br><span class=\"line\">        recordReader.initialize(split, context);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recordReader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>執行job前需要指定setInputFormatClass為我們上一步建立的BuyPhoneInputFormat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class=\"line\">    Configuration conf = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">    String[] otherArgs = <span class=\"keyword\">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(otherArgs.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Usage: \"</span> + JOB_NAME + <span class=\"string\">\" &lt;in&gt; &lt;out&gt;\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Job job = <span class=\"keyword\">new</span> HadoopJob(conf, JOB_NAME)</span><br><span class=\"line\">            .mapReduce(TestRecordReaderJob.class, SequenceMapper.class, SequenceReducer.class)</span><br><span class=\"line\">            .mapKeyValue(Text.class, BuyPhoneBean.class)</span><br><span class=\"line\">            .reducerKeyValue(Text.class, BuyPhoneBean.class)</span><br><span class=\"line\">            .getJob();</span><br><span class=\"line\"></span><br><span class=\"line\">    job.setInputFormatClass(BuyPhoneInputFormat.class);</span><br><span class=\"line\">    job.setOutputFormatClass(SequenceFileOutputFormat.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    FileInputFormat.setInputPaths(job, <span class=\"keyword\">new</span> Path(otherArgs[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    FileOutputFormat.setOutputPath(job, <span class=\"keyword\">new</span> Path(otherArgs[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">    System.exit(job.waitForCompletion(<span class=\"keyword\">true</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裡mapper與reducer沒做特別處理，只是單純的輸出，主要還是測試自己寫的RecordReader<br><img src=\"/images/hadoop-recordreader-001.png\" width=\"300px\" height=\"15%\" alt=\"img1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很多時候我們會自定義一些讀取資料的格式，而hadoop默認的RecordReader是LineRecordReader<br>會一行一行的讀取資料，key為偏移量，value為整行內容</p>\n<p>現在嘗試客製化一個新的RecordReader，在此使用LineRecrodReader為基礎<br>並使用上一篇BuyPhoneJob的運算結果封裝成BuyPhoneBean，實現RecordReader後，可自定義資料格式傳給map</p>\n<p>第一步建立BuyPhoneBean，一樣implements Writable，做序列化和反序列化<br>customerIds雖然為多個值組成，但在這裡當整個字串處理</p>\n<table>\n<thead>\n<tr>\n<th>procuctName</th>\n<th>productPrice</th>\n<th>customerIds</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iPhone 8 Plus</td>\n<td>449.97</td>\n<td>001,026,022,015,007</td>\n</tr>\n<tr>\n<td>iPhone 7</td>\n<td>207.0</td>\n<td>004,029,024,018,010</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String productName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> productPrice;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String customerIds;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BuyPhoneBean</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.productName);</span><br><span class=\"line\">        out.writeDouble(<span class=\"keyword\">this</span>.productPrice);</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.customerIds);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productName = in.readUTF();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productPrice = in.readDouble();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customerIds = in.readUTF();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>第二步自定義RecordReader，讀取依舊是使用LineRecordReader，只是將結果改為key是productName，而value是BuyPhoneBean<br>在繼承RecordReader後需要Override一些methods，運作方式會在之後做說明<br>這裡需要注意的是LineRecordReader使用完後在close method上進行關閉</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneRecordReader</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecordReader</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">BuyPhoneBean</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(BuyPhoneRecordReader.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LineRecordReader lineRecordReader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text key = <span class=\"keyword\">new</span> Text();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BuyPhoneBean value = <span class=\"keyword\">new</span> BuyPhoneBean();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text lineValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(InputSplit split, TaskAttemptContext context)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lineRecordReader = <span class=\"keyword\">new</span> LineRecordReader();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lineRecordReader.initialize(split, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nextKeyValue</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lineRecordReader.nextKeyValue())&#123;</span><br><span class=\"line\">            lineValue = lineRecordReader.getCurrentValue();</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] line = lineValue.getBytes();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> lineLen = lineValue.getLength();</span><br><span class=\"line\">            String data = <span class=\"keyword\">new</span> String(line, <span class=\"number\">0</span>, lineLen);</span><br><span class=\"line\">            setKeyValue(<span class=\"keyword\">this</span>.key, <span class=\"keyword\">this</span>.value, data.split(REGEX_COLS_SPLIT_SYMBOL));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setKeyValue</span><span class=\"params\">(Text key, BuyPhoneBean value, String[] cols)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cols.length &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"this cols[] length &lt; 3\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String productName = cols[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">double</span> productPrice = Double.parseDouble(cols[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        String customerIds = cols[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        key.set(<span class=\"keyword\">new</span> Text(productName));</span><br><span class=\"line\"></span><br><span class=\"line\">        value.setProductName(productName);</span><br><span class=\"line\">        value.setProductPrice(productPrice);</span><br><span class=\"line\">        value.setCustomerIds(customerIds);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Text <span class=\"title\">getCurrentKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BuyPhoneBean <span class=\"title\">getCurrentValue</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getProgress</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.lineRecordReader.getProgress();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lineRecordReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>運作方式可看hadoop Mapper的source code (org.apache.hadoop.mapreduce.Mapper)<br>這裡擷取裡面136~151行的code，這裡可以看到 while(context.netKeyValue) 就是執行RecordReader的nextKeyValue method<br>而 map(context.getCurrentKey(), context.getCurrentValue(), context) 就是執行RecordReader的getCurrentKey()和getCurrentValue() method<br>在每次執行context.nextKeyValue()時判斷是否有下筆資料，因為我是借用LineRecordReader讀資料，所以直接使用它的nextKeyValue<br>只是將資料重新封裝成key是productName，value是BuyPhoneBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Expert users can override this method for more complete control over the</span></span><br><span class=\"line\"><span class=\"comment\"> * execution of the Mapper.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(Context context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">  setup(context);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (context.nextKeyValue()) &#123;</span><br><span class=\"line\">      map(context.getCurrentKey(), context.getCurrentValue(), context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    cleanup(context);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>第三步將客製化的RecordReader覆寫到InputFormat，才可以讓hadoop使用自己做的RecordReader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneInputFormat</span> <span class=\"keyword\">extends</span> <span class=\"title\">FileInputFormat</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">BuyPhoneBean</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RecordReader&lt;Text, BuyPhoneBean&gt; <span class=\"title\">createRecordReader</span><span class=\"params\">(InputSplit split, TaskAttemptContext context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        BuyPhoneRecordReader recordReader = <span class=\"keyword\">new</span> BuyPhoneRecordReader();</span><br><span class=\"line\">        recordReader.initialize(split, context);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recordReader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>執行job前需要指定setInputFormatClass為我們上一步建立的BuyPhoneInputFormat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class=\"line\">    Configuration conf = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">    String[] otherArgs = <span class=\"keyword\">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(otherArgs.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Usage: \"</span> + JOB_NAME + <span class=\"string\">\" &lt;in&gt; &lt;out&gt;\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Job job = <span class=\"keyword\">new</span> HadoopJob(conf, JOB_NAME)</span><br><span class=\"line\">            .mapReduce(TestRecordReaderJob.class, SequenceMapper.class, SequenceReducer.class)</span><br><span class=\"line\">            .mapKeyValue(Text.class, BuyPhoneBean.class)</span><br><span class=\"line\">            .reducerKeyValue(Text.class, BuyPhoneBean.class)</span><br><span class=\"line\">            .getJob();</span><br><span class=\"line\"></span><br><span class=\"line\">    job.setInputFormatClass(BuyPhoneInputFormat.class);</span><br><span class=\"line\">    job.setOutputFormatClass(SequenceFileOutputFormat.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    FileInputFormat.setInputPaths(job, <span class=\"keyword\">new</span> Path(otherArgs[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    FileOutputFormat.setOutputPath(job, <span class=\"keyword\">new</span> Path(otherArgs[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">    System.exit(job.waitForCompletion(<span class=\"keyword\">true</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這裡mapper與reducer沒做特別處理，只是單純的輸出，主要還是測試自己寫的RecordReader<br><img src=\"/images/hadoop-recordreader-001.png\" width=\"300px\" height=\"15%\" alt=\"img1\"></p>\n"},{"title":"JCConf 2019","date":"2019-10-04T13:14:23.000Z","_content":"\n又過了一年，整整一年沒有更新...\n今年又來參加JCConf了，順便記錄一下吧~\n\n<img src=\"/images/jcconf-2019-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n","source":"_posts/JCConf-2019.md","raw":"---\ntitle: JCConf 2019\ndate: 2019-10-04 21:14:23\ntags:\n- conference\n---\n\n又過了一年，整整一年沒有更新...\n今年又來參加JCConf了，順便記錄一下吧~\n\n<img src=\"/images/jcconf-2019-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n","slug":"JCConf-2019","published":1,"updated":"2019-10-10T14:11:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr4t00060rpjc5wqw09n","content":"<p>又過了一年，整整一年沒有更新…<br>今年又來參加JCConf了，順便記錄一下吧~</p>\n<p><img src=\"/images/jcconf-2019-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>又過了一年，整整一年沒有更新…<br>今年又來參加JCConf了，順便記錄一下吧~</p>\n<p><img src=\"/images/jcconf-2019-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n"},{"title":"JCConf 2018","date":"2018-10-21T14:26:02.000Z","_content":"\n今年又參加了JCConf\n\n<img src=\"/images/jcconf-2018-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n\n<br/><br/>\n還在Oath攤位抽到一隻黃色小鴨\n\n<img src=\"/images/jcconf-2018-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"/>\n","source":"_posts/JCConf-2018.md","raw":"---\ntitle: JCConf 2018\ndate: 2018-10-21 22:26:02\ntags:\n- conference\n---\n\n今年又參加了JCConf\n\n<img src=\"/images/jcconf-2018-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n\n<br/><br/>\n還在Oath攤位抽到一隻黃色小鴨\n\n<img src=\"/images/jcconf-2018-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"/>\n","slug":"JCConf-2018","published":1,"updated":"2019-10-10T14:10:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr4x00090rpjemlraa1y","content":"<p>今年又參加了JCConf</p>\n<p><img src=\"/images/jcconf-2018-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<p><br><br><br>還在Oath攤位抽到一隻黃色小鴨</p>\n<p><img src=\"/images/jcconf-2018-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今年又參加了JCConf</p>\n<p><img src=\"/images/jcconf-2018-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<p><br><br><br>還在Oath攤位抽到一隻黃色小鴨</p>\n<p><img src=\"/images/jcconf-2018-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"></p>\n"},{"title":"JSDC 2019","date":"2019-10-26T10:57:45.000Z","_content":"\n今年JSDC跟JCConf剛好都在10月份\n\n今天第一場的標題Deep Learning in JS還以爲有新的lib可以做machine learning\n沒想到是Tensorflow出了JS的版本 (Tensorflow.js)\n稍微查了一下，好像是去年剛發佈，但直到今天我才知道它的存在\n\n<img src=\"/images/jsdc-2019-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n\n報到還送手提袋和環保吸管，贈品還算滿實用的...\n\n<img src=\"/images/jsdc-2019-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"/>\n\n幾年前參加的時候只送手機拭淨布...\n\n<img src=\"/images/jsdc-2019-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"/>\n\n提到贈品，以前的Java Conference送的東西都滿好的\n當年參加Java Developer Day的時候還有送包包和杯子\n可惜停辦了，JCConf印象中好像沒有送什麼贈品...\n\n<img src=\"/images/jsdc-2019-004.png\" width=\"50%\" height=\"50%\" alt=\"img4\"/>\n\n<img src=\"/images/jsdc-2019-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"/>","source":"_posts/JSDC-2019.md","raw":"---\ntitle: JSDC 2019\ndate: 2019-10-26 18:57:45\ntags:\n- conference\n---\n\n今年JSDC跟JCConf剛好都在10月份\n\n今天第一場的標題Deep Learning in JS還以爲有新的lib可以做machine learning\n沒想到是Tensorflow出了JS的版本 (Tensorflow.js)\n稍微查了一下，好像是去年剛發佈，但直到今天我才知道它的存在\n\n<img src=\"/images/jsdc-2019-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n\n報到還送手提袋和環保吸管，贈品還算滿實用的...\n\n<img src=\"/images/jsdc-2019-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"/>\n\n幾年前參加的時候只送手機拭淨布...\n\n<img src=\"/images/jsdc-2019-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"/>\n\n提到贈品，以前的Java Conference送的東西都滿好的\n當年參加Java Developer Day的時候還有送包包和杯子\n可惜停辦了，JCConf印象中好像沒有送什麼贈品...\n\n<img src=\"/images/jsdc-2019-004.png\" width=\"50%\" height=\"50%\" alt=\"img4\"/>\n\n<img src=\"/images/jsdc-2019-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"/>","slug":"JSDC-2019","published":1,"updated":"2019-10-26T13:48:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr4y000a0rpjkdo818mm","content":"<p>今年JSDC跟JCConf剛好都在10月份</p>\n<p>今天第一場的標題Deep Learning in JS還以爲有新的lib可以做machine learning<br>沒想到是Tensorflow出了JS的版本 (Tensorflow.js)<br>稍微查了一下，好像是去年剛發佈，但直到今天我才知道它的存在</p>\n<p><img src=\"/images/jsdc-2019-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<p>報到還送手提袋和環保吸管，贈品還算滿實用的…</p>\n<p><img src=\"/images/jsdc-2019-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"></p>\n<p>幾年前參加的時候只送手機拭淨布…</p>\n<p><img src=\"/images/jsdc-2019-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"></p>\n<p>提到贈品，以前的Java Conference送的東西都滿好的<br>當年參加Java Developer Day的時候還有送包包和杯子<br>可惜停辦了，JCConf印象中好像沒有送什麼贈品…</p>\n<p><img src=\"/images/jsdc-2019-004.png\" width=\"50%\" height=\"50%\" alt=\"img4\"></p>\n<p><img src=\"/images/jsdc-2019-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今年JSDC跟JCConf剛好都在10月份</p>\n<p>今天第一場的標題Deep Learning in JS還以爲有新的lib可以做machine learning<br>沒想到是Tensorflow出了JS的版本 (Tensorflow.js)<br>稍微查了一下，好像是去年剛發佈，但直到今天我才知道它的存在</p>\n<p><img src=\"/images/jsdc-2019-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<p>報到還送手提袋和環保吸管，贈品還算滿實用的…</p>\n<p><img src=\"/images/jsdc-2019-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"></p>\n<p>幾年前參加的時候只送手機拭淨布…</p>\n<p><img src=\"/images/jsdc-2019-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"></p>\n<p>提到贈品，以前的Java Conference送的東西都滿好的<br>當年參加Java Developer Day的時候還有送包包和杯子<br>可惜停辦了，JCConf印象中好像沒有送什麼贈品…</p>\n<p><img src=\"/images/jsdc-2019-004.png\" width=\"50%\" height=\"50%\" alt=\"img4\"></p>\n<p><img src=\"/images/jsdc-2019-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"></p>\n"},{"title":"Java NIO ByteBuffer 基本操作圖","date":"2020-01-13T13:02:08.000Z","_content":"剛剛在刪舊圖片時發現以前為了學 ByteBuffer 時自己畫的操作圖\n<img src=\"/images/nio-byte-buffer-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n這張圖簡單顯示 ByteBuffer 的寫入與讀取時 position point 和 limit point 的位移\nallocate 宣告 buffer capacity ，配給 JVM heap ，屬於 GC 可管範圍，需要 copy data ，速度慢於 allocateDirect\nput(bytes[4]) position 一路從 0 移動到 4 ，0 ~ 3 依序放入內容值， 4 為下一個寫入位置\nflip() 為準備讀取 buffer 資料前的動作，為了讀取剛剛寫入 0 ~ 3 的內容，則改變 point 指向位置 limit = position 接著 position = 0\nget(bytes[4]) position 一路從 0 移動到 4 ，0 ~ 3 依序取出內容值\nclear() 清除不是真的清除資料，也只是改變 point 指向位置， position = 0 且 limit = capacity ，因為下次有資料寫入會直接覆蓋 buffer 內的舊值\n\n使用 NIO 時會經常使用 ByteBuffer 來做讀取和寫入資料，是一種基於 channel 和 buffer 的 I/O 方式\n還有一種是 ByteBuffer.allocateDirect(capability) 配給 OS local memory ，不屬於 GC 可控制範圍，不需要 copy 所以速度較快\n換句話說，它可以使用 native 直接配給 java heap 外的 memory ，之後通過 java heap 裡面的 DirectByteBuffer 針對這一塊 memory refernce 進行操作\n可在某些使用情況下可提高性能，它避免了 java heap 和 native heap 中來回 copy data\n","source":"_posts/Java-NIO-ByteBuffer-基本操作圖.md","raw":"---\ntitle: Java NIO ByteBuffer 基本操作圖\ndate: 2020-01-13 21:02:08\ntags:\n- java\n- nio\n---\n剛剛在刪舊圖片時發現以前為了學 ByteBuffer 時自己畫的操作圖\n<img src=\"/images/nio-byte-buffer-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n這張圖簡單顯示 ByteBuffer 的寫入與讀取時 position point 和 limit point 的位移\nallocate 宣告 buffer capacity ，配給 JVM heap ，屬於 GC 可管範圍，需要 copy data ，速度慢於 allocateDirect\nput(bytes[4]) position 一路從 0 移動到 4 ，0 ~ 3 依序放入內容值， 4 為下一個寫入位置\nflip() 為準備讀取 buffer 資料前的動作，為了讀取剛剛寫入 0 ~ 3 的內容，則改變 point 指向位置 limit = position 接著 position = 0\nget(bytes[4]) position 一路從 0 移動到 4 ，0 ~ 3 依序取出內容值\nclear() 清除不是真的清除資料，也只是改變 point 指向位置， position = 0 且 limit = capacity ，因為下次有資料寫入會直接覆蓋 buffer 內的舊值\n\n使用 NIO 時會經常使用 ByteBuffer 來做讀取和寫入資料，是一種基於 channel 和 buffer 的 I/O 方式\n還有一種是 ByteBuffer.allocateDirect(capability) 配給 OS local memory ，不屬於 GC 可控制範圍，不需要 copy 所以速度較快\n換句話說，它可以使用 native 直接配給 java heap 外的 memory ，之後通過 java heap 裡面的 DirectByteBuffer 針對這一塊 memory refernce 進行操作\n可在某些使用情況下可提高性能，它避免了 java heap 和 native heap 中來回 copy data\n","slug":"Java-NIO-ByteBuffer-基本操作圖","published":1,"updated":"2020-01-14T12:52:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr4z000b0rpjounm4uuj","content":"<p>剛剛在刪舊圖片時發現以前為了學 ByteBuffer 時自己畫的操作圖<br><img src=\"/images/nio-byte-buffer-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"><br>這張圖簡單顯示 ByteBuffer 的寫入與讀取時 position point 和 limit point 的位移<br>allocate 宣告 buffer capacity ，配給 JVM heap ，屬於 GC 可管範圍，需要 copy data ，速度慢於 allocateDirect<br>put(bytes[4]) position 一路從 0 移動到 4 ，0 ~ 3 依序放入內容值， 4 為下一個寫入位置<br>flip() 為準備讀取 buffer 資料前的動作，為了讀取剛剛寫入 0 ~ 3 的內容，則改變 point 指向位置 limit = position 接著 position = 0<br>get(bytes[4]) position 一路從 0 移動到 4 ，0 ~ 3 依序取出內容值<br>clear() 清除不是真的清除資料，也只是改變 point 指向位置， position = 0 且 limit = capacity ，因為下次有資料寫入會直接覆蓋 buffer 內的舊值</p>\n<p>使用 NIO 時會經常使用 ByteBuffer 來做讀取和寫入資料，是一種基於 channel 和 buffer 的 I/O 方式<br>還有一種是 ByteBuffer.allocateDirect(capability) 配給 OS local memory ，不屬於 GC 可控制範圍，不需要 copy 所以速度較快<br>換句話說，它可以使用 native 直接配給 java heap 外的 memory ，之後通過 java heap 裡面的 DirectByteBuffer 針對這一塊 memory refernce 進行操作<br>可在某些使用情況下可提高性能，它避免了 java heap 和 native heap 中來回 copy data</p>\n","site":{"data":{}},"excerpt":"","more":"<p>剛剛在刪舊圖片時發現以前為了學 ByteBuffer 時自己畫的操作圖<br><img src=\"/images/nio-byte-buffer-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"><br>這張圖簡單顯示 ByteBuffer 的寫入與讀取時 position point 和 limit point 的位移<br>allocate 宣告 buffer capacity ，配給 JVM heap ，屬於 GC 可管範圍，需要 copy data ，速度慢於 allocateDirect<br>put(bytes[4]) position 一路從 0 移動到 4 ，0 ~ 3 依序放入內容值， 4 為下一個寫入位置<br>flip() 為準備讀取 buffer 資料前的動作，為了讀取剛剛寫入 0 ~ 3 的內容，則改變 point 指向位置 limit = position 接著 position = 0<br>get(bytes[4]) position 一路從 0 移動到 4 ，0 ~ 3 依序取出內容值<br>clear() 清除不是真的清除資料，也只是改變 point 指向位置， position = 0 且 limit = capacity ，因為下次有資料寫入會直接覆蓋 buffer 內的舊值</p>\n<p>使用 NIO 時會經常使用 ByteBuffer 來做讀取和寫入資料，是一種基於 channel 和 buffer 的 I/O 方式<br>還有一種是 ByteBuffer.allocateDirect(capability) 配給 OS local memory ，不屬於 GC 可控制範圍，不需要 copy 所以速度較快<br>換句話說，它可以使用 native 直接配給 java heap 外的 memory ，之後通過 java heap 裡面的 DirectByteBuffer 針對這一塊 memory refernce 進行操作<br>可在某些使用情況下可提高性能，它避免了 java heap 和 native heap 中來回 copy data</p>\n"},{"title":"Java BlockingQueue 適合應用在哪些場景","date":"2020-01-06T10:03:44.000Z","_content":"BlockingQueue 適用於緩衝如經典的 producer / consumer 場景\n大多用在多個 thread 之間倆倆需要共享資料時，一個放另一個取，非常方便，通常我用它來取代 wait() 和 notify() 做 thread 通信\n上一篇 ThreadPoolExecutor 第5個參數就是 BlockingQueue 用來存放等待從 thread pool 取得 thread 的 task\n可根據不同的應用場景可搭配適合的 BlockingQueue \n這個主題偏向於應用面的思考，針對不同場景選擇使用 BlockingQueue\n\n- - -\nBlockingQueue:\nArrayBlockingQueue\n\n適用場景:\n在非高併發任務，且可預估出固定處理速率時\n如: 一般的緩衝區\n\n特色:\nqueue 容量固定個數，屬於有 bounded 的類型，滿或空的時候會 blocking\n放入與取出使用同一個 lock ，所以不利於高併發下使用\n\n- - -\nBlockingQueue:\nPriorityBlockingQueue\n\n適用場景:\n當需要優先處理特定任務時，需讓高優先權任務盡快被取出處理，再接著處理次要的任務\n如: 在有階級機制下的搶票系統，可根據階級設定每個人的優先權，讓高優先權的人優先取得票\n\n特色:\nqueue 容量為 Integer.MAX_VALUE – 8 ， Java doc 上說明為 unbounded \n根據 priority 排序，優先級高的會被優先取出處理\n比較特別的是它 add(), offer(), put() 操作都一樣，都是 offer() 操作\n\n- - -\nBlockingQueue:\nLinkedBlockingQueue\n\n適用場景:\n需要高併發情況下使用，但需要評估取出時的消耗率，避免高併發下取出速度趕不上放入速度造成 OutOfMemory\n如: 即時訊息處理\n\n特色:\nqueue 容量可調整， Java doc 上說明為 optionally-bounded ，預設值為 Integer.MAX_VALUE，但一般來說會根據需求設值\n用於高併發，使用讀寫分離，放入使用 putLock 而取出使用 takeLock\n在上一篇 ThreadPoolExecutor 有稍微提到\n且 newFixedThreadPool, newSingleThreadExecutor 都使使用 LinkedBlockingQueue 作為 workQueue\n\n- - -\nBlockingQueue:\nLinkedBlockingDeque\n\n適用場景:\n有雙向需求\n如: real-time 處理任務，在某些危險的情況下需要警急處理終止命令\n\n特色:\n有雙向需求，基本上與 LinkedBlockingQueue 相似\n可以當作極端的 PriorityBlockingQueue ，但只有一般和最高兩種權限\n\n\n- - -\nBlockingQueue:\nSynchronousQueue\n\n場景:\n目前想不到單獨使用的場請，所以需搭配 newCachedThreadPool 使用\nnewCachedThreadPool 適用於在特定情況或時間下會才一瞬間出現大量 task，但在大部分情況下處理量不高\n如: 某些監控系統或感應器，只有在警報發生或瞬間觸發多個動作時需要處理大量 task ，其餘時間皆為正常的處理量\n\n特色:\n它沒有容量，所以 peek() 永遠為空，底層是 transfer 且等待為0秒，放與取只能手把手地快速交換\n目前所知需搭配 newCachedThreadPool 使用，其底層實作為上一篇提到的 ThreadPoolExecutor\n因 SynchronousQueue 沒容量，因此 newCachedThreadPool 可以根據 task 需求量在 thread pool 中創建多個 thread 直到設定的上限值\n而不受 workQueue 影響\n\n- - -\nBlockingQueue:\nDelayQueue\n\n適用場景:\n延後處理，或者有時間倒數的情況\n如: 某些嚴格的登入系統因安全性考量，當每次登入後可能只有3分鐘時間可處理，等時間超過3分鐘則會自動登出\n\n\n特色:\nqueue 容量為 Integer.MAX_VALUE ， Java doc 上說明為 unbounded \ntask 放入 queue 後需要過一段時間後才可被取出\n假設目前有 t1, t2 兩個 task 需放入 queue\n將 t1 設定5秒後處理後放入 queue ，接著 t2 設定2秒後處理後放入 queue\n拿的時候會先 blocking 等到2秒後先取出 t2 ，若 t2 需處理較長的時間，假設需要10秒\n此時 t1 還在 queue 中，所以可能在10秒後才從 queue 中取出 t1\n反之 t2 若瞬間處理結束，則需 blocking 直到5秒後取出 t1\n\n- - -\nBlockingQueue:\nLinkedTransferQueue\n\n適用場景:\nproducer 壓榨 consumer ，producer 想要在指定時間內或需要 consumer 立即處理，此時 consumer 需要有快速消耗的能力\n如: 追求高併發極限，只要有 task 就立即處理\n\n特色:\n確保 producer 的資料能立即被 consumer 處理\n底層與 SynchronousQueue 一樣都是使用 transfer ，除非超時，否則會一直 blocking\n一般的 BlockingQueue 是 producer 放完資料就結束，除非 queue 滿了才會 blocking\n而 LinkedTransferQueue 需要等 consumer 處理才算結束，不然就 blocking\n","source":"_posts/Java-BlockingQueue-適合應用在哪些場景.md","raw":"---\ntitle: Java BlockingQueue 適合應用在哪些場景\ndate: 2020-01-06 18:03:44\ntags:\n- java\n- thread\n---\nBlockingQueue 適用於緩衝如經典的 producer / consumer 場景\n大多用在多個 thread 之間倆倆需要共享資料時，一個放另一個取，非常方便，通常我用它來取代 wait() 和 notify() 做 thread 通信\n上一篇 ThreadPoolExecutor 第5個參數就是 BlockingQueue 用來存放等待從 thread pool 取得 thread 的 task\n可根據不同的應用場景可搭配適合的 BlockingQueue \n這個主題偏向於應用面的思考，針對不同場景選擇使用 BlockingQueue\n\n- - -\nBlockingQueue:\nArrayBlockingQueue\n\n適用場景:\n在非高併發任務，且可預估出固定處理速率時\n如: 一般的緩衝區\n\n特色:\nqueue 容量固定個數，屬於有 bounded 的類型，滿或空的時候會 blocking\n放入與取出使用同一個 lock ，所以不利於高併發下使用\n\n- - -\nBlockingQueue:\nPriorityBlockingQueue\n\n適用場景:\n當需要優先處理特定任務時，需讓高優先權任務盡快被取出處理，再接著處理次要的任務\n如: 在有階級機制下的搶票系統，可根據階級設定每個人的優先權，讓高優先權的人優先取得票\n\n特色:\nqueue 容量為 Integer.MAX_VALUE – 8 ， Java doc 上說明為 unbounded \n根據 priority 排序，優先級高的會被優先取出處理\n比較特別的是它 add(), offer(), put() 操作都一樣，都是 offer() 操作\n\n- - -\nBlockingQueue:\nLinkedBlockingQueue\n\n適用場景:\n需要高併發情況下使用，但需要評估取出時的消耗率，避免高併發下取出速度趕不上放入速度造成 OutOfMemory\n如: 即時訊息處理\n\n特色:\nqueue 容量可調整， Java doc 上說明為 optionally-bounded ，預設值為 Integer.MAX_VALUE，但一般來說會根據需求設值\n用於高併發，使用讀寫分離，放入使用 putLock 而取出使用 takeLock\n在上一篇 ThreadPoolExecutor 有稍微提到\n且 newFixedThreadPool, newSingleThreadExecutor 都使使用 LinkedBlockingQueue 作為 workQueue\n\n- - -\nBlockingQueue:\nLinkedBlockingDeque\n\n適用場景:\n有雙向需求\n如: real-time 處理任務，在某些危險的情況下需要警急處理終止命令\n\n特色:\n有雙向需求，基本上與 LinkedBlockingQueue 相似\n可以當作極端的 PriorityBlockingQueue ，但只有一般和最高兩種權限\n\n\n- - -\nBlockingQueue:\nSynchronousQueue\n\n場景:\n目前想不到單獨使用的場請，所以需搭配 newCachedThreadPool 使用\nnewCachedThreadPool 適用於在特定情況或時間下會才一瞬間出現大量 task，但在大部分情況下處理量不高\n如: 某些監控系統或感應器，只有在警報發生或瞬間觸發多個動作時需要處理大量 task ，其餘時間皆為正常的處理量\n\n特色:\n它沒有容量，所以 peek() 永遠為空，底層是 transfer 且等待為0秒，放與取只能手把手地快速交換\n目前所知需搭配 newCachedThreadPool 使用，其底層實作為上一篇提到的 ThreadPoolExecutor\n因 SynchronousQueue 沒容量，因此 newCachedThreadPool 可以根據 task 需求量在 thread pool 中創建多個 thread 直到設定的上限值\n而不受 workQueue 影響\n\n- - -\nBlockingQueue:\nDelayQueue\n\n適用場景:\n延後處理，或者有時間倒數的情況\n如: 某些嚴格的登入系統因安全性考量，當每次登入後可能只有3分鐘時間可處理，等時間超過3分鐘則會自動登出\n\n\n特色:\nqueue 容量為 Integer.MAX_VALUE ， Java doc 上說明為 unbounded \ntask 放入 queue 後需要過一段時間後才可被取出\n假設目前有 t1, t2 兩個 task 需放入 queue\n將 t1 設定5秒後處理後放入 queue ，接著 t2 設定2秒後處理後放入 queue\n拿的時候會先 blocking 等到2秒後先取出 t2 ，若 t2 需處理較長的時間，假設需要10秒\n此時 t1 還在 queue 中，所以可能在10秒後才從 queue 中取出 t1\n反之 t2 若瞬間處理結束，則需 blocking 直到5秒後取出 t1\n\n- - -\nBlockingQueue:\nLinkedTransferQueue\n\n適用場景:\nproducer 壓榨 consumer ，producer 想要在指定時間內或需要 consumer 立即處理，此時 consumer 需要有快速消耗的能力\n如: 追求高併發極限，只要有 task 就立即處理\n\n特色:\n確保 producer 的資料能立即被 consumer 處理\n底層與 SynchronousQueue 一樣都是使用 transfer ，除非超時，否則會一直 blocking\n一般的 BlockingQueue 是 producer 放完資料就結束，除非 queue 滿了才會 blocking\n而 LinkedTransferQueue 需要等 consumer 處理才算結束，不然就 blocking\n","slug":"Java-BlockingQueue-適合應用在哪些場景","published":1,"updated":"2020-02-10T00:15:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr50000d0rpjzsl6vp6l","content":"<p>BlockingQueue 適用於緩衝如經典的 producer / consumer 場景<br>大多用在多個 thread 之間倆倆需要共享資料時，一個放另一個取，非常方便，通常我用它來取代 wait() 和 notify() 做 thread 通信<br>上一篇 ThreadPoolExecutor 第5個參數就是 BlockingQueue 用來存放等待從 thread pool 取得 thread 的 task<br>可根據不同的應用場景可搭配適合的 BlockingQueue<br>這個主題偏向於應用面的思考，針對不同場景選擇使用 BlockingQueue</p>\n<hr>\n<p>BlockingQueue:<br>ArrayBlockingQueue</p>\n<p>適用場景:<br>在非高併發任務，且可預估出固定處理速率時<br>如: 一般的緩衝區</p>\n<p>特色:<br>queue 容量固定個數，屬於有 bounded 的類型，滿或空的時候會 blocking<br>放入與取出使用同一個 lock ，所以不利於高併發下使用</p>\n<hr>\n<p>BlockingQueue:<br>PriorityBlockingQueue</p>\n<p>適用場景:<br>當需要優先處理特定任務時，需讓高優先權任務盡快被取出處理，再接著處理次要的任務<br>如: 在有階級機制下的搶票系統，可根據階級設定每個人的優先權，讓高優先權的人優先取得票</p>\n<p>特色:<br>queue 容量為 Integer.MAX_VALUE – 8 ， Java doc 上說明為 unbounded<br>根據 priority 排序，優先級高的會被優先取出處理<br>比較特別的是它 add(), offer(), put() 操作都一樣，都是 offer() 操作</p>\n<hr>\n<p>BlockingQueue:<br>LinkedBlockingQueue</p>\n<p>適用場景:<br>需要高併發情況下使用，但需要評估取出時的消耗率，避免高併發下取出速度趕不上放入速度造成 OutOfMemory<br>如: 即時訊息處理</p>\n<p>特色:<br>queue 容量可調整， Java doc 上說明為 optionally-bounded ，預設值為 Integer.MAX_VALUE，但一般來說會根據需求設值<br>用於高併發，使用讀寫分離，放入使用 putLock 而取出使用 takeLock<br>在上一篇 ThreadPoolExecutor 有稍微提到<br>且 newFixedThreadPool, newSingleThreadExecutor 都使使用 LinkedBlockingQueue 作為 workQueue</p>\n<hr>\n<p>BlockingQueue:<br>LinkedBlockingDeque</p>\n<p>適用場景:<br>有雙向需求<br>如: real-time 處理任務，在某些危險的情況下需要警急處理終止命令</p>\n<p>特色:<br>有雙向需求，基本上與 LinkedBlockingQueue 相似<br>可以當作極端的 PriorityBlockingQueue ，但只有一般和最高兩種權限</p>\n<hr>\n<p>BlockingQueue:<br>SynchronousQueue</p>\n<p>場景:<br>目前想不到單獨使用的場請，所以需搭配 newCachedThreadPool 使用<br>newCachedThreadPool 適用於在特定情況或時間下會才一瞬間出現大量 task，但在大部分情況下處理量不高<br>如: 某些監控系統或感應器，只有在警報發生或瞬間觸發多個動作時需要處理大量 task ，其餘時間皆為正常的處理量</p>\n<p>特色:<br>它沒有容量，所以 peek() 永遠為空，底層是 transfer 且等待為0秒，放與取只能手把手地快速交換<br>目前所知需搭配 newCachedThreadPool 使用，其底層實作為上一篇提到的 ThreadPoolExecutor<br>因 SynchronousQueue 沒容量，因此 newCachedThreadPool 可以根據 task 需求量在 thread pool 中創建多個 thread 直到設定的上限值<br>而不受 workQueue 影響</p>\n<hr>\n<p>BlockingQueue:<br>DelayQueue</p>\n<p>適用場景:<br>延後處理，或者有時間倒數的情況<br>如: 某些嚴格的登入系統因安全性考量，當每次登入後可能只有3分鐘時間可處理，等時間超過3分鐘則會自動登出</p>\n<p>特色:<br>queue 容量為 Integer.MAX_VALUE ， Java doc 上說明為 unbounded<br>task 放入 queue 後需要過一段時間後才可被取出<br>假設目前有 t1, t2 兩個 task 需放入 queue<br>將 t1 設定5秒後處理後放入 queue ，接著 t2 設定2秒後處理後放入 queue<br>拿的時候會先 blocking 等到2秒後先取出 t2 ，若 t2 需處理較長的時間，假設需要10秒<br>此時 t1 還在 queue 中，所以可能在10秒後才從 queue 中取出 t1<br>反之 t2 若瞬間處理結束，則需 blocking 直到5秒後取出 t1</p>\n<hr>\n<p>BlockingQueue:<br>LinkedTransferQueue</p>\n<p>適用場景:<br>producer 壓榨 consumer ，producer 想要在指定時間內或需要 consumer 立即處理，此時 consumer 需要有快速消耗的能力<br>如: 追求高併發極限，只要有 task 就立即處理</p>\n<p>特色:<br>確保 producer 的資料能立即被 consumer 處理<br>底層與 SynchronousQueue 一樣都是使用 transfer ，除非超時，否則會一直 blocking<br>一般的 BlockingQueue 是 producer 放完資料就結束，除非 queue 滿了才會 blocking<br>而 LinkedTransferQueue 需要等 consumer 處理才算結束，不然就 blocking</p>\n","site":{"data":{}},"excerpt":"","more":"<p>BlockingQueue 適用於緩衝如經典的 producer / consumer 場景<br>大多用在多個 thread 之間倆倆需要共享資料時，一個放另一個取，非常方便，通常我用它來取代 wait() 和 notify() 做 thread 通信<br>上一篇 ThreadPoolExecutor 第5個參數就是 BlockingQueue 用來存放等待從 thread pool 取得 thread 的 task<br>可根據不同的應用場景可搭配適合的 BlockingQueue<br>這個主題偏向於應用面的思考，針對不同場景選擇使用 BlockingQueue</p>\n<hr>\n<p>BlockingQueue:<br>ArrayBlockingQueue</p>\n<p>適用場景:<br>在非高併發任務，且可預估出固定處理速率時<br>如: 一般的緩衝區</p>\n<p>特色:<br>queue 容量固定個數，屬於有 bounded 的類型，滿或空的時候會 blocking<br>放入與取出使用同一個 lock ，所以不利於高併發下使用</p>\n<hr>\n<p>BlockingQueue:<br>PriorityBlockingQueue</p>\n<p>適用場景:<br>當需要優先處理特定任務時，需讓高優先權任務盡快被取出處理，再接著處理次要的任務<br>如: 在有階級機制下的搶票系統，可根據階級設定每個人的優先權，讓高優先權的人優先取得票</p>\n<p>特色:<br>queue 容量為 Integer.MAX_VALUE – 8 ， Java doc 上說明為 unbounded<br>根據 priority 排序，優先級高的會被優先取出處理<br>比較特別的是它 add(), offer(), put() 操作都一樣，都是 offer() 操作</p>\n<hr>\n<p>BlockingQueue:<br>LinkedBlockingQueue</p>\n<p>適用場景:<br>需要高併發情況下使用，但需要評估取出時的消耗率，避免高併發下取出速度趕不上放入速度造成 OutOfMemory<br>如: 即時訊息處理</p>\n<p>特色:<br>queue 容量可調整， Java doc 上說明為 optionally-bounded ，預設值為 Integer.MAX_VALUE，但一般來說會根據需求設值<br>用於高併發，使用讀寫分離，放入使用 putLock 而取出使用 takeLock<br>在上一篇 ThreadPoolExecutor 有稍微提到<br>且 newFixedThreadPool, newSingleThreadExecutor 都使使用 LinkedBlockingQueue 作為 workQueue</p>\n<hr>\n<p>BlockingQueue:<br>LinkedBlockingDeque</p>\n<p>適用場景:<br>有雙向需求<br>如: real-time 處理任務，在某些危險的情況下需要警急處理終止命令</p>\n<p>特色:<br>有雙向需求，基本上與 LinkedBlockingQueue 相似<br>可以當作極端的 PriorityBlockingQueue ，但只有一般和最高兩種權限</p>\n<hr>\n<p>BlockingQueue:<br>SynchronousQueue</p>\n<p>場景:<br>目前想不到單獨使用的場請，所以需搭配 newCachedThreadPool 使用<br>newCachedThreadPool 適用於在特定情況或時間下會才一瞬間出現大量 task，但在大部分情況下處理量不高<br>如: 某些監控系統或感應器，只有在警報發生或瞬間觸發多個動作時需要處理大量 task ，其餘時間皆為正常的處理量</p>\n<p>特色:<br>它沒有容量，所以 peek() 永遠為空，底層是 transfer 且等待為0秒，放與取只能手把手地快速交換<br>目前所知需搭配 newCachedThreadPool 使用，其底層實作為上一篇提到的 ThreadPoolExecutor<br>因 SynchronousQueue 沒容量，因此 newCachedThreadPool 可以根據 task 需求量在 thread pool 中創建多個 thread 直到設定的上限值<br>而不受 workQueue 影響</p>\n<hr>\n<p>BlockingQueue:<br>DelayQueue</p>\n<p>適用場景:<br>延後處理，或者有時間倒數的情況<br>如: 某些嚴格的登入系統因安全性考量，當每次登入後可能只有3分鐘時間可處理，等時間超過3分鐘則會自動登出</p>\n<p>特色:<br>queue 容量為 Integer.MAX_VALUE ， Java doc 上說明為 unbounded<br>task 放入 queue 後需要過一段時間後才可被取出<br>假設目前有 t1, t2 兩個 task 需放入 queue<br>將 t1 設定5秒後處理後放入 queue ，接著 t2 設定2秒後處理後放入 queue<br>拿的時候會先 blocking 等到2秒後先取出 t2 ，若 t2 需處理較長的時間，假設需要10秒<br>此時 t1 還在 queue 中，所以可能在10秒後才從 queue 中取出 t1<br>反之 t2 若瞬間處理結束，則需 blocking 直到5秒後取出 t1</p>\n<hr>\n<p>BlockingQueue:<br>LinkedTransferQueue</p>\n<p>適用場景:<br>producer 壓榨 consumer ，producer 想要在指定時間內或需要 consumer 立即處理，此時 consumer 需要有快速消耗的能力<br>如: 追求高併發極限，只要有 task 就立即處理</p>\n<p>特色:<br>確保 producer 的資料能立即被 consumer 處理<br>底層與 SynchronousQueue 一樣都是使用 transfer ，除非超時，否則會一直 blocking<br>一般的 BlockingQueue 是 producer 放完資料就結束，除非 queue 滿了才會 blocking<br>而 LinkedTransferQueue 需要等 consumer 處理才算結束，不然就 blocking</p>\n"},{"title":"Java ReentrantLock 和 ReentrantReadWriteLock 的使用時機","date":"2020-01-04T06:25:47.000Z","_content":"在實際工作中我大多使用 ReentrantReadWriteLock 因為遇到的使用情景都是讀取的需求遠大於寫入\n所以除非某些場景需要使用 synchronized 為了更好的效能可能會用 ReentrantLock 取代\nsynchronized 是 JVM 層級的同步鎖，底層機制鎖死整個區塊，而 Lock 類的是使用 java.util.concurrent 下實現的 lib\n而且可以綁定多個 condition 可以喚醒特定的 thread (thread.signal())，不像 synchronized 只能一次喚醒全部或者隨機一個，彈性上強上許多\n\n如果用一句話解釋 ReentrantLock 和 ReentrantReadWriteLock 兩者的差別就是\nReentrantLock: One thread at a time.\nReentrantReadWriteLock: One writer thread at a time or multiple reader threads at a time.\n它們分別 implement Lock 和 ReadWriteLock\nReadWriteLock其實就是基於 Lock 上作讀寫分離\n```java\npublic interface ReadWriteLock {\n    Lock readLock();\n    Lock writeLock();\n}\n```\n- - -\n先聊 ReentrantLock\n在正常使用下只需針對存取變數block包覆\n```java\nprivate static ReentrantLock lock = new ReentrantLock();\n\nprivate static void accessResource() {\n    lock.lock();\n    try {\n        //access the resource\n    } finally {\n        lock.unlock();\n    }\n}\n```\nReentrantLock 如字面上的意思他是所以可以重入(會計算重入次數，離開時遞減次數)，但 lock 和 unlock 必須成對出現\n但在一般情況下是不會使用兩層 lock ，主要是針對不同 method 之間有交互引用時，存取共享變數資料時好用\n```java\nprivate static ReentrantLock lock = new ReentrantLock();\n\nprivate static void accessResource() {\n    lock.lock();\n    lock.lock();\n    try {\n        //access the resource\n    } finally {\n        lock.unlock();\n        lock.unlock();\n    }\n}\n```\n還有它初始化時可以設置公平鎖和非公平鎖\n```java\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\nFairSync: multi-thread 按照申請鎖的順序來獲取鎖，類似排隊，先來後到\nNonfairSync: 獲取鎖的順序並不是按照申請鎖的順序，可能後申請的 thread 比先申請的優先權高，在高併發的情況下，可能造成優先級別反轉或者飢餓現象(長時間都拿不到cpu執行權限)\n- - -\n接著來談 ReentrantReadWriteLock\n簡單的說它與 ReentrantLock 最大的不同在於 readLock 可以放多個讀取操作進入，而且 readLock 與 writeLock 是互斥的\n為了更容易了解，就簡單畫個圖來說明，這裡的 t 表示 thread\n<img src=\"/images/reentrant-read-write-lock-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n當 t1 取得鎖在執行寫入操作時(writeLock)，後面有3個thread進入等待\n此時 t1 執行完畢後，接著執行 readLock ，允許多個 read 操作進入(same read lock)，所以 t2 和 t4 也進入讀取變數\nt5 進入等待區，t5 雖然也是讀取操作，但沒有與 t2 和 t4 一樣進入區間，因為在 t2 和 t4進入後 read 操作的 thread 等待個數為 0 所以下次需讓給 write lock\nt2 和 t4 讀取結束，放 t3 進入，因為 t3 為寫操作，所以只能是自已進入作寫入(single thread)\n\nJava中的ReentrantReadWriteLock使用一個 int 作為鎖的計數\nsharedCount() 共享鎖(高位元16)，用於 readLock ，允許多個 read thread\nexclusiveCount() 獨佔鎖(低位元16)，用於 writeLock ，只允許一個 write thread\n\n有時候為了確保讀寫互斥安全性會做鎖降級或鎖升級\n鎖降級: 在 writeLock 沒有釋放的時候，獲取 readLock，再釋放 writeLock\n鎖升級: 在 readLock 沒有釋放的時候，獲取 writeLock，再釋放 readLock\n這裡示範鎖降級，利用讀寫互斥在 writeLock.unlock() 前面卡 readLock.lock()，避免被其他 write thread 搶佔cpu更新變數，保證一次性的 atomic 操作\n```java\nprivate ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\nprivate ReentrantReadWriteLock.ReadLock readLock = lock.readLock();\nprivate ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();\n\nprivate volatile boolean isUpdate;\n\npublic void readWriteResource(){\n    readLock.lock();\n    if(isUpdate){\n        readLock.unlock();\n        writeLock.lock();\n        //write the resource\n        readLock.lock();\n        writeLock.unlock();\n    }\n    //read the resource\n    readLock.lock();\n}\n```\n這裡需注意 isUpdate 需要設置 volatile 讓全部 thread 可見 flag 變化\n- - -\n結論\n1. ReentrantLock 可作為 synchronized 的替代品，需使用公平鎖機制時使用\n2. ReentrantReadWriteLock 用於讀取遠大於寫入的場景，\n\n目前先寫到這，其他等以後想到其他再補充吧...\n","source":"_posts/Java-ReentrantLock-和-ReentrantReadWriteLock-的使用時機.md","raw":"---\ntitle: Java ReentrantLock 和 ReentrantReadWriteLock 的使用時機\ndate: 2020-01-04 14:25:47\ntags:\n- java\n- thread\n---\n在實際工作中我大多使用 ReentrantReadWriteLock 因為遇到的使用情景都是讀取的需求遠大於寫入\n所以除非某些場景需要使用 synchronized 為了更好的效能可能會用 ReentrantLock 取代\nsynchronized 是 JVM 層級的同步鎖，底層機制鎖死整個區塊，而 Lock 類的是使用 java.util.concurrent 下實現的 lib\n而且可以綁定多個 condition 可以喚醒特定的 thread (thread.signal())，不像 synchronized 只能一次喚醒全部或者隨機一個，彈性上強上許多\n\n如果用一句話解釋 ReentrantLock 和 ReentrantReadWriteLock 兩者的差別就是\nReentrantLock: One thread at a time.\nReentrantReadWriteLock: One writer thread at a time or multiple reader threads at a time.\n它們分別 implement Lock 和 ReadWriteLock\nReadWriteLock其實就是基於 Lock 上作讀寫分離\n```java\npublic interface ReadWriteLock {\n    Lock readLock();\n    Lock writeLock();\n}\n```\n- - -\n先聊 ReentrantLock\n在正常使用下只需針對存取變數block包覆\n```java\nprivate static ReentrantLock lock = new ReentrantLock();\n\nprivate static void accessResource() {\n    lock.lock();\n    try {\n        //access the resource\n    } finally {\n        lock.unlock();\n    }\n}\n```\nReentrantLock 如字面上的意思他是所以可以重入(會計算重入次數，離開時遞減次數)，但 lock 和 unlock 必須成對出現\n但在一般情況下是不會使用兩層 lock ，主要是針對不同 method 之間有交互引用時，存取共享變數資料時好用\n```java\nprivate static ReentrantLock lock = new ReentrantLock();\n\nprivate static void accessResource() {\n    lock.lock();\n    lock.lock();\n    try {\n        //access the resource\n    } finally {\n        lock.unlock();\n        lock.unlock();\n    }\n}\n```\n還有它初始化時可以設置公平鎖和非公平鎖\n```java\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\nFairSync: multi-thread 按照申請鎖的順序來獲取鎖，類似排隊，先來後到\nNonfairSync: 獲取鎖的順序並不是按照申請鎖的順序，可能後申請的 thread 比先申請的優先權高，在高併發的情況下，可能造成優先級別反轉或者飢餓現象(長時間都拿不到cpu執行權限)\n- - -\n接著來談 ReentrantReadWriteLock\n簡單的說它與 ReentrantLock 最大的不同在於 readLock 可以放多個讀取操作進入，而且 readLock 與 writeLock 是互斥的\n為了更容易了解，就簡單畫個圖來說明，這裡的 t 表示 thread\n<img src=\"/images/reentrant-read-write-lock-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n當 t1 取得鎖在執行寫入操作時(writeLock)，後面有3個thread進入等待\n此時 t1 執行完畢後，接著執行 readLock ，允許多個 read 操作進入(same read lock)，所以 t2 和 t4 也進入讀取變數\nt5 進入等待區，t5 雖然也是讀取操作，但沒有與 t2 和 t4 一樣進入區間，因為在 t2 和 t4進入後 read 操作的 thread 等待個數為 0 所以下次需讓給 write lock\nt2 和 t4 讀取結束，放 t3 進入，因為 t3 為寫操作，所以只能是自已進入作寫入(single thread)\n\nJava中的ReentrantReadWriteLock使用一個 int 作為鎖的計數\nsharedCount() 共享鎖(高位元16)，用於 readLock ，允許多個 read thread\nexclusiveCount() 獨佔鎖(低位元16)，用於 writeLock ，只允許一個 write thread\n\n有時候為了確保讀寫互斥安全性會做鎖降級或鎖升級\n鎖降級: 在 writeLock 沒有釋放的時候，獲取 readLock，再釋放 writeLock\n鎖升級: 在 readLock 沒有釋放的時候，獲取 writeLock，再釋放 readLock\n這裡示範鎖降級，利用讀寫互斥在 writeLock.unlock() 前面卡 readLock.lock()，避免被其他 write thread 搶佔cpu更新變數，保證一次性的 atomic 操作\n```java\nprivate ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\nprivate ReentrantReadWriteLock.ReadLock readLock = lock.readLock();\nprivate ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();\n\nprivate volatile boolean isUpdate;\n\npublic void readWriteResource(){\n    readLock.lock();\n    if(isUpdate){\n        readLock.unlock();\n        writeLock.lock();\n        //write the resource\n        readLock.lock();\n        writeLock.unlock();\n    }\n    //read the resource\n    readLock.lock();\n}\n```\n這裡需注意 isUpdate 需要設置 volatile 讓全部 thread 可見 flag 變化\n- - -\n結論\n1. ReentrantLock 可作為 synchronized 的替代品，需使用公平鎖機制時使用\n2. ReentrantReadWriteLock 用於讀取遠大於寫入的場景，\n\n目前先寫到這，其他等以後想到其他再補充吧...\n","slug":"Java-ReentrantLock-和-ReentrantReadWriteLock-的使用時機","published":1,"updated":"2020-01-05T11:10:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr51000e0rpj4xwh1qem","content":"<p>在實際工作中我大多使用 ReentrantReadWriteLock 因為遇到的使用情景都是讀取的需求遠大於寫入<br>所以除非某些場景需要使用 synchronized 為了更好的效能可能會用 ReentrantLock 取代<br>synchronized 是 JVM 層級的同步鎖，底層機制鎖死整個區塊，而 Lock 類的是使用 java.util.concurrent 下實現的 lib<br>而且可以綁定多個 condition 可以喚醒特定的 thread (thread.signal())，不像 synchronized 只能一次喚醒全部或者隨機一個，彈性上強上許多</p>\n<p>如果用一句話解釋 ReentrantLock 和 ReentrantReadWriteLock 兩者的差別就是<br>ReentrantLock: One thread at a time.<br>ReentrantReadWriteLock: One writer thread at a time or multiple reader threads at a time.<br>它們分別 implement Lock 和 ReadWriteLock<br>ReadWriteLock其實就是基於 Lock 上作讀寫分離<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReadWriteLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Lock <span class=\"title\">readLock</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Lock <span class=\"title\">writeLock</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>先聊 ReentrantLock<br>在正常使用下只需針對存取變數block包覆<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessResource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//access the resource</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ReentrantLock 如字面上的意思他是所以可以重入(會計算重入次數，離開時遞減次數)，但 lock 和 unlock 必須成對出現<br>但在一般情況下是不會使用兩層 lock ，主要是針對不同 method 之間有交互引用時，存取共享變數資料時好用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessResource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//access the resource</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>還有它初始化時可以設置公平鎖和非公平鎖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>FairSync: multi-thread 按照申請鎖的順序來獲取鎖，類似排隊，先來後到<br>NonfairSync: 獲取鎖的順序並不是按照申請鎖的順序，可能後申請的 thread 比先申請的優先權高，在高併發的情況下，可能造成優先級別反轉或者飢餓現象(長時間都拿不到cpu執行權限)</p>\n<hr>\n<p>接著來談 ReentrantReadWriteLock<br>簡單的說它與 ReentrantLock 最大的不同在於 readLock 可以放多個讀取操作進入，而且 readLock 與 writeLock 是互斥的<br>為了更容易了解，就簡單畫個圖來說明，這裡的 t 表示 thread<br><img src=\"/images/reentrant-read-write-lock-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"><br>當 t1 取得鎖在執行寫入操作時(writeLock)，後面有3個thread進入等待<br>此時 t1 執行完畢後，接著執行 readLock ，允許多個 read 操作進入(same read lock)，所以 t2 和 t4 也進入讀取變數<br>t5 進入等待區，t5 雖然也是讀取操作，但沒有與 t2 和 t4 一樣進入區間，因為在 t2 和 t4進入後 read 操作的 thread 等待個數為 0 所以下次需讓給 write lock<br>t2 和 t4 讀取結束，放 t3 進入，因為 t3 為寫操作，所以只能是自已進入作寫入(single thread)</p>\n<p>Java中的ReentrantReadWriteLock使用一個 int 作為鎖的計數<br>sharedCount() 共享鎖(高位元16)，用於 readLock ，允許多個 read thread<br>exclusiveCount() 獨佔鎖(低位元16)，用於 writeLock ，只允許一個 write thread</p>\n<p>有時候為了確保讀寫互斥安全性會做鎖降級或鎖升級<br>鎖降級: 在 writeLock 沒有釋放的時候，獲取 readLock，再釋放 writeLock<br>鎖升級: 在 readLock 沒有釋放的時候，獲取 writeLock，再釋放 readLock<br>這裡示範鎖降級，利用讀寫互斥在 writeLock.unlock() 前面卡 readLock.lock()，避免被其他 write thread 搶佔cpu更新變數，保證一次性的 atomic 操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\"><span class=\"keyword\">private</span> ReentrantReadWriteLock.ReadLock readLock = lock.readLock();</span><br><span class=\"line\"><span class=\"keyword\">private</span> ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> isUpdate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readWriteResource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    readLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isUpdate)&#123;</span><br><span class=\"line\">        readLock.unlock();</span><br><span class=\"line\">        writeLock.lock();</span><br><span class=\"line\">        <span class=\"comment\">//write the resource</span></span><br><span class=\"line\">        readLock.lock();</span><br><span class=\"line\">        writeLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//read the resource</span></span><br><span class=\"line\">    readLock.lock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>這裡需注意 isUpdate 需要設置 volatile 讓全部 thread 可見 flag 變化</p>\n<hr>\n<p>結論</p>\n<ol>\n<li>ReentrantLock 可作為 synchronized 的替代品，需使用公平鎖機制時使用</li>\n<li>ReentrantReadWriteLock 用於讀取遠大於寫入的場景，</li>\n</ol>\n<p>目前先寫到這，其他等以後想到其他再補充吧…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在實際工作中我大多使用 ReentrantReadWriteLock 因為遇到的使用情景都是讀取的需求遠大於寫入<br>所以除非某些場景需要使用 synchronized 為了更好的效能可能會用 ReentrantLock 取代<br>synchronized 是 JVM 層級的同步鎖，底層機制鎖死整個區塊，而 Lock 類的是使用 java.util.concurrent 下實現的 lib<br>而且可以綁定多個 condition 可以喚醒特定的 thread (thread.signal())，不像 synchronized 只能一次喚醒全部或者隨機一個，彈性上強上許多</p>\n<p>如果用一句話解釋 ReentrantLock 和 ReentrantReadWriteLock 兩者的差別就是<br>ReentrantLock: One thread at a time.<br>ReentrantReadWriteLock: One writer thread at a time or multiple reader threads at a time.<br>它們分別 implement Lock 和 ReadWriteLock<br>ReadWriteLock其實就是基於 Lock 上作讀寫分離<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReadWriteLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Lock <span class=\"title\">readLock</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Lock <span class=\"title\">writeLock</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>先聊 ReentrantLock<br>在正常使用下只需針對存取變數block包覆<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessResource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//access the resource</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ReentrantLock 如字面上的意思他是所以可以重入(會計算重入次數，離開時遞減次數)，但 lock 和 unlock 必須成對出現<br>但在一般情況下是不會使用兩層 lock ，主要是針對不同 method 之間有交互引用時，存取共享變數資料時好用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">accessResource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//access the resource</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>還有它初始化時可以設置公平鎖和非公平鎖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>FairSync: multi-thread 按照申請鎖的順序來獲取鎖，類似排隊，先來後到<br>NonfairSync: 獲取鎖的順序並不是按照申請鎖的順序，可能後申請的 thread 比先申請的優先權高，在高併發的情況下，可能造成優先級別反轉或者飢餓現象(長時間都拿不到cpu執行權限)</p>\n<hr>\n<p>接著來談 ReentrantReadWriteLock<br>簡單的說它與 ReentrantLock 最大的不同在於 readLock 可以放多個讀取操作進入，而且 readLock 與 writeLock 是互斥的<br>為了更容易了解，就簡單畫個圖來說明，這裡的 t 表示 thread<br><img src=\"/images/reentrant-read-write-lock-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"><br>當 t1 取得鎖在執行寫入操作時(writeLock)，後面有3個thread進入等待<br>此時 t1 執行完畢後，接著執行 readLock ，允許多個 read 操作進入(same read lock)，所以 t2 和 t4 也進入讀取變數<br>t5 進入等待區，t5 雖然也是讀取操作，但沒有與 t2 和 t4 一樣進入區間，因為在 t2 和 t4進入後 read 操作的 thread 等待個數為 0 所以下次需讓給 write lock<br>t2 和 t4 讀取結束，放 t3 進入，因為 t3 為寫操作，所以只能是自已進入作寫入(single thread)</p>\n<p>Java中的ReentrantReadWriteLock使用一個 int 作為鎖的計數<br>sharedCount() 共享鎖(高位元16)，用於 readLock ，允許多個 read thread<br>exclusiveCount() 獨佔鎖(低位元16)，用於 writeLock ，只允許一個 write thread</p>\n<p>有時候為了確保讀寫互斥安全性會做鎖降級或鎖升級<br>鎖降級: 在 writeLock 沒有釋放的時候，獲取 readLock，再釋放 writeLock<br>鎖升級: 在 readLock 沒有釋放的時候，獲取 writeLock，再釋放 readLock<br>這裡示範鎖降級，利用讀寫互斥在 writeLock.unlock() 前面卡 readLock.lock()，避免被其他 write thread 搶佔cpu更新變數，保證一次性的 atomic 操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\"><span class=\"keyword\">private</span> ReentrantReadWriteLock.ReadLock readLock = lock.readLock();</span><br><span class=\"line\"><span class=\"keyword\">private</span> ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> isUpdate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readWriteResource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    readLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isUpdate)&#123;</span><br><span class=\"line\">        readLock.unlock();</span><br><span class=\"line\">        writeLock.lock();</span><br><span class=\"line\">        <span class=\"comment\">//write the resource</span></span><br><span class=\"line\">        readLock.lock();</span><br><span class=\"line\">        writeLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//read the resource</span></span><br><span class=\"line\">    readLock.lock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>這裡需注意 isUpdate 需要設置 volatile 讓全部 thread 可見 flag 變化</p>\n<hr>\n<p>結論</p>\n<ol>\n<li>ReentrantLock 可作為 synchronized 的替代品，需使用公平鎖機制時使用</li>\n<li>ReentrantReadWriteLock 用於讀取遠大於寫入的場景，</li>\n</ol>\n<p>目前先寫到這，其他等以後想到其他再補充吧…</p>\n"},{"title":"Java volatile 的使用時機","date":"2020-01-03T10:35:13.000Z","_content":"最近重頭複習 java multi-thread 的相關知識，紀錄下來方便自己往後開發時可參照\n今天來談 volatile 它可以當成一個輕量的鎖\n我通常使用它來控制 multi-thread 共享變數，用來通知多個 thread 任務完成後正常離開\n但它不能用於 java 計數，如 `count++`, `index--` 之類的操作，這些動作看起來是一步，但實際上卻是三步\n1. iload_1\n2. iinc 1, 1\n3. istore_1\n若在執行期間 1 ~ 3 不能一氣呵成的執行完畢，中間被其他 thread 打斷後操作同個變數，其結果可能會與預期中的不同\n因為它不保證 atomic ，若有計數的需求需使用 AtomicInteger, AtomicReference, AtomicStampedReference 之類的 lib 來實現\n\n在使用 volatile 之前要先了解 java thread 使用記憶體的情況\n在 process 有宣告變數時主記憶體會提供空間存放變數資料 (這裡的 process 不是指 main() 因為 main() 一樣是 thread ，由 JVM 運行時創建)\n但是在多個 thread 使用宣告的共享變數時，記憶體一樣會有一份共享變數資料\n不同的是多個 thread 並不是直接共用此份共享變數資料\n而是各自從共享變數 copy 一份變數資料到各自的 thread 中 ( cache )\n當 thread 更新變數資料時，首先是改變自己內部的資料後再寫回記憶體中的那份共享變數\n所以若是其他 thread 沒有從記憶體內的共享變數重新更新最資料回自己的 thread 時\n會造成資料不一致的後果\n\n那為什麼其他 thread 不更新自己變數資料呢?\n這是 Java 為了性能優化而做的預設的行為\n因為其他 thread 可能只有做讀取的操作，所以 Java 認為不需要再從主記憶體重新拿資料\n不知道已經有 thread 已經更新變數內容\n\n為了避免 thread 共享變數資料不一致得問題發生 volatile 就派上用場了\nvolatile 可以強迫 thread 更新資料回記憶體共享變數資料後並通知前他 thread 更新它們內部的資料\n來保證資料的可見性\n前面有說過 volatile 並不可用於計數相關的處理，因為它並不是真的鎖住整個物件\n所以不保證只有一個 thread 可進入後單獨更新變數，因此當此 thread 可能在數值更新時並未 assign 回變數時\n就被其他 thread 取得 cpu 控制權，並 assign 同筆資料時造成互蓋的問題\n\n之前有做過實驗使用 10 個 thread 並將共享變數宣告為 volatile 從0一路增加到1000\n在預期的情況下 10 * 1000 會是 10000 ，但在實際運行多次的情況下沒有一次得到10000\n通常數值落在 7000 ~ 9000 多，就是高併發快速交錯運行下互蓋資料的後果\n\n結論\n1. volatile 可確保資料可見性，一個 thread 更新變數，其他 thread 也會重新更新內部變數\n2. volatile 不保證 atomic，不可用於計數操作\n","source":"_posts/Java-volatile-的使用時機.md","raw":"---\ntitle: Java volatile 的使用時機\ndate: 2020-01-03 18:35:13\ntags:\n- java\n- thread\n---\n最近重頭複習 java multi-thread 的相關知識，紀錄下來方便自己往後開發時可參照\n今天來談 volatile 它可以當成一個輕量的鎖\n我通常使用它來控制 multi-thread 共享變數，用來通知多個 thread 任務完成後正常離開\n但它不能用於 java 計數，如 `count++`, `index--` 之類的操作，這些動作看起來是一步，但實際上卻是三步\n1. iload_1\n2. iinc 1, 1\n3. istore_1\n若在執行期間 1 ~ 3 不能一氣呵成的執行完畢，中間被其他 thread 打斷後操作同個變數，其結果可能會與預期中的不同\n因為它不保證 atomic ，若有計數的需求需使用 AtomicInteger, AtomicReference, AtomicStampedReference 之類的 lib 來實現\n\n在使用 volatile 之前要先了解 java thread 使用記憶體的情況\n在 process 有宣告變數時主記憶體會提供空間存放變數資料 (這裡的 process 不是指 main() 因為 main() 一樣是 thread ，由 JVM 運行時創建)\n但是在多個 thread 使用宣告的共享變數時，記憶體一樣會有一份共享變數資料\n不同的是多個 thread 並不是直接共用此份共享變數資料\n而是各自從共享變數 copy 一份變數資料到各自的 thread 中 ( cache )\n當 thread 更新變數資料時，首先是改變自己內部的資料後再寫回記憶體中的那份共享變數\n所以若是其他 thread 沒有從記憶體內的共享變數重新更新最資料回自己的 thread 時\n會造成資料不一致的後果\n\n那為什麼其他 thread 不更新自己變數資料呢?\n這是 Java 為了性能優化而做的預設的行為\n因為其他 thread 可能只有做讀取的操作，所以 Java 認為不需要再從主記憶體重新拿資料\n不知道已經有 thread 已經更新變數內容\n\n為了避免 thread 共享變數資料不一致得問題發生 volatile 就派上用場了\nvolatile 可以強迫 thread 更新資料回記憶體共享變數資料後並通知前他 thread 更新它們內部的資料\n來保證資料的可見性\n前面有說過 volatile 並不可用於計數相關的處理，因為它並不是真的鎖住整個物件\n所以不保證只有一個 thread 可進入後單獨更新變數，因此當此 thread 可能在數值更新時並未 assign 回變數時\n就被其他 thread 取得 cpu 控制權，並 assign 同筆資料時造成互蓋的問題\n\n之前有做過實驗使用 10 個 thread 並將共享變數宣告為 volatile 從0一路增加到1000\n在預期的情況下 10 * 1000 會是 10000 ，但在實際運行多次的情況下沒有一次得到10000\n通常數值落在 7000 ~ 9000 多，就是高併發快速交錯運行下互蓋資料的後果\n\n結論\n1. volatile 可確保資料可見性，一個 thread 更新變數，其他 thread 也會重新更新內部變數\n2. volatile 不保證 atomic，不可用於計數操作\n","slug":"Java-volatile-的使用時機","published":1,"updated":"2020-01-21T16:56:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr52000g0rpjnh8zigp2","content":"<p>最近重頭複習 java multi-thread 的相關知識，紀錄下來方便自己往後開發時可參照<br>今天來談 volatile 它可以當成一個輕量的鎖<br>我通常使用它來控制 multi-thread 共享變數，用來通知多個 thread 任務完成後正常離開<br>但它不能用於 java 計數，如 <code>count++</code>, <code>index--</code> 之類的操作，這些動作看起來是一步，但實際上卻是三步</p>\n<ol>\n<li>iload_1</li>\n<li>iinc 1, 1</li>\n<li>istore_1<br>若在執行期間 1 ~ 3 不能一氣呵成的執行完畢，中間被其他 thread 打斷後操作同個變數，其結果可能會與預期中的不同<br>因為它不保證 atomic ，若有計數的需求需使用 AtomicInteger, AtomicReference, AtomicStampedReference 之類的 lib 來實現</li>\n</ol>\n<p>在使用 volatile 之前要先了解 java thread 使用記憶體的情況<br>在 process 有宣告變數時主記憶體會提供空間存放變數資料 (這裡的 process 不是指 main() 因為 main() 一樣是 thread ，由 JVM 運行時創建)<br>但是在多個 thread 使用宣告的共享變數時，記憶體一樣會有一份共享變數資料<br>不同的是多個 thread 並不是直接共用此份共享變數資料<br>而是各自從共享變數 copy 一份變數資料到各自的 thread 中 ( cache )<br>當 thread 更新變數資料時，首先是改變自己內部的資料後再寫回記憶體中的那份共享變數<br>所以若是其他 thread 沒有從記憶體內的共享變數重新更新最資料回自己的 thread 時<br>會造成資料不一致的後果</p>\n<p>那為什麼其他 thread 不更新自己變數資料呢?<br>這是 Java 為了性能優化而做的預設的行為<br>因為其他 thread 可能只有做讀取的操作，所以 Java 認為不需要再從主記憶體重新拿資料<br>不知道已經有 thread 已經更新變數內容</p>\n<p>為了避免 thread 共享變數資料不一致得問題發生 volatile 就派上用場了<br>volatile 可以強迫 thread 更新資料回記憶體共享變數資料後並通知前他 thread 更新它們內部的資料<br>來保證資料的可見性<br>前面有說過 volatile 並不可用於計數相關的處理，因為它並不是真的鎖住整個物件<br>所以不保證只有一個 thread 可進入後單獨更新變數，因此當此 thread 可能在數值更新時並未 assign 回變數時<br>就被其他 thread 取得 cpu 控制權，並 assign 同筆資料時造成互蓋的問題</p>\n<p>之前有做過實驗使用 10 個 thread 並將共享變數宣告為 volatile 從0一路增加到1000<br>在預期的情況下 10 * 1000 會是 10000 ，但在實際運行多次的情況下沒有一次得到10000<br>通常數值落在 7000 ~ 9000 多，就是高併發快速交錯運行下互蓋資料的後果</p>\n<p>結論</p>\n<ol>\n<li>volatile 可確保資料可見性，一個 thread 更新變數，其他 thread 也會重新更新內部變數</li>\n<li>volatile 不保證 atomic，不可用於計數操作</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近重頭複習 java multi-thread 的相關知識，紀錄下來方便自己往後開發時可參照<br>今天來談 volatile 它可以當成一個輕量的鎖<br>我通常使用它來控制 multi-thread 共享變數，用來通知多個 thread 任務完成後正常離開<br>但它不能用於 java 計數，如 <code>count++</code>, <code>index--</code> 之類的操作，這些動作看起來是一步，但實際上卻是三步</p>\n<ol>\n<li>iload_1</li>\n<li>iinc 1, 1</li>\n<li>istore_1<br>若在執行期間 1 ~ 3 不能一氣呵成的執行完畢，中間被其他 thread 打斷後操作同個變數，其結果可能會與預期中的不同<br>因為它不保證 atomic ，若有計數的需求需使用 AtomicInteger, AtomicReference, AtomicStampedReference 之類的 lib 來實現</li>\n</ol>\n<p>在使用 volatile 之前要先了解 java thread 使用記憶體的情況<br>在 process 有宣告變數時主記憶體會提供空間存放變數資料 (這裡的 process 不是指 main() 因為 main() 一樣是 thread ，由 JVM 運行時創建)<br>但是在多個 thread 使用宣告的共享變數時，記憶體一樣會有一份共享變數資料<br>不同的是多個 thread 並不是直接共用此份共享變數資料<br>而是各自從共享變數 copy 一份變數資料到各自的 thread 中 ( cache )<br>當 thread 更新變數資料時，首先是改變自己內部的資料後再寫回記憶體中的那份共享變數<br>所以若是其他 thread 沒有從記憶體內的共享變數重新更新最資料回自己的 thread 時<br>會造成資料不一致的後果</p>\n<p>那為什麼其他 thread 不更新自己變數資料呢?<br>這是 Java 為了性能優化而做的預設的行為<br>因為其他 thread 可能只有做讀取的操作，所以 Java 認為不需要再從主記憶體重新拿資料<br>不知道已經有 thread 已經更新變數內容</p>\n<p>為了避免 thread 共享變數資料不一致得問題發生 volatile 就派上用場了<br>volatile 可以強迫 thread 更新資料回記憶體共享變數資料後並通知前他 thread 更新它們內部的資料<br>來保證資料的可見性<br>前面有說過 volatile 並不可用於計數相關的處理，因為它並不是真的鎖住整個物件<br>所以不保證只有一個 thread 可進入後單獨更新變數，因此當此 thread 可能在數值更新時並未 assign 回變數時<br>就被其他 thread 取得 cpu 控制權，並 assign 同筆資料時造成互蓋的問題</p>\n<p>之前有做過實驗使用 10 個 thread 並將共享變數宣告為 volatile 從0一路增加到1000<br>在預期的情況下 10 * 1000 會是 10000 ，但在實際運行多次的情況下沒有一次得到10000<br>通常數值落在 7000 ~ 9000 多，就是高併發快速交錯運行下互蓋資料的後果</p>\n<p>結論</p>\n<ol>\n<li>volatile 可確保資料可見性，一個 thread 更新變數，其他 thread 也會重新更新內部變數</li>\n<li>volatile 不保證 atomic，不可用於計數操作</li>\n</ol>\n"},{"title":"Java Unit Test 使用 Mockito + Powermock (3)","date":"2020-08-29T06:37:28.000Z","_content":"離上一篇文已經間隔兩個月，今天終於有些動力來補充 Unit Test\n今天要聊的是 ArgumentCaptor\n\n在許多的情況下，我們只 assert 最終的結果 (Output)\n但在整個測試的過程中有參數經過不同 method 傳遞，一不小心或粗心可能在某一層變更到數值\n導致錯誤的輸入 (Input) 往下傳遞，而這個錯誤有可能不會影響最終的結果\n就像一顆未爆彈潛伏在程式內，很難在短時間內發現...但未來可能在某個版本上爆發\n\n所以我們要避免掉這個問題，會在比較重要的節點上\n先驗證此時傳入到 method 的參數與我們預期的相符合\n\nArgumentCaptor 可以幫助我們取得執行過程中所傳遞的參數\n它的用法很簡單，只需要定義與輸入參數相同類型\n之後在 `verify(...).callMethod(captor.capture())` 的時候，放入目標 method 中\n就可以取得當下傳入的參數值，接下來就可以針對輸入內容進行 assert \n\n```java\nArgumentCaptor<Object> captor = ArgumentCaptor.forClass(Object.class);\n\n...\n\nMockito.verify(...).callMethod(captor.capture());\nArgument actual = captor.getValue();\nassertThat(expected, actual)\n```\n---\n在此使用之前做的 WebController 進行修改\n先在 WebDao 增加 `updateData` 的 method 傳入 Data\n\n```java\npublic class WebDao {\n    \n    ...\n    \n    public Optional<Data> updateData(Data data) throws DatabaseException {\n        throw new DatabaseException();\n    }\n}\n```\n之後我們就可以在測試期間，使用 ArgumentCaptor 來取得當時傳入的資料\n\n---\nWebController 也要增加一個 `update()` 讓我們進行更新資料的操作\n\n```java\npublic class WebController {\n\n    ...\n    \n    public String update(HttpServletRequest request){\n        int id = Integer.parseInt(request.getParameter(\"id\"));\n        String col1 = request.getParameter(\"col1\");\n        String col2 = request.getParameter(\"col2\");\n        Optional<Data> data;\n        try {\n            data = webDao.updateData(new Data(id, col1, col2));\n        } catch (DatabaseException e) {\n            return e.getMessage();\n        }\n        return GSON.toJson(data.get());\n    }\n}\n```\n---\n最後在 WebControllerTest 新增一個測試，用於測試資料的更新結果\n```java\npublic class WebControllerTest {\n    @Test\n    public void Should_GetChangeData_When_UpdateDataValue() throws DatabaseException {\n        final int ID = 1;\n        final String ORI_COL1 = \"col1\";\n        final String ORI_COL2 = \"col2\";\n        \n        final String NEW_COL1 = \"new col1\";\n        final String NEW_COL2 = \"new col2\";\n        \n        // given\n        Optional<Data> newData = Optional.of(new Data(ID, NEW_COL1, NEW_COL2));\n        ArgumentCaptor<Data> dataCaptor = ArgumentCaptor.forClass(Data.class);\n        \n        when(this.request.getParameter(\"id\")).thenReturn(String.valueOf(ID));\n        when(this.request.getParameter(\"col1\")).thenReturn(ORI_COL1);\n        when(this.request.getParameter(\"col2\")).thenReturn(ORI_COL2);\n        when(this.webDao.updateData(any())).thenReturn(newData);\n        \n        // when\n        String response = this.webController.update(this.request);\n        \n        // then\n        try{\n            Data result = this.GSON.fromJson(response, Data.class);\n            \n            verify(this.webDao, times(1)).updateData(dataCaptor.capture());\n            \n            Data inputData = dataCaptor.getValue();\n            assertThat(ID, is(inputData.getId()));\n            assertThat(ORI_COL1, is(inputData.getCol1()));\n            assertThat(ORI_COL2, is(inputData.getCol2()));\n            \n            assertThat(result.getId(), is(ID));\n            assertThat(result.getCol1(), is(NEW_COL1));\n            assertThat(result.getCol2(), is(NEW_COL2));\n        } catch (JsonSyntaxException e){\n            fail(\"parser response data fail.\");\n        }\n    }\n}\n```\n第 13 行，我們定義了 ArgumentCaptor 用來裝 Data 類型的資料\n第 27 行， verify updateData 的時候，使用 `dataCaptor.capture()` 取得輸入的 Data\n第 29~32 行，驗證輸入的參數與我們預期的相同\n\n---\n後話\n\n隨著時間推移，程式開發到一個階段，程式碼也逐漸積累量到一定的規模\n有時候修改一個小地方，可能會導致其他地方也受到影響\n此時如果沒有強健的測試預防開發者手殘，等到 release 後...\n真的不敢想像... \n\n最近工作上常常有機會寫到許多測試\n瞭解到測試的重要性，這也是我這幾個月寫測試的感悟...\n","source":"_posts/Java-Unit-Test-使用-Mockito-Powermock-3.md","raw":"---\ntitle: Java Unit Test 使用 Mockito + Powermock (3)\ndate: 2020-08-29 14:37:28\ntags:\n- unit test\n---\n離上一篇文已經間隔兩個月，今天終於有些動力來補充 Unit Test\n今天要聊的是 ArgumentCaptor\n\n在許多的情況下，我們只 assert 最終的結果 (Output)\n但在整個測試的過程中有參數經過不同 method 傳遞，一不小心或粗心可能在某一層變更到數值\n導致錯誤的輸入 (Input) 往下傳遞，而這個錯誤有可能不會影響最終的結果\n就像一顆未爆彈潛伏在程式內，很難在短時間內發現...但未來可能在某個版本上爆發\n\n所以我們要避免掉這個問題，會在比較重要的節點上\n先驗證此時傳入到 method 的參數與我們預期的相符合\n\nArgumentCaptor 可以幫助我們取得執行過程中所傳遞的參數\n它的用法很簡單，只需要定義與輸入參數相同類型\n之後在 `verify(...).callMethod(captor.capture())` 的時候，放入目標 method 中\n就可以取得當下傳入的參數值，接下來就可以針對輸入內容進行 assert \n\n```java\nArgumentCaptor<Object> captor = ArgumentCaptor.forClass(Object.class);\n\n...\n\nMockito.verify(...).callMethod(captor.capture());\nArgument actual = captor.getValue();\nassertThat(expected, actual)\n```\n---\n在此使用之前做的 WebController 進行修改\n先在 WebDao 增加 `updateData` 的 method 傳入 Data\n\n```java\npublic class WebDao {\n    \n    ...\n    \n    public Optional<Data> updateData(Data data) throws DatabaseException {\n        throw new DatabaseException();\n    }\n}\n```\n之後我們就可以在測試期間，使用 ArgumentCaptor 來取得當時傳入的資料\n\n---\nWebController 也要增加一個 `update()` 讓我們進行更新資料的操作\n\n```java\npublic class WebController {\n\n    ...\n    \n    public String update(HttpServletRequest request){\n        int id = Integer.parseInt(request.getParameter(\"id\"));\n        String col1 = request.getParameter(\"col1\");\n        String col2 = request.getParameter(\"col2\");\n        Optional<Data> data;\n        try {\n            data = webDao.updateData(new Data(id, col1, col2));\n        } catch (DatabaseException e) {\n            return e.getMessage();\n        }\n        return GSON.toJson(data.get());\n    }\n}\n```\n---\n最後在 WebControllerTest 新增一個測試，用於測試資料的更新結果\n```java\npublic class WebControllerTest {\n    @Test\n    public void Should_GetChangeData_When_UpdateDataValue() throws DatabaseException {\n        final int ID = 1;\n        final String ORI_COL1 = \"col1\";\n        final String ORI_COL2 = \"col2\";\n        \n        final String NEW_COL1 = \"new col1\";\n        final String NEW_COL2 = \"new col2\";\n        \n        // given\n        Optional<Data> newData = Optional.of(new Data(ID, NEW_COL1, NEW_COL2));\n        ArgumentCaptor<Data> dataCaptor = ArgumentCaptor.forClass(Data.class);\n        \n        when(this.request.getParameter(\"id\")).thenReturn(String.valueOf(ID));\n        when(this.request.getParameter(\"col1\")).thenReturn(ORI_COL1);\n        when(this.request.getParameter(\"col2\")).thenReturn(ORI_COL2);\n        when(this.webDao.updateData(any())).thenReturn(newData);\n        \n        // when\n        String response = this.webController.update(this.request);\n        \n        // then\n        try{\n            Data result = this.GSON.fromJson(response, Data.class);\n            \n            verify(this.webDao, times(1)).updateData(dataCaptor.capture());\n            \n            Data inputData = dataCaptor.getValue();\n            assertThat(ID, is(inputData.getId()));\n            assertThat(ORI_COL1, is(inputData.getCol1()));\n            assertThat(ORI_COL2, is(inputData.getCol2()));\n            \n            assertThat(result.getId(), is(ID));\n            assertThat(result.getCol1(), is(NEW_COL1));\n            assertThat(result.getCol2(), is(NEW_COL2));\n        } catch (JsonSyntaxException e){\n            fail(\"parser response data fail.\");\n        }\n    }\n}\n```\n第 13 行，我們定義了 ArgumentCaptor 用來裝 Data 類型的資料\n第 27 行， verify updateData 的時候，使用 `dataCaptor.capture()` 取得輸入的 Data\n第 29~32 行，驗證輸入的參數與我們預期的相同\n\n---\n後話\n\n隨著時間推移，程式開發到一個階段，程式碼也逐漸積累量到一定的規模\n有時候修改一個小地方，可能會導致其他地方也受到影響\n此時如果沒有強健的測試預防開發者手殘，等到 release 後...\n真的不敢想像... \n\n最近工作上常常有機會寫到許多測試\n瞭解到測試的重要性，這也是我這幾個月寫測試的感悟...\n","slug":"Java-Unit-Test-使用-Mockito-Powermock-3","published":1,"updated":"2020-08-29T09:30:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr53000i0rpjk95tjos8","content":"<p>離上一篇文已經間隔兩個月，今天終於有些動力來補充 Unit Test<br>今天要聊的是 ArgumentCaptor</p>\n<p>在許多的情況下，我們只 assert 最終的結果 (Output)<br>但在整個測試的過程中有參數經過不同 method 傳遞，一不小心或粗心可能在某一層變更到數值<br>導致錯誤的輸入 (Input) 往下傳遞，而這個錯誤有可能不會影響最終的結果<br>就像一顆未爆彈潛伏在程式內，很難在短時間內發現…但未來可能在某個版本上爆發</p>\n<p>所以我們要避免掉這個問題，會在比較重要的節點上<br>先驗證此時傳入到 method 的參數與我們預期的相符合</p>\n<p>ArgumentCaptor 可以幫助我們取得執行過程中所傳遞的參數<br>它的用法很簡單，只需要定義與輸入參數相同類型<br>之後在 <code>verify(...).callMethod(captor.capture())</code> 的時候，放入目標 method 中<br>就可以取得當下傳入的參數值，接下來就可以針對輸入內容進行 assert </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArgumentCaptor&lt;Object&gt; captor = ArgumentCaptor.forClass(Object.class);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Mockito.verify(...).callMethod(captor.capture());</span><br><span class=\"line\">Argument actual = captor.getValue();</span><br><span class=\"line\">assertThat(expected, actual)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>在此使用之前做的 WebController 進行修改<br>先在 WebDao 增加 <code>updateData</code> 的 method 傳入 Data</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebDao</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Optional&lt;Data&gt; <span class=\"title\">updateData</span><span class=\"params\">(Data data)</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DatabaseException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之後我們就可以在測試期間，使用 ArgumentCaptor 來取得當時傳入的資料</p>\n<hr>\n<p>WebController 也要增加一個 <code>update()</code> 讓我們進行更新資料的操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(request.getParameter(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">        String col1 = request.getParameter(<span class=\"string\">\"col1\"</span>);</span><br><span class=\"line\">        String col2 = request.getParameter(<span class=\"string\">\"col2\"</span>);</span><br><span class=\"line\">        Optional&lt;Data&gt; data;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            data = webDao.updateData(<span class=\"keyword\">new</span> Data(id, col1, col2));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DatabaseException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GSON.toJson(data.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>最後在 WebControllerTest 新增一個測試，用於測試資料的更新結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebControllerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_GetChangeData_When_UpdateDataValue</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ID = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String ORI_COL1 = <span class=\"string\">\"col1\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String ORI_COL2 = <span class=\"string\">\"col2\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">final</span> String NEW_COL1 = <span class=\"string\">\"new col1\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String NEW_COL2 = <span class=\"string\">\"new col2\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// given</span></span><br><span class=\"line\">        Optional&lt;Data&gt; newData = Optional.of(<span class=\"keyword\">new</span> Data(ID, NEW_COL1, NEW_COL2));</span><br><span class=\"line\">        ArgumentCaptor&lt;Data&gt; dataCaptor = ArgumentCaptor.forClass(Data.class);</span><br><span class=\"line\">        </span><br><span class=\"line\">        when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"id\"</span>)).thenReturn(String.valueOf(ID));</span><br><span class=\"line\">        when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"col1\"</span>)).thenReturn(ORI_COL1);</span><br><span class=\"line\">        when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"col2\"</span>)).thenReturn(ORI_COL2);</span><br><span class=\"line\">        when(<span class=\"keyword\">this</span>.webDao.updateData(any())).thenReturn(newData);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// when</span></span><br><span class=\"line\">        String response = <span class=\"keyword\">this</span>.webController.update(<span class=\"keyword\">this</span>.request);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// then</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Data result = <span class=\"keyword\">this</span>.GSON.fromJson(response, Data.class);</span><br><span class=\"line\">            </span><br><span class=\"line\">            verify(<span class=\"keyword\">this</span>.webDao, times(<span class=\"number\">1</span>)).updateData(dataCaptor.capture());</span><br><span class=\"line\">            </span><br><span class=\"line\">            Data inputData = dataCaptor.getValue();</span><br><span class=\"line\">            assertThat(ID, is(inputData.getId()));</span><br><span class=\"line\">            assertThat(ORI_COL1, is(inputData.getCol1()));</span><br><span class=\"line\">            assertThat(ORI_COL2, is(inputData.getCol2()));</span><br><span class=\"line\">            </span><br><span class=\"line\">            assertThat(result.getId(), is(ID));</span><br><span class=\"line\">            assertThat(result.getCol1(), is(NEW_COL1));</span><br><span class=\"line\">            assertThat(result.getCol2(), is(NEW_COL2));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JsonSyntaxException e)&#123;</span><br><span class=\"line\">            fail(<span class=\"string\">\"parser response data fail.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第 13 行，我們定義了 ArgumentCaptor 用來裝 Data 類型的資料<br>第 27 行， verify updateData 的時候，使用 <code>dataCaptor.capture()</code> 取得輸入的 Data<br>第 29~32 行，驗證輸入的參數與我們預期的相同</p>\n<hr>\n<p>後話</p>\n<p>隨著時間推移，程式開發到一個階段，程式碼也逐漸積累量到一定的規模<br>有時候修改一個小地方，可能會導致其他地方也受到影響<br>此時如果沒有強健的測試預防開發者手殘，等到 release 後…<br>真的不敢想像… </p>\n<p>最近工作上常常有機會寫到許多測試<br>瞭解到測試的重要性，這也是我這幾個月寫測試的感悟…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>離上一篇文已經間隔兩個月，今天終於有些動力來補充 Unit Test<br>今天要聊的是 ArgumentCaptor</p>\n<p>在許多的情況下，我們只 assert 最終的結果 (Output)<br>但在整個測試的過程中有參數經過不同 method 傳遞，一不小心或粗心可能在某一層變更到數值<br>導致錯誤的輸入 (Input) 往下傳遞，而這個錯誤有可能不會影響最終的結果<br>就像一顆未爆彈潛伏在程式內，很難在短時間內發現…但未來可能在某個版本上爆發</p>\n<p>所以我們要避免掉這個問題，會在比較重要的節點上<br>先驗證此時傳入到 method 的參數與我們預期的相符合</p>\n<p>ArgumentCaptor 可以幫助我們取得執行過程中所傳遞的參數<br>它的用法很簡單，只需要定義與輸入參數相同類型<br>之後在 <code>verify(...).callMethod(captor.capture())</code> 的時候，放入目標 method 中<br>就可以取得當下傳入的參數值，接下來就可以針對輸入內容進行 assert </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArgumentCaptor&lt;Object&gt; captor = ArgumentCaptor.forClass(Object.class);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Mockito.verify(...).callMethod(captor.capture());</span><br><span class=\"line\">Argument actual = captor.getValue();</span><br><span class=\"line\">assertThat(expected, actual)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>在此使用之前做的 WebController 進行修改<br>先在 WebDao 增加 <code>updateData</code> 的 method 傳入 Data</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebDao</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Optional&lt;Data&gt; <span class=\"title\">updateData</span><span class=\"params\">(Data data)</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DatabaseException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之後我們就可以在測試期間，使用 ArgumentCaptor 來取得當時傳入的資料</p>\n<hr>\n<p>WebController 也要增加一個 <code>update()</code> 讓我們進行更新資料的操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(request.getParameter(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">        String col1 = request.getParameter(<span class=\"string\">\"col1\"</span>);</span><br><span class=\"line\">        String col2 = request.getParameter(<span class=\"string\">\"col2\"</span>);</span><br><span class=\"line\">        Optional&lt;Data&gt; data;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            data = webDao.updateData(<span class=\"keyword\">new</span> Data(id, col1, col2));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DatabaseException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GSON.toJson(data.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>最後在 WebControllerTest 新增一個測試，用於測試資料的更新結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebControllerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_GetChangeData_When_UpdateDataValue</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ID = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String ORI_COL1 = <span class=\"string\">\"col1\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String ORI_COL2 = <span class=\"string\">\"col2\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">final</span> String NEW_COL1 = <span class=\"string\">\"new col1\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String NEW_COL2 = <span class=\"string\">\"new col2\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// given</span></span><br><span class=\"line\">        Optional&lt;Data&gt; newData = Optional.of(<span class=\"keyword\">new</span> Data(ID, NEW_COL1, NEW_COL2));</span><br><span class=\"line\">        ArgumentCaptor&lt;Data&gt; dataCaptor = ArgumentCaptor.forClass(Data.class);</span><br><span class=\"line\">        </span><br><span class=\"line\">        when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"id\"</span>)).thenReturn(String.valueOf(ID));</span><br><span class=\"line\">        when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"col1\"</span>)).thenReturn(ORI_COL1);</span><br><span class=\"line\">        when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"col2\"</span>)).thenReturn(ORI_COL2);</span><br><span class=\"line\">        when(<span class=\"keyword\">this</span>.webDao.updateData(any())).thenReturn(newData);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// when</span></span><br><span class=\"line\">        String response = <span class=\"keyword\">this</span>.webController.update(<span class=\"keyword\">this</span>.request);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// then</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Data result = <span class=\"keyword\">this</span>.GSON.fromJson(response, Data.class);</span><br><span class=\"line\">            </span><br><span class=\"line\">            verify(<span class=\"keyword\">this</span>.webDao, times(<span class=\"number\">1</span>)).updateData(dataCaptor.capture());</span><br><span class=\"line\">            </span><br><span class=\"line\">            Data inputData = dataCaptor.getValue();</span><br><span class=\"line\">            assertThat(ID, is(inputData.getId()));</span><br><span class=\"line\">            assertThat(ORI_COL1, is(inputData.getCol1()));</span><br><span class=\"line\">            assertThat(ORI_COL2, is(inputData.getCol2()));</span><br><span class=\"line\">            </span><br><span class=\"line\">            assertThat(result.getId(), is(ID));</span><br><span class=\"line\">            assertThat(result.getCol1(), is(NEW_COL1));</span><br><span class=\"line\">            assertThat(result.getCol2(), is(NEW_COL2));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JsonSyntaxException e)&#123;</span><br><span class=\"line\">            fail(<span class=\"string\">\"parser response data fail.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第 13 行，我們定義了 ArgumentCaptor 用來裝 Data 類型的資料<br>第 27 行， verify updateData 的時候，使用 <code>dataCaptor.capture()</code> 取得輸入的 Data<br>第 29~32 行，驗證輸入的參數與我們預期的相同</p>\n<hr>\n<p>後話</p>\n<p>隨著時間推移，程式開發到一個階段，程式碼也逐漸積累量到一定的規模<br>有時候修改一個小地方，可能會導致其他地方也受到影響<br>此時如果沒有強健的測試預防開發者手殘，等到 release 後…<br>真的不敢想像… </p>\n<p>最近工作上常常有機會寫到許多測試<br>瞭解到測試的重要性，這也是我這幾個月寫測試的感悟…</p>\n"},{"title":"Linux 如何避免重複執行特定jar","date":"2018-03-17T13:00:34.000Z","_content":"\n因為Linux是真正多人多工，若是在不同電腦上遠端登入\n執行同一個特定jar，就會造成重複執行\n所以在一般情況下，會寫script 做成 service\n再透過 start stop restart 去執行\n\n但是有些時候我們只是要執行一個Java的小程式\n不會想要花費時間將它製作成 service \n所以只需寫一個script，去檢查特定程式的JVM是否已經啟動\n若是已經啟動的話就刪除目前執行的JVM\n\n應該有其他指令可以做到直接刪除，這裡只是提供一種強制停止JVM的思路\n\n\n```bash kill jar JVM, if exist .sh\n#!/bin/bash\n\nPID=$(ps aux | grep jar-[0-9] | awk '{print $2}')\necho \"PID: \"$PID\nif [ -z $PID ]; then\n\techo \"not exist PID\"\nelse\n    echo \"kill PID: \"$PID\n    kill -9 $PID\nfi\n\n```\n\n第3行 ps aux 是找出所有目前執行中的process\n接著使用 grep 找出特定的process，因為這個jar會帶版號\n例如： jar-1.1.jar 或是升級後 jar-1.2.jar\n所以多判斷帶版號的regex\n最後執行 awk 印出第2欄（因為第2欄是process的PID）\n第5行是檢查PID是否為空字串\n若PID不是空字串就表示JVM已經存在需要執行第9行去強制刪除JVM\nPS: 要不要刪除JVM就看個人了，因為這是用在開發中的jar，需要重新執行，所以使用kill\n\n這樣一個簡單的script就完成了，現在只需要在執行jar前呼叫此.sh檔\n就可以避免重複執行了\n\n","source":"_posts/Linux-如何避免重複執行特定jar.md","raw":"---\ntitle: Linux 如何避免重複執行特定jar\ndate: 2018-03-17 21:00:34\ntags:\n- shell\n---\n\n因為Linux是真正多人多工，若是在不同電腦上遠端登入\n執行同一個特定jar，就會造成重複執行\n所以在一般情況下，會寫script 做成 service\n再透過 start stop restart 去執行\n\n但是有些時候我們只是要執行一個Java的小程式\n不會想要花費時間將它製作成 service \n所以只需寫一個script，去檢查特定程式的JVM是否已經啟動\n若是已經啟動的話就刪除目前執行的JVM\n\n應該有其他指令可以做到直接刪除，這裡只是提供一種強制停止JVM的思路\n\n\n```bash kill jar JVM, if exist .sh\n#!/bin/bash\n\nPID=$(ps aux | grep jar-[0-9] | awk '{print $2}')\necho \"PID: \"$PID\nif [ -z $PID ]; then\n\techo \"not exist PID\"\nelse\n    echo \"kill PID: \"$PID\n    kill -9 $PID\nfi\n\n```\n\n第3行 ps aux 是找出所有目前執行中的process\n接著使用 grep 找出特定的process，因為這個jar會帶版號\n例如： jar-1.1.jar 或是升級後 jar-1.2.jar\n所以多判斷帶版號的regex\n最後執行 awk 印出第2欄（因為第2欄是process的PID）\n第5行是檢查PID是否為空字串\n若PID不是空字串就表示JVM已經存在需要執行第9行去強制刪除JVM\nPS: 要不要刪除JVM就看個人了，因為這是用在開發中的jar，需要重新執行，所以使用kill\n\n這樣一個簡單的script就完成了，現在只需要在執行jar前呼叫此.sh檔\n就可以避免重複執行了\n\n","slug":"Linux-如何避免重複執行特定jar","published":1,"updated":"2020-01-21T17:53:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr55000l0rpjo7plx2x0","content":"<p>因為Linux是真正多人多工，若是在不同電腦上遠端登入<br>執行同一個特定jar，就會造成重複執行<br>所以在一般情況下，會寫script 做成 service<br>再透過 start stop restart 去執行</p>\n<p>但是有些時候我們只是要執行一個Java的小程式<br>不會想要花費時間將它製作成 service<br>所以只需寫一個script，去檢查特定程式的JVM是否已經啟動<br>若是已經啟動的話就刪除目前執行的JVM</p>\n<p>應該有其他指令可以做到直接刪除，這裡只是提供一種強制停止JVM的思路</p>\n<figure class=\"highlight bash\"><figcaption><span>kill jar JVM, if exist .sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">PID=$(ps aux | grep jar-[0-9] | awk <span class=\"string\">'&#123;print $2&#125;'</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PID: \"</span><span class=\"variable\">$PID</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$PID</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"not exist PID\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"kill PID: \"</span><span class=\"variable\">$PID</span></span><br><span class=\"line\">    <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$PID</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>第3行 ps aux 是找出所有目前執行中的process<br>接著使用 grep 找出特定的process，因為這個jar會帶版號<br>例如： jar-1.1.jar 或是升級後 jar-1.2.jar<br>所以多判斷帶版號的regex<br>最後執行 awk 印出第2欄（因為第2欄是process的PID）<br>第5行是檢查PID是否為空字串<br>若PID不是空字串就表示JVM已經存在需要執行第9行去強制刪除JVM<br>PS: 要不要刪除JVM就看個人了，因為這是用在開發中的jar，需要重新執行，所以使用kill</p>\n<p>這樣一個簡單的script就完成了，現在只需要在執行jar前呼叫此.sh檔<br>就可以避免重複執行了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>因為Linux是真正多人多工，若是在不同電腦上遠端登入<br>執行同一個特定jar，就會造成重複執行<br>所以在一般情況下，會寫script 做成 service<br>再透過 start stop restart 去執行</p>\n<p>但是有些時候我們只是要執行一個Java的小程式<br>不會想要花費時間將它製作成 service<br>所以只需寫一個script，去檢查特定程式的JVM是否已經啟動<br>若是已經啟動的話就刪除目前執行的JVM</p>\n<p>應該有其他指令可以做到直接刪除，這裡只是提供一種強制停止JVM的思路</p>\n<figure class=\"highlight bash\"><figcaption><span>kill jar JVM, if exist .sh</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">PID=$(ps aux | grep jar-[0-9] | awk <span class=\"string\">'&#123;print $2&#125;'</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PID: \"</span><span class=\"variable\">$PID</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$PID</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"not exist PID\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"kill PID: \"</span><span class=\"variable\">$PID</span></span><br><span class=\"line\">    <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$PID</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>第3行 ps aux 是找出所有目前執行中的process<br>接著使用 grep 找出特定的process，因為這個jar會帶版號<br>例如： jar-1.1.jar 或是升級後 jar-1.2.jar<br>所以多判斷帶版號的regex<br>最後執行 awk 印出第2欄（因為第2欄是process的PID）<br>第5行是檢查PID是否為空字串<br>若PID不是空字串就表示JVM已經存在需要執行第9行去強制刪除JVM<br>PS: 要不要刪除JVM就看個人了，因為這是用在開發中的jar，需要重新執行，所以使用kill</p>\n<p>這樣一個簡單的script就完成了，現在只需要在執行jar前呼叫此.sh檔<br>就可以避免重複執行了</p>\n"},{"title":"Java Unit Test 使用 Mockito + Powermock (2)","date":"2020-06-14T08:42:11.000Z","_content":"一段時間沒有更新了\n趁今天有空來補充一下 Uint Test 在實際開發中會需要使用到 Powermock 的場景\n\n假設今天需要 mock 的對象只在 method 中使用\n一般的 mock 做法是無法從外部引入\n像這個例子，我們想要測試 Calculator ，這裡只有一個簡單的加法操作\n在某個測試案例中，我們不想依賴 calc() 外部傳入的 param1 和 param2 對 Input 進行初始化\n或不想回傳實際運算結果，而是強制指定 Output 的回傳內容\n```java\npublic class Calculator {\n\n    public int calc(int param1, int param2) {\n        Input input = new Input(param1, param2);\n        Output output = new Output();\n\n        addition(input, output);\n\n        return output.getResult();\n    }\n\n    private void addition(Input input, Output output) {\n        output.setResult(input.getParam1() + input.getParam2());\n    }\n}\n```\n但 Input 和 Output 不是 Calculator 的 field 無法進行 mock\n目前只能透過 Powermock 的方式，跨越次元壁強制注入\n\n在此之前，先補上 Input 和 Output 的結構\n```java\npublic class Input {\n    private int param1;\n    private int param2;\n\n    public Input(int param1, int param2) {\n        this.param1 = param1;\n        this.param2 = param2;\n    }\n\n    public int getParam1() {\n        return param1;\n    }\n\n    public int getParam2() {\n        return param2;\n    }\n}\n```\n```java\npublic class Output {\n    private int result;\n\n    public Output() {\n        this.result = 0;\n    }\n\n    public void setResult(int result) {\n        this.result = result;\n    }\n\n    public int getResult() {\n        return result;\n    }\n}\n```\n---\n這次改用 @RunWith(PowerMockRunner.class) 當測試的 Runner\n因為指定了 @PrepareForTest(Calculator.class) ， Calculator 是我們要測試的 class\nPowermock 需要對它動一些手腳，我們才可以做到跨過次元壁對 Input 和 Output 做設置\n\n想知道為什麼要加這些 annotation 可以去 google ，網路上一堆，就不在此解釋\n這裡的重點是示範如何根據測試需求 Powermock Input 和 Output\n```java\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(Calculator.class)\npublic class CalculatorTest {\n\n    private Calculator calculator;\n\n    @Before\n    public void setup() {\n        this.calculator = new Calculator();\n    }\n    ...\n}\n```\n\n開始第一個測試\nPowermock Input ，第 7 ~ 10 行與一般 mock 一樣的流程去 mock Input\n重點是第 12 行， `whenNew(Input.class).withAnyArguments().thenReturn(input)`\n再產生 Input Object 的時候，不管傳入任何參數，都指定回傳我們要的 input\n```java\n@Test\npublic void Should_GetResult300_When_PowerMockInputSuccess() throws Exception {\n    final int PARAM1 = 100;\n    final int PARAM2 = 200;\n\n    // given\n    Input input = PowerMockito.mock(Input.class);\n\n    PowerMockito.when(input.getParam1()).thenReturn(PARAM1);\n    PowerMockito.when(input.getParam2()).thenReturn(PARAM2);\n\n    PowerMockito.whenNew(Input.class).withAnyArguments().thenReturn(input);\n\n    // when\n    int result = this.calculator.calc(anyInt(), anyInt());\n\n    // then\n    verify(input, times(1)).getParam1();\n    verify(input, times(1)).getParam2();\n    assertThat(result, is(PARAM1 + PARAM2));\n}\n```\n這個做法就可以讓我們專注測試 Input 的變化，而不受外部參數影響\n在實際開發情況下 Calculator 的 calc() 這個 method 可能外面會包了好幾層\n要透過外部一層一層傳入參數到 Input 不知道要花多少時間做調整\n\n---\n第二個測試與第一個測試實際上是一樣的\n只是 `.when(input.getParam1()).thenReturn(PARAM1)` 改為 `.doAnswer(invocation -> PARAM1).when(input).getParam1()`\n`doAnswer` 這個在一般 mock 也很常用到，根據執行傳入參數來動態決定決定 return 的結果\n```java\n@Test\npublic void Should_GetResult300_When_PowerMockInputDoAnswerSuccess() throws Exception {\n    final int PARAM1 = 100;\n    final int PARAM2 = 200;\n\n    // given\n    Input input = PowerMockito.mock(Input.class);\n\n    PowerMockito.doAnswer(invocation -> PARAM1).when(input).getParam1();\n    PowerMockito.doAnswer(invocation -> PARAM2).when(input).getParam2();\n\n    PowerMockito.whenNew(Input.class).withAnyArguments().thenReturn(input);\n\n    // when\n    int result = this.calculator.calc(anyInt(), anyInt());\n\n    // then\n    verify(input, times(1)).getParam1();\n    verify(input, times(1)).getParam2();\n    assertThat(result, is(PARAM1 + PARAM2));\n}\n```\n在目前的需求中使用測試一的寫法就夠了\n那為什麼在這裡多提醒 `doAnswer` 的寫法呢？\n\n因為實際開發中我們會用到 Powermock 的情況下， mock 的對象通常會是 static \n像這種共用的 Object 和 method 傳入的來源特別雜\n所以需要根據傳入的參數回傳不同的結果\n此時 `doAnswer` 會比 `thenReturn` 和 `doReturn` 好用\n\n---\n第三個測試是強制設置 Output\n用法與 Input 類似，第 10 行由 `withAnyArguments` 改為 `withNoArguments`\n這裡演示沒有參數傳入的做法\n第 11 行改用 `thenAnswer` ，這與 `doAnswer` 用法一樣，根據個人習慣或測試邏輯選一個用就好\n\n這裡要注意第 14 行不可以傳入 `anyInt()` 不然會在 calc() 內部\n`Input input = new Input(param1, param2)` 初始化時發生錯誤\n除非使用測試一和測試二的寫法 Powermock Input\n\n這是一般寫測試的新手比較難注意到的地方\n因為 Powermock 的錯誤訊息並不會提示這個問題\n只能夠自己小心\n```java\n@Test\npublic void Should_GetResult1000_When_PowerMockOutputSuccess() throws Exception {\n    final int PARAM1 = 100;\n    final int PARAM2 = 200;\n    final int OUTPUT_RESULT = 1000;\n\n    // given\n    Output output = PowerMockito.mock(Output.class);\n\n    PowerMockito.whenNew(Output.class).withNoArguments().thenReturn(output);\n    PowerMockito.when(output.getResult()).thenAnswer(invocation -> OUTPUT_RESULT);\n\n    // when\n    int result = this.calculator.calc(PARAM1, PARAM2);\n\n    // then\n    verify(output, times(1)).setResult(anyInt());\n    verify(output, times(1)).getResult();\n    assertThat(result, is(OUTPUT_RESULT));\n}\n```\n---\n執行結果\n<img src=\"/images/java-unit-test-mockito-powermock-2-001.png\" width=\"100%\" height=\"100%\" alt=\"img1\"/>\n3 個測試都通過，與預計的結果相符合\n\n<img src=\"/images/java-unit-test-mockito-powermock-2-002.png\" width=\"100%\" height=\"100%\" alt=\"img2\"/>\nUnit Test coverage 100%\n\n今天 Unit Test 就談到這\n\n實際開發中 Powermock 可以不使用就不要使用，因為它一但用不好\n可能會影響到其他的測試案例....\n但有時候卻是必要之惡，不用 Powermock 有些測試情況很難模擬和維護\n最終造成測試 coverage 不夠完整\n\n詳情可參考我的 github source code:\nhttps://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test\n","source":"_posts/Java-Unit-Test-使用-Mockito-Powermock-2.md","raw":"---\ntitle: Java Unit Test 使用 Mockito + Powermock (2)\ndate: 2020-06-14 16:42:11\ntags:\n- unit test\n---\n一段時間沒有更新了\n趁今天有空來補充一下 Uint Test 在實際開發中會需要使用到 Powermock 的場景\n\n假設今天需要 mock 的對象只在 method 中使用\n一般的 mock 做法是無法從外部引入\n像這個例子，我們想要測試 Calculator ，這裡只有一個簡單的加法操作\n在某個測試案例中，我們不想依賴 calc() 外部傳入的 param1 和 param2 對 Input 進行初始化\n或不想回傳實際運算結果，而是強制指定 Output 的回傳內容\n```java\npublic class Calculator {\n\n    public int calc(int param1, int param2) {\n        Input input = new Input(param1, param2);\n        Output output = new Output();\n\n        addition(input, output);\n\n        return output.getResult();\n    }\n\n    private void addition(Input input, Output output) {\n        output.setResult(input.getParam1() + input.getParam2());\n    }\n}\n```\n但 Input 和 Output 不是 Calculator 的 field 無法進行 mock\n目前只能透過 Powermock 的方式，跨越次元壁強制注入\n\n在此之前，先補上 Input 和 Output 的結構\n```java\npublic class Input {\n    private int param1;\n    private int param2;\n\n    public Input(int param1, int param2) {\n        this.param1 = param1;\n        this.param2 = param2;\n    }\n\n    public int getParam1() {\n        return param1;\n    }\n\n    public int getParam2() {\n        return param2;\n    }\n}\n```\n```java\npublic class Output {\n    private int result;\n\n    public Output() {\n        this.result = 0;\n    }\n\n    public void setResult(int result) {\n        this.result = result;\n    }\n\n    public int getResult() {\n        return result;\n    }\n}\n```\n---\n這次改用 @RunWith(PowerMockRunner.class) 當測試的 Runner\n因為指定了 @PrepareForTest(Calculator.class) ， Calculator 是我們要測試的 class\nPowermock 需要對它動一些手腳，我們才可以做到跨過次元壁對 Input 和 Output 做設置\n\n想知道為什麼要加這些 annotation 可以去 google ，網路上一堆，就不在此解釋\n這裡的重點是示範如何根據測試需求 Powermock Input 和 Output\n```java\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(Calculator.class)\npublic class CalculatorTest {\n\n    private Calculator calculator;\n\n    @Before\n    public void setup() {\n        this.calculator = new Calculator();\n    }\n    ...\n}\n```\n\n開始第一個測試\nPowermock Input ，第 7 ~ 10 行與一般 mock 一樣的流程去 mock Input\n重點是第 12 行， `whenNew(Input.class).withAnyArguments().thenReturn(input)`\n再產生 Input Object 的時候，不管傳入任何參數，都指定回傳我們要的 input\n```java\n@Test\npublic void Should_GetResult300_When_PowerMockInputSuccess() throws Exception {\n    final int PARAM1 = 100;\n    final int PARAM2 = 200;\n\n    // given\n    Input input = PowerMockito.mock(Input.class);\n\n    PowerMockito.when(input.getParam1()).thenReturn(PARAM1);\n    PowerMockito.when(input.getParam2()).thenReturn(PARAM2);\n\n    PowerMockito.whenNew(Input.class).withAnyArguments().thenReturn(input);\n\n    // when\n    int result = this.calculator.calc(anyInt(), anyInt());\n\n    // then\n    verify(input, times(1)).getParam1();\n    verify(input, times(1)).getParam2();\n    assertThat(result, is(PARAM1 + PARAM2));\n}\n```\n這個做法就可以讓我們專注測試 Input 的變化，而不受外部參數影響\n在實際開發情況下 Calculator 的 calc() 這個 method 可能外面會包了好幾層\n要透過外部一層一層傳入參數到 Input 不知道要花多少時間做調整\n\n---\n第二個測試與第一個測試實際上是一樣的\n只是 `.when(input.getParam1()).thenReturn(PARAM1)` 改為 `.doAnswer(invocation -> PARAM1).when(input).getParam1()`\n`doAnswer` 這個在一般 mock 也很常用到，根據執行傳入參數來動態決定決定 return 的結果\n```java\n@Test\npublic void Should_GetResult300_When_PowerMockInputDoAnswerSuccess() throws Exception {\n    final int PARAM1 = 100;\n    final int PARAM2 = 200;\n\n    // given\n    Input input = PowerMockito.mock(Input.class);\n\n    PowerMockito.doAnswer(invocation -> PARAM1).when(input).getParam1();\n    PowerMockito.doAnswer(invocation -> PARAM2).when(input).getParam2();\n\n    PowerMockito.whenNew(Input.class).withAnyArguments().thenReturn(input);\n\n    // when\n    int result = this.calculator.calc(anyInt(), anyInt());\n\n    // then\n    verify(input, times(1)).getParam1();\n    verify(input, times(1)).getParam2();\n    assertThat(result, is(PARAM1 + PARAM2));\n}\n```\n在目前的需求中使用測試一的寫法就夠了\n那為什麼在這裡多提醒 `doAnswer` 的寫法呢？\n\n因為實際開發中我們會用到 Powermock 的情況下， mock 的對象通常會是 static \n像這種共用的 Object 和 method 傳入的來源特別雜\n所以需要根據傳入的參數回傳不同的結果\n此時 `doAnswer` 會比 `thenReturn` 和 `doReturn` 好用\n\n---\n第三個測試是強制設置 Output\n用法與 Input 類似，第 10 行由 `withAnyArguments` 改為 `withNoArguments`\n這裡演示沒有參數傳入的做法\n第 11 行改用 `thenAnswer` ，這與 `doAnswer` 用法一樣，根據個人習慣或測試邏輯選一個用就好\n\n這裡要注意第 14 行不可以傳入 `anyInt()` 不然會在 calc() 內部\n`Input input = new Input(param1, param2)` 初始化時發生錯誤\n除非使用測試一和測試二的寫法 Powermock Input\n\n這是一般寫測試的新手比較難注意到的地方\n因為 Powermock 的錯誤訊息並不會提示這個問題\n只能夠自己小心\n```java\n@Test\npublic void Should_GetResult1000_When_PowerMockOutputSuccess() throws Exception {\n    final int PARAM1 = 100;\n    final int PARAM2 = 200;\n    final int OUTPUT_RESULT = 1000;\n\n    // given\n    Output output = PowerMockito.mock(Output.class);\n\n    PowerMockito.whenNew(Output.class).withNoArguments().thenReturn(output);\n    PowerMockito.when(output.getResult()).thenAnswer(invocation -> OUTPUT_RESULT);\n\n    // when\n    int result = this.calculator.calc(PARAM1, PARAM2);\n\n    // then\n    verify(output, times(1)).setResult(anyInt());\n    verify(output, times(1)).getResult();\n    assertThat(result, is(OUTPUT_RESULT));\n}\n```\n---\n執行結果\n<img src=\"/images/java-unit-test-mockito-powermock-2-001.png\" width=\"100%\" height=\"100%\" alt=\"img1\"/>\n3 個測試都通過，與預計的結果相符合\n\n<img src=\"/images/java-unit-test-mockito-powermock-2-002.png\" width=\"100%\" height=\"100%\" alt=\"img2\"/>\nUnit Test coverage 100%\n\n今天 Unit Test 就談到這\n\n實際開發中 Powermock 可以不使用就不要使用，因為它一但用不好\n可能會影響到其他的測試案例....\n但有時候卻是必要之惡，不用 Powermock 有些測試情況很難模擬和維護\n最終造成測試 coverage 不夠完整\n\n詳情可參考我的 github source code:\nhttps://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test\n","slug":"Java-Unit-Test-使用-Mockito-Powermock-2","published":1,"updated":"2020-06-14T11:10:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr57000n0rpj6m691tyi","content":"<p>一段時間沒有更新了<br>趁今天有空來補充一下 Uint Test 在實際開發中會需要使用到 Powermock 的場景</p>\n<p>假設今天需要 mock 的對象只在 method 中使用<br>一般的 mock 做法是無法從外部引入<br>像這個例子，我們想要測試 Calculator ，這裡只有一個簡單的加法操作<br>在某個測試案例中，我們不想依賴 calc() 外部傳入的 param1 和 param2 對 Input 進行初始化<br>或不想回傳實際運算結果，而是強制指定 Output 的回傳內容<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> param1, <span class=\"keyword\">int</span> param2)</span> </span>&#123;</span><br><span class=\"line\">        Input input = <span class=\"keyword\">new</span> Input(param1, param2);</span><br><span class=\"line\">        Output output = <span class=\"keyword\">new</span> Output();</span><br><span class=\"line\"></span><br><span class=\"line\">        addition(input, output);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output.getResult();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addition</span><span class=\"params\">(Input input, Output output)</span> </span>&#123;</span><br><span class=\"line\">        output.setResult(input.getParam1() + input.getParam2());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但 Input 和 Output 不是 Calculator 的 field 無法進行 mock<br>目前只能透過 Powermock 的方式，跨越次元壁強制注入</p>\n<p>在此之前，先補上 Input 和 Output 的結構<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Input</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> param1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> param2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Input</span><span class=\"params\">(<span class=\"keyword\">int</span> param1, <span class=\"keyword\">int</span> param2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param1 = param1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param2 = param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getParam1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getParam2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Output</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Output</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setResult</span><span class=\"params\">(<span class=\"keyword\">int</span> result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>這次改用 @RunWith(PowerMockRunner.class) 當測試的 Runner<br>因為指定了 @PrepareForTest(Calculator.class) ， Calculator 是我們要測試的 class<br>Powermock 需要對它動一些手腳，我們才可以做到跨過次元壁對 Input 和 Output 做設置</p>\n<p>想知道為什麼要加這些 annotation 可以去 google ，網路上一堆，就不在此解釋<br>這裡的重點是示範如何根據測試需求 Powermock Input 和 Output<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(PowerMockRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@PrepareForTest</span>(Calculator.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Calculator calculator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.calculator = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>開始第一個測試<br>Powermock Input ，第 7 ~ 10 行與一般 mock 一樣的流程去 mock Input<br>重點是第 12 行， <code>whenNew(Input.class).withAnyArguments().thenReturn(input)</code><br>再產生 Input Object 的時候，不管傳入任何參數，都指定回傳我們要的 input<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_GetResult300_When_PowerMockInputSuccess</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM1 = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM2 = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Input input = PowerMockito.mock(Input.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.when(input.getParam1()).thenReturn(PARAM1);</span><br><span class=\"line\">    PowerMockito.when(input.getParam2()).thenReturn(PARAM2);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.whenNew(Input.class).withAnyArguments().thenReturn(input);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"keyword\">this</span>.calculator.calc(anyInt(), anyInt());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    verify(input, times(<span class=\"number\">1</span>)).getParam1();</span><br><span class=\"line\">    verify(input, times(<span class=\"number\">1</span>)).getParam2();</span><br><span class=\"line\">    assertThat(result, is(PARAM1 + PARAM2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>這個做法就可以讓我們專注測試 Input 的變化，而不受外部參數影響<br>在實際開發情況下 Calculator 的 calc() 這個 method 可能外面會包了好幾層<br>要透過外部一層一層傳入參數到 Input 不知道要花多少時間做調整</p>\n<hr>\n<p>第二個測試與第一個測試實際上是一樣的<br>只是 <code>.when(input.getParam1()).thenReturn(PARAM1)</code> 改為 <code>.doAnswer(invocation -&gt; PARAM1).when(input).getParam1()</code><br><code>doAnswer</code> 這個在一般 mock 也很常用到，根據執行傳入參數來動態決定決定 return 的結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_GetResult300_When_PowerMockInputDoAnswerSuccess</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM1 = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM2 = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Input input = PowerMockito.mock(Input.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.doAnswer(invocation -&gt; PARAM1).when(input).getParam1();</span><br><span class=\"line\">    PowerMockito.doAnswer(invocation -&gt; PARAM2).when(input).getParam2();</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.whenNew(Input.class).withAnyArguments().thenReturn(input);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"keyword\">this</span>.calculator.calc(anyInt(), anyInt());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    verify(input, times(<span class=\"number\">1</span>)).getParam1();</span><br><span class=\"line\">    verify(input, times(<span class=\"number\">1</span>)).getParam2();</span><br><span class=\"line\">    assertThat(result, is(PARAM1 + PARAM2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在目前的需求中使用測試一的寫法就夠了<br>那為什麼在這裡多提醒 <code>doAnswer</code> 的寫法呢？</p>\n<p>因為實際開發中我們會用到 Powermock 的情況下， mock 的對象通常會是 static<br>像這種共用的 Object 和 method 傳入的來源特別雜<br>所以需要根據傳入的參數回傳不同的結果<br>此時 <code>doAnswer</code> 會比 <code>thenReturn</code> 和 <code>doReturn</code> 好用</p>\n<hr>\n<p>第三個測試是強制設置 Output<br>用法與 Input 類似，第 10 行由 <code>withAnyArguments</code> 改為 <code>withNoArguments</code><br>這裡演示沒有參數傳入的做法<br>第 11 行改用 <code>thenAnswer</code> ，這與 <code>doAnswer</code> 用法一樣，根據個人習慣或測試邏輯選一個用就好</p>\n<p>這裡要注意第 14 行不可以傳入 <code>anyInt()</code> 不然會在 calc() 內部<br><code>Input input = new Input(param1, param2)</code> 初始化時發生錯誤<br>除非使用測試一和測試二的寫法 Powermock Input</p>\n<p>這是一般寫測試的新手比較難注意到的地方<br>因為 Powermock 的錯誤訊息並不會提示這個問題<br>只能夠自己小心<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_GetResult1000_When_PowerMockOutputSuccess</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM1 = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM2 = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> OUTPUT_RESULT = <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Output output = PowerMockito.mock(Output.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.whenNew(Output.class).withNoArguments().thenReturn(output);</span><br><span class=\"line\">    PowerMockito.when(output.getResult()).thenAnswer(invocation -&gt; OUTPUT_RESULT);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"keyword\">this</span>.calculator.calc(PARAM1, PARAM2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    verify(output, times(<span class=\"number\">1</span>)).setResult(anyInt());</span><br><span class=\"line\">    verify(output, times(<span class=\"number\">1</span>)).getResult();</span><br><span class=\"line\">    assertThat(result, is(OUTPUT_RESULT));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>執行結果<br><img src=\"/images/java-unit-test-mockito-powermock-2-001.png\" width=\"100%\" height=\"100%\" alt=\"img1\"><br>3 個測試都通過，與預計的結果相符合</p>\n<p><img src=\"/images/java-unit-test-mockito-powermock-2-002.png\" width=\"100%\" height=\"100%\" alt=\"img2\"><br>Unit Test coverage 100%</p>\n<p>今天 Unit Test 就談到這</p>\n<p>實際開發中 Powermock 可以不使用就不要使用，因為它一但用不好<br>可能會影響到其他的測試案例….<br>但有時候卻是必要之惡，不用 Powermock 有些測試情況很難模擬和維護<br>最終造成測試 coverage 不夠完整</p>\n<p>詳情可參考我的 github source code:<br><a href=\"https://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test\" target=\"_blank\" rel=\"noopener\">https://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一段時間沒有更新了<br>趁今天有空來補充一下 Uint Test 在實際開發中會需要使用到 Powermock 的場景</p>\n<p>假設今天需要 mock 的對象只在 method 中使用<br>一般的 mock 做法是無法從外部引入<br>像這個例子，我們想要測試 Calculator ，這裡只有一個簡單的加法操作<br>在某個測試案例中，我們不想依賴 calc() 外部傳入的 param1 和 param2 對 Input 進行初始化<br>或不想回傳實際運算結果，而是強制指定 Output 的回傳內容<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> param1, <span class=\"keyword\">int</span> param2)</span> </span>&#123;</span><br><span class=\"line\">        Input input = <span class=\"keyword\">new</span> Input(param1, param2);</span><br><span class=\"line\">        Output output = <span class=\"keyword\">new</span> Output();</span><br><span class=\"line\"></span><br><span class=\"line\">        addition(input, output);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output.getResult();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addition</span><span class=\"params\">(Input input, Output output)</span> </span>&#123;</span><br><span class=\"line\">        output.setResult(input.getParam1() + input.getParam2());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但 Input 和 Output 不是 Calculator 的 field 無法進行 mock<br>目前只能透過 Powermock 的方式，跨越次元壁強制注入</p>\n<p>在此之前，先補上 Input 和 Output 的結構<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Input</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> param1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> param2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Input</span><span class=\"params\">(<span class=\"keyword\">int</span> param1, <span class=\"keyword\">int</span> param2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param1 = param1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param2 = param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getParam1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getParam2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Output</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Output</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setResult</span><span class=\"params\">(<span class=\"keyword\">int</span> result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>這次改用 @RunWith(PowerMockRunner.class) 當測試的 Runner<br>因為指定了 @PrepareForTest(Calculator.class) ， Calculator 是我們要測試的 class<br>Powermock 需要對它動一些手腳，我們才可以做到跨過次元壁對 Input 和 Output 做設置</p>\n<p>想知道為什麼要加這些 annotation 可以去 google ，網路上一堆，就不在此解釋<br>這裡的重點是示範如何根據測試需求 Powermock Input 和 Output<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(PowerMockRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@PrepareForTest</span>(Calculator.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Calculator calculator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.calculator = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>開始第一個測試<br>Powermock Input ，第 7 ~ 10 行與一般 mock 一樣的流程去 mock Input<br>重點是第 12 行， <code>whenNew(Input.class).withAnyArguments().thenReturn(input)</code><br>再產生 Input Object 的時候，不管傳入任何參數，都指定回傳我們要的 input<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_GetResult300_When_PowerMockInputSuccess</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM1 = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM2 = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Input input = PowerMockito.mock(Input.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.when(input.getParam1()).thenReturn(PARAM1);</span><br><span class=\"line\">    PowerMockito.when(input.getParam2()).thenReturn(PARAM2);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.whenNew(Input.class).withAnyArguments().thenReturn(input);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"keyword\">this</span>.calculator.calc(anyInt(), anyInt());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    verify(input, times(<span class=\"number\">1</span>)).getParam1();</span><br><span class=\"line\">    verify(input, times(<span class=\"number\">1</span>)).getParam2();</span><br><span class=\"line\">    assertThat(result, is(PARAM1 + PARAM2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>這個做法就可以讓我們專注測試 Input 的變化，而不受外部參數影響<br>在實際開發情況下 Calculator 的 calc() 這個 method 可能外面會包了好幾層<br>要透過外部一層一層傳入參數到 Input 不知道要花多少時間做調整</p>\n<hr>\n<p>第二個測試與第一個測試實際上是一樣的<br>只是 <code>.when(input.getParam1()).thenReturn(PARAM1)</code> 改為 <code>.doAnswer(invocation -&gt; PARAM1).when(input).getParam1()</code><br><code>doAnswer</code> 這個在一般 mock 也很常用到，根據執行傳入參數來動態決定決定 return 的結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_GetResult300_When_PowerMockInputDoAnswerSuccess</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM1 = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM2 = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Input input = PowerMockito.mock(Input.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.doAnswer(invocation -&gt; PARAM1).when(input).getParam1();</span><br><span class=\"line\">    PowerMockito.doAnswer(invocation -&gt; PARAM2).when(input).getParam2();</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.whenNew(Input.class).withAnyArguments().thenReturn(input);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"keyword\">this</span>.calculator.calc(anyInt(), anyInt());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    verify(input, times(<span class=\"number\">1</span>)).getParam1();</span><br><span class=\"line\">    verify(input, times(<span class=\"number\">1</span>)).getParam2();</span><br><span class=\"line\">    assertThat(result, is(PARAM1 + PARAM2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在目前的需求中使用測試一的寫法就夠了<br>那為什麼在這裡多提醒 <code>doAnswer</code> 的寫法呢？</p>\n<p>因為實際開發中我們會用到 Powermock 的情況下， mock 的對象通常會是 static<br>像這種共用的 Object 和 method 傳入的來源特別雜<br>所以需要根據傳入的參數回傳不同的結果<br>此時 <code>doAnswer</code> 會比 <code>thenReturn</code> 和 <code>doReturn</code> 好用</p>\n<hr>\n<p>第三個測試是強制設置 Output<br>用法與 Input 類似，第 10 行由 <code>withAnyArguments</code> 改為 <code>withNoArguments</code><br>這裡演示沒有參數傳入的做法<br>第 11 行改用 <code>thenAnswer</code> ，這與 <code>doAnswer</code> 用法一樣，根據個人習慣或測試邏輯選一個用就好</p>\n<p>這裡要注意第 14 行不可以傳入 <code>anyInt()</code> 不然會在 calc() 內部<br><code>Input input = new Input(param1, param2)</code> 初始化時發生錯誤<br>除非使用測試一和測試二的寫法 Powermock Input</p>\n<p>這是一般寫測試的新手比較難注意到的地方<br>因為 Powermock 的錯誤訊息並不會提示這個問題<br>只能夠自己小心<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_GetResult1000_When_PowerMockOutputSuccess</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM1 = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM2 = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> OUTPUT_RESULT = <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Output output = PowerMockito.mock(Output.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.whenNew(Output.class).withNoArguments().thenReturn(output);</span><br><span class=\"line\">    PowerMockito.when(output.getResult()).thenAnswer(invocation -&gt; OUTPUT_RESULT);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"keyword\">this</span>.calculator.calc(PARAM1, PARAM2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    verify(output, times(<span class=\"number\">1</span>)).setResult(anyInt());</span><br><span class=\"line\">    verify(output, times(<span class=\"number\">1</span>)).getResult();</span><br><span class=\"line\">    assertThat(result, is(OUTPUT_RESULT));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>執行結果<br><img src=\"/images/java-unit-test-mockito-powermock-2-001.png\" width=\"100%\" height=\"100%\" alt=\"img1\"><br>3 個測試都通過，與預計的結果相符合</p>\n<p><img src=\"/images/java-unit-test-mockito-powermock-2-002.png\" width=\"100%\" height=\"100%\" alt=\"img2\"><br>Unit Test coverage 100%</p>\n<p>今天 Unit Test 就談到這</p>\n<p>實際開發中 Powermock 可以不使用就不要使用，因為它一但用不好<br>可能會影響到其他的測試案例….<br>但有時候卻是必要之惡，不用 Powermock 有些測試情況很難模擬和維護<br>最終造成測試 coverage 不夠完整</p>\n<p>詳情可參考我的 github source code:<br><a href=\"https://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test\" target=\"_blank\" rel=\"noopener\">https://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test</a></p>\n"},{"title":"spring cloud 使用 gradle 打包 docker image","date":"2019-11-11T08:59:11.000Z","_content":"\n目前在github上看到的spring cloud project中大部分都是使用maven來建立專案\n使用gradle的不太多，更別說是使用gradle將spring cloud service打包成docker image\n因此花了一些時間研究一下如何使用gradle直接建立docker image而不是透過DockerFile\n目前找到一個可以直接將springBootApplication打包成docker image的plugin\n\n在此先看一下目錄結構\n<img src=\"/images/spring-cloud-gradle-docker-001.png\" width=\"300px\" height=\"15%\" alt=\"img1\"/>\n\n第一步先來到spring-cloud project (root)下設置gradle檔案\n第10行引入\"com.bmuschko:gradle-docker-plugin:5.3.0\"才可以讓gradle script實現打包docker image的功能\n第19行引入apply plugin: \"com.bmuschko.docker-spring-boot-application\"讓整個sub project中的module都可以使用\n\n```java\nbuildscript {\n    repositories {\n        jcenter()\n        maven { url 'https://repo.spring.io/milestone' }\n        maven { url 'https://plugins.gradle.org/m2/' }\n    }\n\n    dependencies {\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\"\n        classpath \"com.bmuschko:gradle-docker-plugin:5.3.0\"\n    }\n}\n\nsubprojects {\n    apply plugin: 'idea'\n    apply plugin: 'java'\n    apply plugin: 'org.springframework.boot'\n    apply plugin: \"io.spring.dependency-management\"\n    apply plugin: \"com.bmuschko.docker-spring-boot-application\"\n\n    group = 'pers.henglin'\n    version = '0.0.1-SNAPSHOT'\n    sourceCompatibility = JavaVersion.VERSION_1_8\n\n    jar.enabled = true\n    bootJar.enabled = false\n\n    repositories {\n        jcenter()\n        maven { url 'https://repo.spring.io/milestone' }\n    }\n\n    dependencies {\n        compileOnly 'org.projectlombok:lombok'\n        annotationProcessor 'org.projectlombok:lombok'\n        testImplementation \"org.springframework.boot:spring-boot-starter-test\"\n    }\n\n    dependencyManagement {\n        imports {\n            mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"\n        }\n    }\n}\n```\nroot project下的settings.gradle也要記得設定使用哪些module，不然subprojects區塊內的效果不會引入\n\n```yml\nrootProject.name = 'spring-cloud'\ninclude 'core'\ninclude 'eureka'\ninclude 'demo-server'\ninclude 'demo-client'\n```\n- - -\n第二步來到eureka module下的gradle檔案中設置\n第8~14行打包docker成docker images，baseImage指定docker image，ports指定預設docker image exposed ports\n還有其他的應用和設定可以查看文件：\nhttps://bmuschko.github.io/gradle-docker-plugin/\n此例子是直接使用文件中第4節所提到的springBootApplication的打包功能\n\n```java\ndependencies {\n    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'\n\n    implementation 'org.springframework:springloaded:1.2.8.RELEASE'\n    implementation 'org.springframework.boot:spring-boot-devtools'\n}\n\ndocker {\n    springBootApplication {\n        baseImage = 'openjdk:jre-alpine'\n        maintainer = 'heng-lin \"enjoymycodinglife@gmail.com\"'\n        ports = [8761]\n    }\n}\n```\n- - -\n第三步實現在docker中動態傳參數的效果\n來到eureka module下的application.yml檔案中動態設置hostname\n在此使用環境變量${EUREKA_HOST:localhost}，此語法為若環境變量中有EUREKA_HOST就使用其內容，若無則使用預設值localhost\n未來可在docker下動態設置環境變量來達成傳參的效果\n\n```yml\nserver:\n  port: 8761\n\neureka:\n  instance:\n    hostname: ${EUREKA_HOST:localhost}\n  client:\n    register-with-eureka: false\n    fetch-registry: false\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n\n```\n- - -\n設置docker-compose目錄下的spring-cloud.env檔\n內容中EUREKA_HOST指定hostname為sc-eureka，sc是spring cloud的意思\n\n```yml\n## docker-compose\n\n### mysql\nDATASOURCE_DBTYPE=mysql\nDATASOURCE_HOST=sc-mysql\nDATASOURCE_PORT=3306\nDATASOURCE_USERNAME=root\nDATASOURCE_PASSWORD=123456\nDATASOURCE_DRIVER=com.mysql.jdbc.Driver\n\n### eureka\nEUREKA_HOST=sc-eureka\n```\n- - -\n設置docker-compose目錄下的docker-compose.yml\n第27~34行為eureka module於docker建立container時的設定\n第34行env_file指定spring-cloud.env為變數時，會將EUREKA_HOST=sc-eureka設為docker的環境變數\n因此eureka module下的application.yml也會將hostname: ${EUREKA_HOST:localhost}值設為sc-eureka而不是預設的localhost\n\n```yml\nversion: '3'\nservices:\n  mysql:\n    image: mysql:5.7\n    container_name: sc-mysql\n    restart: always\n    networks:\n      - sc-net\n    ports:\n      - 3306:3306\n    volumes:\n      - ../data/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n\n  demo-server:\n    image: pers.henglin/demo-server:0.0.1-snapshot\n    container_name: sc-demo-server\n    networks:\n      - sc-net\n    ports:\n      - 8081:8081\n    env_file: spring-cloud.env\n    depends_on:\n      - eureka\n\n  eureka:\n    image: pers.henglin/eureka:0.0.1-snapshot\n    container_name: sc-eureka\n    networks:\n      - sc-net\n    ports:\n      - 8761:8761\n    env_file: spring-cloud.env\n\nnetworks:\n  sc-net:\n    external: false\n```\n- - -\n最後來到spring-cloud目錄(root)下設定eureka.sh\n第4~8行移動到eureka module下執行gradle DockerBuildImage會觸發gradle下的docker{...}的打包作業\n第14~17行移動到docker-compose目錄下指定執行eureka (daemon)，會依據docker-compose.yml設定環境變數\n並且啟動docker container\n\n```sh\n#!/bin/bash\n\n# build gradle to docker image\ncd eureka || exit 1\necho 'current dir: ' && pwd\ndocker rm -f sc-eureka &> /dev/null\necho 'build docker image...'\ngradle DockerBuildImage\n\n# root\ncd - || exit 1\n\n# docker run\ncd docker-compose || exit 1\necho 'current dir: ' && pwd\necho 'docker run...'\ndocker-compose -f docker-compose.yml up -d eureka\n```\n- - -\n執行docker ps看到sc-eureka container已啟動\n<img src=\"/images/spring-cloud-gradle-docker-002.png\" width=\"100%\" height=\"50%\" alt=\"img2\"/>\n","source":"_posts/spring-cloud-使用-gradle-打包-docker-image.md","raw":"---\ntitle: spring cloud 使用 gradle 打包 docker image\ndate: 2019-11-11 16:59:11\ntags:\n- gradle\n- docker\n- spring cloud\n---\n\n目前在github上看到的spring cloud project中大部分都是使用maven來建立專案\n使用gradle的不太多，更別說是使用gradle將spring cloud service打包成docker image\n因此花了一些時間研究一下如何使用gradle直接建立docker image而不是透過DockerFile\n目前找到一個可以直接將springBootApplication打包成docker image的plugin\n\n在此先看一下目錄結構\n<img src=\"/images/spring-cloud-gradle-docker-001.png\" width=\"300px\" height=\"15%\" alt=\"img1\"/>\n\n第一步先來到spring-cloud project (root)下設置gradle檔案\n第10行引入\"com.bmuschko:gradle-docker-plugin:5.3.0\"才可以讓gradle script實現打包docker image的功能\n第19行引入apply plugin: \"com.bmuschko.docker-spring-boot-application\"讓整個sub project中的module都可以使用\n\n```java\nbuildscript {\n    repositories {\n        jcenter()\n        maven { url 'https://repo.spring.io/milestone' }\n        maven { url 'https://plugins.gradle.org/m2/' }\n    }\n\n    dependencies {\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\"\n        classpath \"com.bmuschko:gradle-docker-plugin:5.3.0\"\n    }\n}\n\nsubprojects {\n    apply plugin: 'idea'\n    apply plugin: 'java'\n    apply plugin: 'org.springframework.boot'\n    apply plugin: \"io.spring.dependency-management\"\n    apply plugin: \"com.bmuschko.docker-spring-boot-application\"\n\n    group = 'pers.henglin'\n    version = '0.0.1-SNAPSHOT'\n    sourceCompatibility = JavaVersion.VERSION_1_8\n\n    jar.enabled = true\n    bootJar.enabled = false\n\n    repositories {\n        jcenter()\n        maven { url 'https://repo.spring.io/milestone' }\n    }\n\n    dependencies {\n        compileOnly 'org.projectlombok:lombok'\n        annotationProcessor 'org.projectlombok:lombok'\n        testImplementation \"org.springframework.boot:spring-boot-starter-test\"\n    }\n\n    dependencyManagement {\n        imports {\n            mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"\n        }\n    }\n}\n```\nroot project下的settings.gradle也要記得設定使用哪些module，不然subprojects區塊內的效果不會引入\n\n```yml\nrootProject.name = 'spring-cloud'\ninclude 'core'\ninclude 'eureka'\ninclude 'demo-server'\ninclude 'demo-client'\n```\n- - -\n第二步來到eureka module下的gradle檔案中設置\n第8~14行打包docker成docker images，baseImage指定docker image，ports指定預設docker image exposed ports\n還有其他的應用和設定可以查看文件：\nhttps://bmuschko.github.io/gradle-docker-plugin/\n此例子是直接使用文件中第4節所提到的springBootApplication的打包功能\n\n```java\ndependencies {\n    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'\n\n    implementation 'org.springframework:springloaded:1.2.8.RELEASE'\n    implementation 'org.springframework.boot:spring-boot-devtools'\n}\n\ndocker {\n    springBootApplication {\n        baseImage = 'openjdk:jre-alpine'\n        maintainer = 'heng-lin \"enjoymycodinglife@gmail.com\"'\n        ports = [8761]\n    }\n}\n```\n- - -\n第三步實現在docker中動態傳參數的效果\n來到eureka module下的application.yml檔案中動態設置hostname\n在此使用環境變量${EUREKA_HOST:localhost}，此語法為若環境變量中有EUREKA_HOST就使用其內容，若無則使用預設值localhost\n未來可在docker下動態設置環境變量來達成傳參的效果\n\n```yml\nserver:\n  port: 8761\n\neureka:\n  instance:\n    hostname: ${EUREKA_HOST:localhost}\n  client:\n    register-with-eureka: false\n    fetch-registry: false\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n\n```\n- - -\n設置docker-compose目錄下的spring-cloud.env檔\n內容中EUREKA_HOST指定hostname為sc-eureka，sc是spring cloud的意思\n\n```yml\n## docker-compose\n\n### mysql\nDATASOURCE_DBTYPE=mysql\nDATASOURCE_HOST=sc-mysql\nDATASOURCE_PORT=3306\nDATASOURCE_USERNAME=root\nDATASOURCE_PASSWORD=123456\nDATASOURCE_DRIVER=com.mysql.jdbc.Driver\n\n### eureka\nEUREKA_HOST=sc-eureka\n```\n- - -\n設置docker-compose目錄下的docker-compose.yml\n第27~34行為eureka module於docker建立container時的設定\n第34行env_file指定spring-cloud.env為變數時，會將EUREKA_HOST=sc-eureka設為docker的環境變數\n因此eureka module下的application.yml也會將hostname: ${EUREKA_HOST:localhost}值設為sc-eureka而不是預設的localhost\n\n```yml\nversion: '3'\nservices:\n  mysql:\n    image: mysql:5.7\n    container_name: sc-mysql\n    restart: always\n    networks:\n      - sc-net\n    ports:\n      - 3306:3306\n    volumes:\n      - ../data/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n\n  demo-server:\n    image: pers.henglin/demo-server:0.0.1-snapshot\n    container_name: sc-demo-server\n    networks:\n      - sc-net\n    ports:\n      - 8081:8081\n    env_file: spring-cloud.env\n    depends_on:\n      - eureka\n\n  eureka:\n    image: pers.henglin/eureka:0.0.1-snapshot\n    container_name: sc-eureka\n    networks:\n      - sc-net\n    ports:\n      - 8761:8761\n    env_file: spring-cloud.env\n\nnetworks:\n  sc-net:\n    external: false\n```\n- - -\n最後來到spring-cloud目錄(root)下設定eureka.sh\n第4~8行移動到eureka module下執行gradle DockerBuildImage會觸發gradle下的docker{...}的打包作業\n第14~17行移動到docker-compose目錄下指定執行eureka (daemon)，會依據docker-compose.yml設定環境變數\n並且啟動docker container\n\n```sh\n#!/bin/bash\n\n# build gradle to docker image\ncd eureka || exit 1\necho 'current dir: ' && pwd\ndocker rm -f sc-eureka &> /dev/null\necho 'build docker image...'\ngradle DockerBuildImage\n\n# root\ncd - || exit 1\n\n# docker run\ncd docker-compose || exit 1\necho 'current dir: ' && pwd\necho 'docker run...'\ndocker-compose -f docker-compose.yml up -d eureka\n```\n- - -\n執行docker ps看到sc-eureka container已啟動\n<img src=\"/images/spring-cloud-gradle-docker-002.png\" width=\"100%\" height=\"50%\" alt=\"img2\"/>\n","slug":"spring-cloud-使用-gradle-打包-docker-image","published":1,"updated":"2019-11-12T13:01:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr58000p0rpj6gt7rrfq","content":"<p>目前在github上看到的spring cloud project中大部分都是使用maven來建立專案<br>使用gradle的不太多，更別說是使用gradle將spring cloud service打包成docker image<br>因此花了一些時間研究一下如何使用gradle直接建立docker image而不是透過DockerFile<br>目前找到一個可以直接將springBootApplication打包成docker image的plugin</p>\n<p>在此先看一下目錄結構<br><img src=\"/images/spring-cloud-gradle-docker-001.png\" width=\"300px\" height=\"15%\" alt=\"img1\"></p>\n<p>第一步先來到spring-cloud project (root)下設置gradle檔案<br>第10行引入”com.bmuschko:gradle-docker-plugin:5.3.0”才可以讓gradle script實現打包docker image的功能<br>第19行引入apply plugin: “com.bmuschko.docker-spring-boot-application”讓整個sub project中的module都可以使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://repo.spring.io/milestone'</span> &#125;</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://plugins.gradle.org/m2/'</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">\"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;\"</span></span><br><span class=\"line\">        classpath <span class=\"string\">\"com.bmuschko:gradle-docker-plugin:5.3.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">subprojects &#123;</span><br><span class=\"line\">    apply plugin: <span class=\"string\">'idea'</span></span><br><span class=\"line\">    apply plugin: <span class=\"string\">'java'</span></span><br><span class=\"line\">    apply plugin: <span class=\"string\">'org.springframework.boot'</span></span><br><span class=\"line\">    apply plugin: <span class=\"string\">\"io.spring.dependency-management\"</span></span><br><span class=\"line\">    apply plugin: <span class=\"string\">\"com.bmuschko.docker-spring-boot-application\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    group = <span class=\"string\">'pers.henglin'</span></span><br><span class=\"line\">    version = <span class=\"string\">'0.0.1-SNAPSHOT'</span></span><br><span class=\"line\">    sourceCompatibility = JavaVersion.VERSION_1_8</span><br><span class=\"line\"></span><br><span class=\"line\">    jar.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">    bootJar.enabled = <span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://repo.spring.io/milestone'</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        compileOnly <span class=\"string\">'org.projectlombok:lombok'</span></span><br><span class=\"line\">        annotationProcessor <span class=\"string\">'org.projectlombok:lombok'</span></span><br><span class=\"line\">        testImplementation <span class=\"string\">\"org.springframework.boot:spring-boot-starter-test\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencyManagement &#123;</span><br><span class=\"line\">        imports &#123;</span><br><span class=\"line\">            mavenBom <span class=\"string\">\"org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>root project下的settings.gradle也要記得設定使用哪些module，不然subprojects區塊內的效果不會引入</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">rootProject.name</span> <span class=\"string\">=</span> <span class=\"string\">'spring-cloud'</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">'core'</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">'eureka'</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">'demo-server'</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">'demo-client'</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>第二步來到eureka module下的gradle檔案中設置<br>第8~14行打包docker成docker images，baseImage指定docker image，ports指定預設docker image exposed ports<br>還有其他的應用和設定可以查看文件：<br><a href=\"https://bmuschko.github.io/gradle-docker-plugin/\" target=\"_blank\" rel=\"noopener\">https://bmuschko.github.io/gradle-docker-plugin/</a><br>此例子是直接使用文件中第4節所提到的springBootApplication的打包功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    implementation <span class=\"string\">'org.springframework:springloaded:1.2.8.RELEASE'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'org.springframework.boot:spring-boot-devtools'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">docker &#123;</span><br><span class=\"line\">    springBootApplication &#123;</span><br><span class=\"line\">        baseImage = <span class=\"string\">'openjdk:jre-alpine'</span></span><br><span class=\"line\">        maintainer = <span class=\"string\">'heng-lin \"enjoymycodinglife@gmail.com\"'</span></span><br><span class=\"line\">        ports = [<span class=\"number\">8761</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>第三步實現在docker中動態傳參數的效果<br>來到eureka module下的application.yml檔案中動態設置hostname<br>在此使用環境變量${EUREKA_HOST:localhost}，此語法為若環境變量中有EUREKA_HOST就使用其內容，若無則使用預設值localhost<br>未來可在docker下動態設置環境變量來達成傳參的效果</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">$&#123;EUREKA_HOST:localhost&#125;</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>設置docker-compose目錄下的spring-cloud.env檔<br>內容中EUREKA_HOST指定hostname為sc-eureka，sc是spring cloud的意思</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## docker-compose</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### mysql</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_DBTYPE=mysql</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_HOST=sc-mysql</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_PORT=3306</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_USERNAME=root</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_PASSWORD=123456</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_DRIVER=com.mysql.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### eureka</span></span><br><span class=\"line\"><span class=\"string\">EUREKA_HOST=sc-eureka</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>設置docker-compose目錄下的docker-compose.yml<br>第27~34行為eureka module於docker建立container時的設定<br>第34行env_file指定spring-cloud.env為變數時，會將EUREKA_HOST=sc-eureka設為docker的環境變數<br>因此eureka module下的application.yml也會將hostname: ${EUREKA_HOST:localhost}值設為sc-eureka而不是預設的localhost</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  mysql:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mysql:5.7</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">sc-mysql</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">sc-net</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">../data/mysql:/var/lib/mysql</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_ROOT_PASSWORD:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  demo-server:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">pers.henglin/demo-server:0.0.1-snapshot</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">sc-demo-server</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">sc-net</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8081</span><span class=\"string\">:8081</span></span><br><span class=\"line\"><span class=\"attr\">    env_file:</span> <span class=\"string\">spring-cloud.env</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">eureka</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  eureka:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">pers.henglin/eureka:0.0.1-snapshot</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">sc-eureka</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">sc-net</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8761</span><span class=\"string\">:8761</span></span><br><span class=\"line\"><span class=\"attr\">    env_file:</span> <span class=\"string\">spring-cloud.env</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  sc-net:</span></span><br><span class=\"line\"><span class=\"attr\">    external:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>最後來到spring-cloud目錄(root)下設定eureka.sh<br>第4~8行移動到eureka module下執行gradle DockerBuildImage會觸發gradle下的docker{…}的打包作業<br>第14~17行移動到docker-compose目錄下指定執行eureka (daemon)，會依據docker-compose.yml設定環境變數<br>並且啟動docker container</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build gradle to docker image</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> eureka || <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'current dir: '</span> &amp;&amp; <span class=\"built_in\">pwd</span></span><br><span class=\"line\">docker rm -f sc-eureka &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'build docker image...'</span></span><br><span class=\"line\">gradle DockerBuildImage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># root</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> - || <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker run</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> docker-compose || <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'current dir: '</span> &amp;&amp; <span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'docker run...'</span></span><br><span class=\"line\">docker-compose -f docker-compose.yml up -d eureka</span><br></pre></td></tr></table></figure>\n<hr>\n<p>執行docker ps看到sc-eureka container已啟動<br><img src=\"/images/spring-cloud-gradle-docker-002.png\" width=\"100%\" height=\"50%\" alt=\"img2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>目前在github上看到的spring cloud project中大部分都是使用maven來建立專案<br>使用gradle的不太多，更別說是使用gradle將spring cloud service打包成docker image<br>因此花了一些時間研究一下如何使用gradle直接建立docker image而不是透過DockerFile<br>目前找到一個可以直接將springBootApplication打包成docker image的plugin</p>\n<p>在此先看一下目錄結構<br><img src=\"/images/spring-cloud-gradle-docker-001.png\" width=\"300px\" height=\"15%\" alt=\"img1\"></p>\n<p>第一步先來到spring-cloud project (root)下設置gradle檔案<br>第10行引入”com.bmuschko:gradle-docker-plugin:5.3.0”才可以讓gradle script實現打包docker image的功能<br>第19行引入apply plugin: “com.bmuschko.docker-spring-boot-application”讓整個sub project中的module都可以使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://repo.spring.io/milestone'</span> &#125;</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://plugins.gradle.org/m2/'</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">\"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;\"</span></span><br><span class=\"line\">        classpath <span class=\"string\">\"com.bmuschko:gradle-docker-plugin:5.3.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">subprojects &#123;</span><br><span class=\"line\">    apply plugin: <span class=\"string\">'idea'</span></span><br><span class=\"line\">    apply plugin: <span class=\"string\">'java'</span></span><br><span class=\"line\">    apply plugin: <span class=\"string\">'org.springframework.boot'</span></span><br><span class=\"line\">    apply plugin: <span class=\"string\">\"io.spring.dependency-management\"</span></span><br><span class=\"line\">    apply plugin: <span class=\"string\">\"com.bmuschko.docker-spring-boot-application\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    group = <span class=\"string\">'pers.henglin'</span></span><br><span class=\"line\">    version = <span class=\"string\">'0.0.1-SNAPSHOT'</span></span><br><span class=\"line\">    sourceCompatibility = JavaVersion.VERSION_1_8</span><br><span class=\"line\"></span><br><span class=\"line\">    jar.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">    bootJar.enabled = <span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://repo.spring.io/milestone'</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        compileOnly <span class=\"string\">'org.projectlombok:lombok'</span></span><br><span class=\"line\">        annotationProcessor <span class=\"string\">'org.projectlombok:lombok'</span></span><br><span class=\"line\">        testImplementation <span class=\"string\">\"org.springframework.boot:spring-boot-starter-test\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencyManagement &#123;</span><br><span class=\"line\">        imports &#123;</span><br><span class=\"line\">            mavenBom <span class=\"string\">\"org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>root project下的settings.gradle也要記得設定使用哪些module，不然subprojects區塊內的效果不會引入</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">rootProject.name</span> <span class=\"string\">=</span> <span class=\"string\">'spring-cloud'</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">'core'</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">'eureka'</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">'demo-server'</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">'demo-client'</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>第二步來到eureka module下的gradle檔案中設置<br>第8~14行打包docker成docker images，baseImage指定docker image，ports指定預設docker image exposed ports<br>還有其他的應用和設定可以查看文件：<br><a href=\"https://bmuschko.github.io/gradle-docker-plugin/\" target=\"_blank\" rel=\"noopener\">https://bmuschko.github.io/gradle-docker-plugin/</a><br>此例子是直接使用文件中第4節所提到的springBootApplication的打包功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    implementation <span class=\"string\">'org.springframework:springloaded:1.2.8.RELEASE'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'org.springframework.boot:spring-boot-devtools'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">docker &#123;</span><br><span class=\"line\">    springBootApplication &#123;</span><br><span class=\"line\">        baseImage = <span class=\"string\">'openjdk:jre-alpine'</span></span><br><span class=\"line\">        maintainer = <span class=\"string\">'heng-lin \"enjoymycodinglife@gmail.com\"'</span></span><br><span class=\"line\">        ports = [<span class=\"number\">8761</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>第三步實現在docker中動態傳參數的效果<br>來到eureka module下的application.yml檔案中動態設置hostname<br>在此使用環境變量${EUREKA_HOST:localhost}，此語法為若環境變量中有EUREKA_HOST就使用其內容，若無則使用預設值localhost<br>未來可在docker下動態設置環境變量來達成傳參的效果</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">$&#123;EUREKA_HOST:localhost&#125;</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>設置docker-compose目錄下的spring-cloud.env檔<br>內容中EUREKA_HOST指定hostname為sc-eureka，sc是spring cloud的意思</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## docker-compose</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### mysql</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_DBTYPE=mysql</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_HOST=sc-mysql</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_PORT=3306</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_USERNAME=root</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_PASSWORD=123456</span></span><br><span class=\"line\"><span class=\"string\">DATASOURCE_DRIVER=com.mysql.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### eureka</span></span><br><span class=\"line\"><span class=\"string\">EUREKA_HOST=sc-eureka</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>設置docker-compose目錄下的docker-compose.yml<br>第27~34行為eureka module於docker建立container時的設定<br>第34行env_file指定spring-cloud.env為變數時，會將EUREKA_HOST=sc-eureka設為docker的環境變數<br>因此eureka module下的application.yml也會將hostname: ${EUREKA_HOST:localhost}值設為sc-eureka而不是預設的localhost</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  mysql:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mysql:5.7</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">sc-mysql</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">sc-net</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">../data/mysql:/var/lib/mysql</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_ROOT_PASSWORD:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  demo-server:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">pers.henglin/demo-server:0.0.1-snapshot</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">sc-demo-server</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">sc-net</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8081</span><span class=\"string\">:8081</span></span><br><span class=\"line\"><span class=\"attr\">    env_file:</span> <span class=\"string\">spring-cloud.env</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">eureka</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  eureka:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">pers.henglin/eureka:0.0.1-snapshot</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">sc-eureka</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">sc-net</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8761</span><span class=\"string\">:8761</span></span><br><span class=\"line\"><span class=\"attr\">    env_file:</span> <span class=\"string\">spring-cloud.env</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  sc-net:</span></span><br><span class=\"line\"><span class=\"attr\">    external:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>最後來到spring-cloud目錄(root)下設定eureka.sh<br>第4~8行移動到eureka module下執行gradle DockerBuildImage會觸發gradle下的docker{…}的打包作業<br>第14~17行移動到docker-compose目錄下指定執行eureka (daemon)，會依據docker-compose.yml設定環境變數<br>並且啟動docker container</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build gradle to docker image</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> eureka || <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'current dir: '</span> &amp;&amp; <span class=\"built_in\">pwd</span></span><br><span class=\"line\">docker rm -f sc-eureka &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'build docker image...'</span></span><br><span class=\"line\">gradle DockerBuildImage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># root</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> - || <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker run</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> docker-compose || <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'current dir: '</span> &amp;&amp; <span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'docker run...'</span></span><br><span class=\"line\">docker-compose -f docker-compose.yml up -d eureka</span><br></pre></td></tr></table></figure>\n<hr>\n<p>執行docker ps看到sc-eureka container已啟動<br><img src=\"/images/spring-cloud-gradle-docker-002.png\" width=\"100%\" height=\"50%\" alt=\"img2\"></p>\n"},{"title":"你真的了解Java中的Thread運作嗎？ - 容易讓人誤解的synchronized method","date":"2018-04-29T14:11:28.000Z","_content":"今天下午聽到討論java的同事說“在method上面加上synchronized後，當多個thread執行此method時，同一時間只會有一個thread可以進入執行，但沒有synchronized的method不會被鎖住可以進入執行，因為thread是鎖method的”\n前面敘述是OK的，但最後一句話聽起來怪怪的...“thread是鎖method的”，這個說法有點不妥\n\n在某個method上面增加synchronized很直覺的會認為只是會鎖此method，但若實際寫code去驗證的話，在使用javap查看.class檔案會發現不是針對method鎖而是將整個object當作鎖，與synchronized(this)幾乎是一樣的效果，反之若使用某個object當作key如synchronized(key)，此時key就可以當作進入區間的唯一鑰匙，就看誰先搶到進入\n\n以另外一個角度來看，Java的wait(), notify(), notifyAll()都是定義在Object，而不是在thread上，如果thread在sychronized區塊不是針對Object做鎖的動作，那它就需要一個唯一可以當作鎖的依據，可以在sychronized區塊某些情況下釋放鎖給其他thread，很明顯thread中是沒有定義這個東西，還是需要透過Object內的wait()去blocked和notify()做wakeup thread\n\n很多時候程式實際運作與自己想像是有落差的，不論是書上寫的或者在技術blog上讀到的都不一定是對的，只有自己嘗試寫code執行過才會知道\n","source":"_posts/你真的了解Java中的Thread運作嗎？-容易讓人誤解的synchronized-method.md","raw":"---\ntitle: 你真的了解Java中的Thread運作嗎？ - 容易讓人誤解的synchronized method\ndate: 2018-04-29 22:11:28\ntags:\n- java\n- thread\n---\n今天下午聽到討論java的同事說“在method上面加上synchronized後，當多個thread執行此method時，同一時間只會有一個thread可以進入執行，但沒有synchronized的method不會被鎖住可以進入執行，因為thread是鎖method的”\n前面敘述是OK的，但最後一句話聽起來怪怪的...“thread是鎖method的”，這個說法有點不妥\n\n在某個method上面增加synchronized很直覺的會認為只是會鎖此method，但若實際寫code去驗證的話，在使用javap查看.class檔案會發現不是針對method鎖而是將整個object當作鎖，與synchronized(this)幾乎是一樣的效果，反之若使用某個object當作key如synchronized(key)，此時key就可以當作進入區間的唯一鑰匙，就看誰先搶到進入\n\n以另外一個角度來看，Java的wait(), notify(), notifyAll()都是定義在Object，而不是在thread上，如果thread在sychronized區塊不是針對Object做鎖的動作，那它就需要一個唯一可以當作鎖的依據，可以在sychronized區塊某些情況下釋放鎖給其他thread，很明顯thread中是沒有定義這個東西，還是需要透過Object內的wait()去blocked和notify()做wakeup thread\n\n很多時候程式實際運作與自己想像是有落差的，不論是書上寫的或者在技術blog上讀到的都不一定是對的，只有自己嘗試寫code執行過才會知道\n","slug":"你真的了解Java中的Thread運作嗎？-容易讓人誤解的synchronized-method","published":1,"updated":"2020-02-09T22:04:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr59000r0rpj6s40kobs","content":"<p>今天下午聽到討論java的同事說“在method上面加上synchronized後，當多個thread執行此method時，同一時間只會有一個thread可以進入執行，但沒有synchronized的method不會被鎖住可以進入執行，因為thread是鎖method的”<br>前面敘述是OK的，但最後一句話聽起來怪怪的…“thread是鎖method的”，這個說法有點不妥</p>\n<p>在某個method上面增加synchronized很直覺的會認為只是會鎖此method，但若實際寫code去驗證的話，在使用javap查看.class檔案會發現不是針對method鎖而是將整個object當作鎖，與synchronized(this)幾乎是一樣的效果，反之若使用某個object當作key如synchronized(key)，此時key就可以當作進入區間的唯一鑰匙，就看誰先搶到進入</p>\n<p>以另外一個角度來看，Java的wait(), notify(), notifyAll()都是定義在Object，而不是在thread上，如果thread在sychronized區塊不是針對Object做鎖的動作，那它就需要一個唯一可以當作鎖的依據，可以在sychronized區塊某些情況下釋放鎖給其他thread，很明顯thread中是沒有定義這個東西，還是需要透過Object內的wait()去blocked和notify()做wakeup thread</p>\n<p>很多時候程式實際運作與自己想像是有落差的，不論是書上寫的或者在技術blog上讀到的都不一定是對的，只有自己嘗試寫code執行過才會知道</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天下午聽到討論java的同事說“在method上面加上synchronized後，當多個thread執行此method時，同一時間只會有一個thread可以進入執行，但沒有synchronized的method不會被鎖住可以進入執行，因為thread是鎖method的”<br>前面敘述是OK的，但最後一句話聽起來怪怪的…“thread是鎖method的”，這個說法有點不妥</p>\n<p>在某個method上面增加synchronized很直覺的會認為只是會鎖此method，但若實際寫code去驗證的話，在使用javap查看.class檔案會發現不是針對method鎖而是將整個object當作鎖，與synchronized(this)幾乎是一樣的效果，反之若使用某個object當作key如synchronized(key)，此時key就可以當作進入區間的唯一鑰匙，就看誰先搶到進入</p>\n<p>以另外一個角度來看，Java的wait(), notify(), notifyAll()都是定義在Object，而不是在thread上，如果thread在sychronized區塊不是針對Object做鎖的動作，那它就需要一個唯一可以當作鎖的依據，可以在sychronized區塊某些情況下釋放鎖給其他thread，很明顯thread中是沒有定義這個東西，還是需要透過Object內的wait()去blocked和notify()做wakeup thread</p>\n<p>很多時候程式實際運作與自己想像是有落差的，不論是書上寫的或者在技術blog上讀到的都不一定是對的，只有自己嘗試寫code執行過才會知道</p>\n"},{"title":"使用 Gradle 自動初始化 Spock","date":"2018-05-20T14:23:10.000Z","_content":"\n第一次接觸gradle是從v1.7這個版本開始的(2013年)\n工作上則是使用v2.2版本(2014年)，開發上測試是使用junit\n但私底下都使用Spock來測試我自己寫的程式\n因為寫過Spock後就不會想寫junit了... 只是工作上就是規定使用junit...也只能乖乖配合\n\n最近升級gradle順便看一下有支援哪些新的功能，發現從v2.11開始可以直接建立Spock的專案了\n[gradle v2.11 release-notes](https://docs.gradle.org/2.11/release-notes.html?_ga=2.65549740.32788303.1526825308-661634901.1526653677)\n\n再往前查看了一下，發現早在v2.6版開始就有支援Spock，只是沒有指令可以直接建立Spock測試，所以只能算半成品吧，直到v2.11後才算完整\n[gradle v2.6 release-notes](https://docs.gradle.org/2.6/release-notes.html?_ga=2.129521294.32788303.1526825308-661634901.1526653677)\n\n指令很簡單，只需打一行\n```java\ngradle init --type java-library --test-framework spock\n\n```\n想到以後就不需要再自己引入Spock，太感動了\ngradle真的是越來越方便，難怪Android會使用gradle來建立專案\n","source":"_posts/使用-Gradle-自動初始化-Spock.md","raw":"---\ntitle: 使用 Gradle 自動初始化 Spock\ndate: 2018-05-20 22:23:10\ntags:\n- gradle\n- unit test\n---\n\n第一次接觸gradle是從v1.7這個版本開始的(2013年)\n工作上則是使用v2.2版本(2014年)，開發上測試是使用junit\n但私底下都使用Spock來測試我自己寫的程式\n因為寫過Spock後就不會想寫junit了... 只是工作上就是規定使用junit...也只能乖乖配合\n\n最近升級gradle順便看一下有支援哪些新的功能，發現從v2.11開始可以直接建立Spock的專案了\n[gradle v2.11 release-notes](https://docs.gradle.org/2.11/release-notes.html?_ga=2.65549740.32788303.1526825308-661634901.1526653677)\n\n再往前查看了一下，發現早在v2.6版開始就有支援Spock，只是沒有指令可以直接建立Spock測試，所以只能算半成品吧，直到v2.11後才算完整\n[gradle v2.6 release-notes](https://docs.gradle.org/2.6/release-notes.html?_ga=2.129521294.32788303.1526825308-661634901.1526653677)\n\n指令很簡單，只需打一行\n```java\ngradle init --type java-library --test-framework spock\n\n```\n想到以後就不需要再自己引入Spock，太感動了\ngradle真的是越來越方便，難怪Android會使用gradle來建立專案\n","slug":"使用-Gradle-自動初始化-Spock","published":1,"updated":"2018-06-04T15:18:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5a000t0rpjfmkq4ya0","content":"<p>第一次接觸gradle是從v1.7這個版本開始的(2013年)<br>工作上則是使用v2.2版本(2014年)，開發上測試是使用junit<br>但私底下都使用Spock來測試我自己寫的程式<br>因為寫過Spock後就不會想寫junit了… 只是工作上就是規定使用junit…也只能乖乖配合</p>\n<p>最近升級gradle順便看一下有支援哪些新的功能，發現從v2.11開始可以直接建立Spock的專案了<br><a href=\"https://docs.gradle.org/2.11/release-notes.html?_ga=2.65549740.32788303.1526825308-661634901.1526653677\" target=\"_blank\" rel=\"noopener\">gradle v2.11 release-notes</a></p>\n<p>再往前查看了一下，發現早在v2.6版開始就有支援Spock，只是沒有指令可以直接建立Spock測試，所以只能算半成品吧，直到v2.11後才算完整<br><a href=\"https://docs.gradle.org/2.6/release-notes.html?_ga=2.129521294.32788303.1526825308-661634901.1526653677\" target=\"_blank\" rel=\"noopener\">gradle v2.6 release-notes</a></p>\n<p>指令很簡單，只需打一行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle init --type java-library --test-framework spock</span><br></pre></td></tr></table></figure></p>\n<p>想到以後就不需要再自己引入Spock，太感動了<br>gradle真的是越來越方便，難怪Android會使用gradle來建立專案</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一次接觸gradle是從v1.7這個版本開始的(2013年)<br>工作上則是使用v2.2版本(2014年)，開發上測試是使用junit<br>但私底下都使用Spock來測試我自己寫的程式<br>因為寫過Spock後就不會想寫junit了… 只是工作上就是規定使用junit…也只能乖乖配合</p>\n<p>最近升級gradle順便看一下有支援哪些新的功能，發現從v2.11開始可以直接建立Spock的專案了<br><a href=\"https://docs.gradle.org/2.11/release-notes.html?_ga=2.65549740.32788303.1526825308-661634901.1526653677\" target=\"_blank\" rel=\"noopener\">gradle v2.11 release-notes</a></p>\n<p>再往前查看了一下，發現早在v2.6版開始就有支援Spock，只是沒有指令可以直接建立Spock測試，所以只能算半成品吧，直到v2.11後才算完整<br><a href=\"https://docs.gradle.org/2.6/release-notes.html?_ga=2.129521294.32788303.1526825308-661634901.1526653677\" target=\"_blank\" rel=\"noopener\">gradle v2.6 release-notes</a></p>\n<p>指令很簡單，只需打一行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle init --type java-library --test-framework spock</span><br></pre></td></tr></table></figure></p>\n<p>想到以後就不需要再自己引入Spock，太感動了<br>gradle真的是越來越方便，難怪Android會使用gradle來建立專案</p>\n"},{"title":"使用 WeakReference 解決 Android 發生 memory leak 問題","date":"2018-03-10T13:03:49.000Z","_content":"\n源由:\n前陣子在幫忙維護Android APP\n因為客戶反映此APP在運行一天之後輕則沒有反應，重則crash...\n所以需要常常重啟APP\n\n在Android Studio上觀察了一下memory\n執行了一段時間後發現記憶體會不正常增長，就算手動執行GC也無法釋放\n初步研判是發生了memory leak\n馬上做heap dump\n再使用MAT稍微分析了一下\n\n果然...\nactivity的context沒有被正常釋放掉\n主因是activity將自身的context傳給了AsyncTask去執行跟Server拿資料的任務\n因為此APP是屬於Web Service，需要頻繁的執行request\n所以同時間會產生多個AsyncTask\n最終造成多個AsyncTask需等待其他AsyncTask完成任務\n但又佔用activity的context，所以activity無法釋放\n\n簡單的說就是AsyncTask的生命週期比activity的生命週期還要長\n所以activity沒辦法回收memory\n\n確認問題的原因後，接下來就好辦了\n\n首先是解決activity context無法釋放的問題\n在這裡我是將傳入activity context宣告成WeakReference\nWeakReference是Java的弱引用，可以讓 activityContext 可以被系統正常GC\n不會因AsyncTask長期佔用 activityContext 造成 memory 無法釋放的問題發生\n這個問題其實也可以使用SoftReference，它與WeakReference的差別在於\nWeakReference平時在做GC時就會被回收，而SoftReference則是JVM分配的記憶體滿了時做GC時才回收\n此場景在於task用完即可回收，不需要累積到記憶體滿了才回收，所以適合使用WeakReference\n\n```java WeakReference 使用方式\n    WeakReference<Context> contextRef = new WeakReference<Context>(activityContext);\n    if(null != contextRef.get()){//判斷有無被系統GC\n        Context context = contextRef.get();\n        //可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務\n    }\n```\n\n但是最佳的做法應該是不要隨意傳遞activity的context，因為他的生命週期非常短暫\n若真的需要使用context的話應該使用application context，而不是activity context\n因為application context是APP的context，所以不像activity context一直不斷被創建和釋放\n只是application context不能用來更新UI\n\n若想使用activity context去更新UI的話，也應該要回歸到activity內部執行\n而不是讓外部的Object直接引用，無形中提高了memory leak發生的風險\n\n\n","source":"_posts/使用-WeakReference-解決-Android-發生-memory-leak-問題.md","raw":"---\ntitle: 使用 WeakReference 解決 Android 發生 memory leak 問題\ndate: 2018-03-10 21:03:49\ntags:\n- java\n- android\n- memory leak\n---\n\n源由:\n前陣子在幫忙維護Android APP\n因為客戶反映此APP在運行一天之後輕則沒有反應，重則crash...\n所以需要常常重啟APP\n\n在Android Studio上觀察了一下memory\n執行了一段時間後發現記憶體會不正常增長，就算手動執行GC也無法釋放\n初步研判是發生了memory leak\n馬上做heap dump\n再使用MAT稍微分析了一下\n\n果然...\nactivity的context沒有被正常釋放掉\n主因是activity將自身的context傳給了AsyncTask去執行跟Server拿資料的任務\n因為此APP是屬於Web Service，需要頻繁的執行request\n所以同時間會產生多個AsyncTask\n最終造成多個AsyncTask需等待其他AsyncTask完成任務\n但又佔用activity的context，所以activity無法釋放\n\n簡單的說就是AsyncTask的生命週期比activity的生命週期還要長\n所以activity沒辦法回收memory\n\n確認問題的原因後，接下來就好辦了\n\n首先是解決activity context無法釋放的問題\n在這裡我是將傳入activity context宣告成WeakReference\nWeakReference是Java的弱引用，可以讓 activityContext 可以被系統正常GC\n不會因AsyncTask長期佔用 activityContext 造成 memory 無法釋放的問題發生\n這個問題其實也可以使用SoftReference，它與WeakReference的差別在於\nWeakReference平時在做GC時就會被回收，而SoftReference則是JVM分配的記憶體滿了時做GC時才回收\n此場景在於task用完即可回收，不需要累積到記憶體滿了才回收，所以適合使用WeakReference\n\n```java WeakReference 使用方式\n    WeakReference<Context> contextRef = new WeakReference<Context>(activityContext);\n    if(null != contextRef.get()){//判斷有無被系統GC\n        Context context = contextRef.get();\n        //可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務\n    }\n```\n\n但是最佳的做法應該是不要隨意傳遞activity的context，因為他的生命週期非常短暫\n若真的需要使用context的話應該使用application context，而不是activity context\n因為application context是APP的context，所以不像activity context一直不斷被創建和釋放\n只是application context不能用來更新UI\n\n若想使用activity context去更新UI的話，也應該要回歸到activity內部執行\n而不是讓外部的Object直接引用，無形中提高了memory leak發生的風險\n\n\n","slug":"使用-WeakReference-解決-Android-發生-memory-leak-問題","published":1,"updated":"2020-01-21T17:41:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5b000v0rpjr9cwm7h3","content":"<p>源由:<br>前陣子在幫忙維護Android APP<br>因為客戶反映此APP在運行一天之後輕則沒有反應，重則crash…<br>所以需要常常重啟APP</p>\n<p>在Android Studio上觀察了一下memory<br>執行了一段時間後發現記憶體會不正常增長，就算手動執行GC也無法釋放<br>初步研判是發生了memory leak<br>馬上做heap dump<br>再使用MAT稍微分析了一下</p>\n<p>果然…<br>activity的context沒有被正常釋放掉<br>主因是activity將自身的context傳給了AsyncTask去執行跟Server拿資料的任務<br>因為此APP是屬於Web Service，需要頻繁的執行request<br>所以同時間會產生多個AsyncTask<br>最終造成多個AsyncTask需等待其他AsyncTask完成任務<br>但又佔用activity的context，所以activity無法釋放</p>\n<p>簡單的說就是AsyncTask的生命週期比activity的生命週期還要長<br>所以activity沒辦法回收memory</p>\n<p>確認問題的原因後，接下來就好辦了</p>\n<p>首先是解決activity context無法釋放的問題<br>在這裡我是將傳入activity context宣告成WeakReference<br>WeakReference是Java的弱引用，可以讓 activityContext 可以被系統正常GC<br>不會因AsyncTask長期佔用 activityContext 造成 memory 無法釋放的問題發生<br>這個問題其實也可以使用SoftReference，它與WeakReference的差別在於<br>WeakReference平時在做GC時就會被回收，而SoftReference則是JVM分配的記憶體滿了時做GC時才回收<br>此場景在於task用完即可回收，不需要累積到記憶體滿了才回收，所以適合使用WeakReference</p>\n<figure class=\"highlight java\"><figcaption><span>WeakReference 使用方式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakReference&lt;Context&gt; contextRef = <span class=\"keyword\">new</span> WeakReference&lt;Context&gt;(activityContext);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != contextRef.get())&#123;<span class=\"comment\">//判斷有無被系統GC</span></span><br><span class=\"line\">    Context context = contextRef.get();</span><br><span class=\"line\">    <span class=\"comment\">//可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是最佳的做法應該是不要隨意傳遞activity的context，因為他的生命週期非常短暫<br>若真的需要使用context的話應該使用application context，而不是activity context<br>因為application context是APP的context，所以不像activity context一直不斷被創建和釋放<br>只是application context不能用來更新UI</p>\n<p>若想使用activity context去更新UI的話，也應該要回歸到activity內部執行<br>而不是讓外部的Object直接引用，無形中提高了memory leak發生的風險</p>\n","site":{"data":{}},"excerpt":"","more":"<p>源由:<br>前陣子在幫忙維護Android APP<br>因為客戶反映此APP在運行一天之後輕則沒有反應，重則crash…<br>所以需要常常重啟APP</p>\n<p>在Android Studio上觀察了一下memory<br>執行了一段時間後發現記憶體會不正常增長，就算手動執行GC也無法釋放<br>初步研判是發生了memory leak<br>馬上做heap dump<br>再使用MAT稍微分析了一下</p>\n<p>果然…<br>activity的context沒有被正常釋放掉<br>主因是activity將自身的context傳給了AsyncTask去執行跟Server拿資料的任務<br>因為此APP是屬於Web Service，需要頻繁的執行request<br>所以同時間會產生多個AsyncTask<br>最終造成多個AsyncTask需等待其他AsyncTask完成任務<br>但又佔用activity的context，所以activity無法釋放</p>\n<p>簡單的說就是AsyncTask的生命週期比activity的生命週期還要長<br>所以activity沒辦法回收memory</p>\n<p>確認問題的原因後，接下來就好辦了</p>\n<p>首先是解決activity context無法釋放的問題<br>在這裡我是將傳入activity context宣告成WeakReference<br>WeakReference是Java的弱引用，可以讓 activityContext 可以被系統正常GC<br>不會因AsyncTask長期佔用 activityContext 造成 memory 無法釋放的問題發生<br>這個問題其實也可以使用SoftReference，它與WeakReference的差別在於<br>WeakReference平時在做GC時就會被回收，而SoftReference則是JVM分配的記憶體滿了時做GC時才回收<br>此場景在於task用完即可回收，不需要累積到記憶體滿了才回收，所以適合使用WeakReference</p>\n<figure class=\"highlight java\"><figcaption><span>WeakReference 使用方式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakReference&lt;Context&gt; contextRef = <span class=\"keyword\">new</span> WeakReference&lt;Context&gt;(activityContext);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != contextRef.get())&#123;<span class=\"comment\">//判斷有無被系統GC</span></span><br><span class=\"line\">    Context context = contextRef.get();</span><br><span class=\"line\">    <span class=\"comment\">//可以執行到這，就表示 context 還未被系統回收，可繼續做接下來的任務</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是最佳的做法應該是不要隨意傳遞activity的context，因為他的生命週期非常短暫<br>若真的需要使用context的話應該使用application context，而不是activity context<br>因為application context是APP的context，所以不像activity context一直不斷被創建和釋放<br>只是application context不能用來更新UI</p>\n<p>若想使用activity context去更新UI的話，也應該要回歸到activity內部執行<br>而不是讓外部的Object直接引用，無形中提高了memory leak發生的風險</p>\n"},{"title":"使用視覺化來解釋數學原理的youtube - 3Blue1Brown","date":"2018-06-24T15:27:40.000Z","_content":"\n在搜尋傅立葉轉換時偶然看到的影片，要是在以前念碩士期間有這個youtube影片就好了，想當初自己花很多時間在研究\n{% youtube spUNpyF58BY %}\n\n3Blue1Brown上還有許多數學相關視覺化影片，如：線性代數, 微積分, 類神經網路\n{% youtube fNk_zzaMoSs %}\n{% youtube WUvTyaaNkzM %}\n{% youtube aircAruvnKk %}\n","source":"_posts/使用視覺化來解釋數學原理的youtube-3Blue1Brown.md","raw":"---\ntitle: 使用視覺化來解釋數學原理的youtube - 3Blue1Brown\ndate: 2018-06-24 23:27:40\ntags:\n- math\n---\n\n在搜尋傅立葉轉換時偶然看到的影片，要是在以前念碩士期間有這個youtube影片就好了，想當初自己花很多時間在研究\n{% youtube spUNpyF58BY %}\n\n3Blue1Brown上還有許多數學相關視覺化影片，如：線性代數, 微積分, 類神經網路\n{% youtube fNk_zzaMoSs %}\n{% youtube WUvTyaaNkzM %}\n{% youtube aircAruvnKk %}\n","slug":"使用視覺化來解釋數學原理的youtube-3Blue1Brown","published":1,"updated":"2020-01-21T17:10:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5c000x0rpjzplq64pl","content":"<p>在搜尋傅立葉轉換時偶然看到的影片，要是在以前念碩士期間有這個youtube影片就好了，想當初自己花很多時間在研究<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/spUNpyF58BY\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n<p>3Blue1Brown上還有許多數學相關視覺化影片，如：線性代數, 微積分, 類神經網路<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/fNk_zzaMoSs\" frameborder=\"0\" allowfullscreen></iframe></div><br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/WUvTyaaNkzM\" frameborder=\"0\" allowfullscreen></iframe></div><br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/aircAruvnKk\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在搜尋傅立葉轉換時偶然看到的影片，要是在以前念碩士期間有這個youtube影片就好了，想當初自己花很多時間在研究<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/spUNpyF58BY\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n<p>3Blue1Brown上還有許多數學相關視覺化影片，如：線性代數, 微積分, 類神經網路<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/fNk_zzaMoSs\" frameborder=\"0\" allowfullscreen></iframe></div><br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/WUvTyaaNkzM\" frameborder=\"0\" allowfullscreen></iframe></div><br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/aircAruvnKk\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n"},{"title":"對於 Java Fork Join framework 的理解","date":"2020-01-07T12:05:00.000Z","_content":"老實說我在工作中沒直接用過 Java 的 Fork Join 只有以前在作自主練習時用過，知道這個東西\n如果沒有特別需要，也沒有必要為了使用而使用，一切還是要回歸需求面\n因最近複習 multi-thread 的相關知識，才有這個機會再次使用\n它可 parallel 處理 divide and conquer 的問題\n適合可獨立拆分的問題，且拆出的子問題之間不要存在相依性\n感覺很像 MapperReduce 的運作\n\nForkJoinPool:\n與 ThreadPoolExecutor 一樣都是繼承自 AbstractExecutorService\nfork(): 將分割的 task 放入 workQueue ，task 交由 ForkJoinPool 處理\njoin(): blocking 等待 task 完成\n與 ThreadPoolExecutor 不同的是 ForkJoinPool 內的所有 workThread 都有自己的 workQueue\n而 ThreadPoolExecutor 是大家共用一個 workQueue\n這裡要注意的是 workThread 的 workQueue 是 Deque\nworkThread 會從 workQueue 頭部取 task\n當 workThread 內的 workQueue 沒有 task 可執行，會從其他 workThread 的 workQueue 尾端取 task\n\n目前看到比較常用的三種 ForkJoinTask\nRecursiveTask: 有返回值\nRecursiveAction: 無返回值\nCountedCompleter: 完成 task 後將觸發其他 task\n\n- - -\n\n這裡練習使用 RecursiveTask 寫一個 merge sort\n```java\npublic class MergeSort extends RecursiveAction {\n    private final int THRESHOLD;\n    private int[] arr;\n    \n    public MergeSort(final int[] arr, final int threshold){\n        this.arr = arr;\n        this.THRESHOLD = threshold;\n    }\n    \n    @Override\n    protected void compute() {\n        if(arr.length <= THRESHOLD){\n            Arrays.sort(arr);\n            return;\n        }\n        \n        int midIndex = arr.length / 2;\n        int[] leftArr = Arrays.copyOfRange(arr, 0, midIndex);\n        int[] rightArr = Arrays.copyOfRange(arr, midIndex, arr.length);\n        \n        MergeSort left = new MergeSort(leftArr, THRESHOLD);\n        MergeSort right = new MergeSort(rightArr, THRESHOLD);\n        \n        left.fork();\n        right.fork();\n        \n        left.join();\n        right.join();\n        \n        System.out.println(Arrays.toString(left.getArr()));\n        System.out.println(Arrays.toString(right.getArr()));\n        \n        arr = mergeArr(left.getArr(), right.getArr());\n    }\n    \n    public int[] getArr(){\n        return arr;\n    }\n    \n    private int[] mergeArr(final int[] leftArr, final int[] rightArr){\n        int[] resultArr = new int[leftArr.length + rightArr.length];\n        \n        int resultIndex = 0;\n        int leftIndex = 0;\n        int rightIndex = 0;\n        \n        while(leftIndex < leftArr.length && rightIndex < rightArr.length){\n            if(leftArr[leftIndex] <= rightArr[rightIndex]){\n                resultArr[resultIndex] = leftArr[leftIndex];\n                leftIndex++;\n            }else{\n                resultArr[resultIndex] = rightArr[rightIndex];\n                rightIndex++;\n            }\n            resultIndex++;\n        }\n        \n        while(leftIndex < leftArr.length){\n            resultArr[resultIndex] = leftArr[leftIndex];\n            leftIndex++;\n            resultIndex++;\n        }\n        \n        while(rightIndex < rightArr.length){\n            resultArr[resultIndex] = rightArr[rightIndex];\n            rightIndex++;\n            resultIndex++;\n        }\n        \n        return resultArr;\n    }\n}\n```\n\n執行 merge sort\n```java\npublic static void main(String[] args){\n    int[] arr = new Random().ints(25, 1, 100).toArray();\n    System.out.println(\"ori: \" + Arrays.toString(arr) + \"\\n ---\");\n    \n    ForkJoinPool threadPool = new ForkJoinPool(5);\n    MergeSort mergeSort = new MergeSort(arr, 5);\n    threadPool.invoke(mergeSort);\n    System.out.println(\"---\\nresult: \" + Arrays.toString(mergeSort.getArr()));\n\n}\n```\n\n執行結果:\n<img src=\"/images/fork-join-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n\n這篇聊得比較少，也只練習了 RecursiveTask\n目前稍微熟悉一下就好，等未來有需要使用時再深入了解吧\n","source":"_posts/對於-Java-Fork-Join-framework-的理解.md","raw":"---\ntitle: 對於 Java Fork Join framework 的理解\ndate: 2020-01-07 20:05:00\ntags:\n- java\n- thread\n---\n老實說我在工作中沒直接用過 Java 的 Fork Join 只有以前在作自主練習時用過，知道這個東西\n如果沒有特別需要，也沒有必要為了使用而使用，一切還是要回歸需求面\n因最近複習 multi-thread 的相關知識，才有這個機會再次使用\n它可 parallel 處理 divide and conquer 的問題\n適合可獨立拆分的問題，且拆出的子問題之間不要存在相依性\n感覺很像 MapperReduce 的運作\n\nForkJoinPool:\n與 ThreadPoolExecutor 一樣都是繼承自 AbstractExecutorService\nfork(): 將分割的 task 放入 workQueue ，task 交由 ForkJoinPool 處理\njoin(): blocking 等待 task 完成\n與 ThreadPoolExecutor 不同的是 ForkJoinPool 內的所有 workThread 都有自己的 workQueue\n而 ThreadPoolExecutor 是大家共用一個 workQueue\n這裡要注意的是 workThread 的 workQueue 是 Deque\nworkThread 會從 workQueue 頭部取 task\n當 workThread 內的 workQueue 沒有 task 可執行，會從其他 workThread 的 workQueue 尾端取 task\n\n目前看到比較常用的三種 ForkJoinTask\nRecursiveTask: 有返回值\nRecursiveAction: 無返回值\nCountedCompleter: 完成 task 後將觸發其他 task\n\n- - -\n\n這裡練習使用 RecursiveTask 寫一個 merge sort\n```java\npublic class MergeSort extends RecursiveAction {\n    private final int THRESHOLD;\n    private int[] arr;\n    \n    public MergeSort(final int[] arr, final int threshold){\n        this.arr = arr;\n        this.THRESHOLD = threshold;\n    }\n    \n    @Override\n    protected void compute() {\n        if(arr.length <= THRESHOLD){\n            Arrays.sort(arr);\n            return;\n        }\n        \n        int midIndex = arr.length / 2;\n        int[] leftArr = Arrays.copyOfRange(arr, 0, midIndex);\n        int[] rightArr = Arrays.copyOfRange(arr, midIndex, arr.length);\n        \n        MergeSort left = new MergeSort(leftArr, THRESHOLD);\n        MergeSort right = new MergeSort(rightArr, THRESHOLD);\n        \n        left.fork();\n        right.fork();\n        \n        left.join();\n        right.join();\n        \n        System.out.println(Arrays.toString(left.getArr()));\n        System.out.println(Arrays.toString(right.getArr()));\n        \n        arr = mergeArr(left.getArr(), right.getArr());\n    }\n    \n    public int[] getArr(){\n        return arr;\n    }\n    \n    private int[] mergeArr(final int[] leftArr, final int[] rightArr){\n        int[] resultArr = new int[leftArr.length + rightArr.length];\n        \n        int resultIndex = 0;\n        int leftIndex = 0;\n        int rightIndex = 0;\n        \n        while(leftIndex < leftArr.length && rightIndex < rightArr.length){\n            if(leftArr[leftIndex] <= rightArr[rightIndex]){\n                resultArr[resultIndex] = leftArr[leftIndex];\n                leftIndex++;\n            }else{\n                resultArr[resultIndex] = rightArr[rightIndex];\n                rightIndex++;\n            }\n            resultIndex++;\n        }\n        \n        while(leftIndex < leftArr.length){\n            resultArr[resultIndex] = leftArr[leftIndex];\n            leftIndex++;\n            resultIndex++;\n        }\n        \n        while(rightIndex < rightArr.length){\n            resultArr[resultIndex] = rightArr[rightIndex];\n            rightIndex++;\n            resultIndex++;\n        }\n        \n        return resultArr;\n    }\n}\n```\n\n執行 merge sort\n```java\npublic static void main(String[] args){\n    int[] arr = new Random().ints(25, 1, 100).toArray();\n    System.out.println(\"ori: \" + Arrays.toString(arr) + \"\\n ---\");\n    \n    ForkJoinPool threadPool = new ForkJoinPool(5);\n    MergeSort mergeSort = new MergeSort(arr, 5);\n    threadPool.invoke(mergeSort);\n    System.out.println(\"---\\nresult: \" + Arrays.toString(mergeSort.getArr()));\n\n}\n```\n\n執行結果:\n<img src=\"/images/fork-join-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n\n這篇聊得比較少，也只練習了 RecursiveTask\n目前稍微熟悉一下就好，等未來有需要使用時再深入了解吧\n","slug":"對於-Java-Fork-Join-framework-的理解","published":1,"updated":"2020-01-07T15:05:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5c000y0rpjsyavtsg5","content":"<p>老實說我在工作中沒直接用過 Java 的 Fork Join 只有以前在作自主練習時用過，知道這個東西<br>如果沒有特別需要，也沒有必要為了使用而使用，一切還是要回歸需求面<br>因最近複習 multi-thread 的相關知識，才有這個機會再次使用<br>它可 parallel 處理 divide and conquer 的問題<br>適合可獨立拆分的問題，且拆出的子問題之間不要存在相依性<br>感覺很像 MapperReduce 的運作</p>\n<p>ForkJoinPool:<br>與 ThreadPoolExecutor 一樣都是繼承自 AbstractExecutorService<br>fork(): 將分割的 task 放入 workQueue ，task 交由 ForkJoinPool 處理<br>join(): blocking 等待 task 完成<br>與 ThreadPoolExecutor 不同的是 ForkJoinPool 內的所有 workThread 都有自己的 workQueue<br>而 ThreadPoolExecutor 是大家共用一個 workQueue<br>這裡要注意的是 workThread 的 workQueue 是 Deque<br>workThread 會從 workQueue 頭部取 task<br>當 workThread 內的 workQueue 沒有 task 可執行，會從其他 workThread 的 workQueue 尾端取 task</p>\n<p>目前看到比較常用的三種 ForkJoinTask<br>RecursiveTask: 有返回值<br>RecursiveAction: 無返回值<br>CountedCompleter: 完成 task 後將觸發其他 task</p>\n<hr>\n<p>這裡練習使用 RecursiveTask 寫一個 merge sort<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveAction</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THRESHOLD;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MergeSort</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threshold)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arr = arr;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.THRESHOLD = threshold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.length &lt;= THRESHOLD)&#123;</span><br><span class=\"line\">            Arrays.sort(arr);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> midIndex = arr.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] leftArr = Arrays.copyOfRange(arr, <span class=\"number\">0</span>, midIndex);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] rightArr = Arrays.copyOfRange(arr, midIndex, arr.length);</span><br><span class=\"line\">        </span><br><span class=\"line\">        MergeSort left = <span class=\"keyword\">new</span> MergeSort(leftArr, THRESHOLD);</span><br><span class=\"line\">        MergeSort right = <span class=\"keyword\">new</span> MergeSort(rightArr, THRESHOLD);</span><br><span class=\"line\">        </span><br><span class=\"line\">        left.fork();</span><br><span class=\"line\">        right.fork();</span><br><span class=\"line\">        </span><br><span class=\"line\">        left.join();</span><br><span class=\"line\">        right.join();</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(Arrays.toString(left.getArr()));</span><br><span class=\"line\">        System.out.println(Arrays.toString(right.getArr()));</span><br><span class=\"line\">        </span><br><span class=\"line\">        arr = mergeArr(left.getArr(), right.getArr());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getArr()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] mergeArr(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] leftArr, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rightArr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] resultArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[leftArr.length + rightArr.length];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> resultIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(leftIndex &lt; leftArr.length &amp;&amp; rightIndex &lt; rightArr.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(leftArr[leftIndex] &lt;= rightArr[rightIndex])&#123;</span><br><span class=\"line\">                resultArr[resultIndex] = leftArr[leftIndex];</span><br><span class=\"line\">                leftIndex++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                resultArr[resultIndex] = rightArr[rightIndex];</span><br><span class=\"line\">                rightIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resultIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(leftIndex &lt; leftArr.length)&#123;</span><br><span class=\"line\">            resultArr[resultIndex] = leftArr[leftIndex];</span><br><span class=\"line\">            leftIndex++;</span><br><span class=\"line\">            resultIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(rightIndex &lt; rightArr.length)&#123;</span><br><span class=\"line\">            resultArr[resultIndex] = rightArr[rightIndex];</span><br><span class=\"line\">            rightIndex++;</span><br><span class=\"line\">            resultIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultArr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>執行 merge sort<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> Random().ints(<span class=\"number\">25</span>, <span class=\"number\">1</span>, <span class=\"number\">100</span>).toArray();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"ori: \"</span> + Arrays.toString(arr) + <span class=\"string\">\"\\n ---\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ForkJoinPool threadPool = <span class=\"keyword\">new</span> ForkJoinPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">    MergeSort mergeSort = <span class=\"keyword\">new</span> MergeSort(arr, <span class=\"number\">5</span>);</span><br><span class=\"line\">    threadPool.invoke(mergeSort);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"---\\nresult: \"</span> + Arrays.toString(mergeSort.getArr()));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>執行結果:<br><img src=\"/images/fork-join-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<p>這篇聊得比較少，也只練習了 RecursiveTask<br>目前稍微熟悉一下就好，等未來有需要使用時再深入了解吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p>老實說我在工作中沒直接用過 Java 的 Fork Join 只有以前在作自主練習時用過，知道這個東西<br>如果沒有特別需要，也沒有必要為了使用而使用，一切還是要回歸需求面<br>因最近複習 multi-thread 的相關知識，才有這個機會再次使用<br>它可 parallel 處理 divide and conquer 的問題<br>適合可獨立拆分的問題，且拆出的子問題之間不要存在相依性<br>感覺很像 MapperReduce 的運作</p>\n<p>ForkJoinPool:<br>與 ThreadPoolExecutor 一樣都是繼承自 AbstractExecutorService<br>fork(): 將分割的 task 放入 workQueue ，task 交由 ForkJoinPool 處理<br>join(): blocking 等待 task 完成<br>與 ThreadPoolExecutor 不同的是 ForkJoinPool 內的所有 workThread 都有自己的 workQueue<br>而 ThreadPoolExecutor 是大家共用一個 workQueue<br>這裡要注意的是 workThread 的 workQueue 是 Deque<br>workThread 會從 workQueue 頭部取 task<br>當 workThread 內的 workQueue 沒有 task 可執行，會從其他 workThread 的 workQueue 尾端取 task</p>\n<p>目前看到比較常用的三種 ForkJoinTask<br>RecursiveTask: 有返回值<br>RecursiveAction: 無返回值<br>CountedCompleter: 完成 task 後將觸發其他 task</p>\n<hr>\n<p>這裡練習使用 RecursiveTask 寫一個 merge sort<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveAction</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THRESHOLD;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MergeSort</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threshold)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arr = arr;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.THRESHOLD = threshold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.length &lt;= THRESHOLD)&#123;</span><br><span class=\"line\">            Arrays.sort(arr);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> midIndex = arr.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] leftArr = Arrays.copyOfRange(arr, <span class=\"number\">0</span>, midIndex);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] rightArr = Arrays.copyOfRange(arr, midIndex, arr.length);</span><br><span class=\"line\">        </span><br><span class=\"line\">        MergeSort left = <span class=\"keyword\">new</span> MergeSort(leftArr, THRESHOLD);</span><br><span class=\"line\">        MergeSort right = <span class=\"keyword\">new</span> MergeSort(rightArr, THRESHOLD);</span><br><span class=\"line\">        </span><br><span class=\"line\">        left.fork();</span><br><span class=\"line\">        right.fork();</span><br><span class=\"line\">        </span><br><span class=\"line\">        left.join();</span><br><span class=\"line\">        right.join();</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(Arrays.toString(left.getArr()));</span><br><span class=\"line\">        System.out.println(Arrays.toString(right.getArr()));</span><br><span class=\"line\">        </span><br><span class=\"line\">        arr = mergeArr(left.getArr(), right.getArr());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getArr()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] mergeArr(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] leftArr, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] rightArr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] resultArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[leftArr.length + rightArr.length];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> resultIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(leftIndex &lt; leftArr.length &amp;&amp; rightIndex &lt; rightArr.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(leftArr[leftIndex] &lt;= rightArr[rightIndex])&#123;</span><br><span class=\"line\">                resultArr[resultIndex] = leftArr[leftIndex];</span><br><span class=\"line\">                leftIndex++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                resultArr[resultIndex] = rightArr[rightIndex];</span><br><span class=\"line\">                rightIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resultIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(leftIndex &lt; leftArr.length)&#123;</span><br><span class=\"line\">            resultArr[resultIndex] = leftArr[leftIndex];</span><br><span class=\"line\">            leftIndex++;</span><br><span class=\"line\">            resultIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(rightIndex &lt; rightArr.length)&#123;</span><br><span class=\"line\">            resultArr[resultIndex] = rightArr[rightIndex];</span><br><span class=\"line\">            rightIndex++;</span><br><span class=\"line\">            resultIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultArr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>執行 merge sort<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> Random().ints(<span class=\"number\">25</span>, <span class=\"number\">1</span>, <span class=\"number\">100</span>).toArray();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"ori: \"</span> + Arrays.toString(arr) + <span class=\"string\">\"\\n ---\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ForkJoinPool threadPool = <span class=\"keyword\">new</span> ForkJoinPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">    MergeSort mergeSort = <span class=\"keyword\">new</span> MergeSort(arr, <span class=\"number\">5</span>);</span><br><span class=\"line\">    threadPool.invoke(mergeSort);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"---\\nresult: \"</span> + Arrays.toString(mergeSort.getArr()));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>執行結果:<br><img src=\"/images/fork-join-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<p>這篇聊得比較少，也只練習了 RecursiveTask<br>目前稍微熟悉一下就好，等未來有需要使用時再深入了解吧</p>\n"},{"title":"對於 Java ThreadPoolExecutor 的理解","date":"2020-01-05T11:26:00.000Z","_content":"提到 thread 就會想到 thread pool ，因為在實際應用上可能需要處理成千上萬的 task\n不可能一個 task 就開一個 thread 且 thread 過多光是頻繁的 context switch 就可能造成效能低落\n頻繁的創建與銷毀 thread 也是不小的開銷\n所以一般都是根據實際需求創建 thread pool 來控制 thread 個數\nExecutors 有提供好幾種 thread pool 如 newFixedThreadPool, newSingleThreadExecutor, newCachedThreadPool 等\n它們的底層都是使用 ThreadPoolExecutor 搭配不同參數所實現的\n在正常情況下我會依據問題的需求自己調整參數，因為 Executors 大多使用 LinkedBlockingQueue 其預設容量為 Integer.MAX_VALUE\n在高併發下，最終可能累計過多 task 造成 OutOfMemory 的情況發生\n\nThreadPoolExecutor 有7個參數可供調整，只要熟悉每個參數的使用，就可以根據需求來設計 thread pool\n```java\npublic ThreadPoolExecutor(\n            int corePoolSize,\n            int maximumPoolSize,\n            long keepAliveTime,\n            TimeUnit unit,\n            BlockingQueue<Runnable> workQueue,\n            ThreadFactory threadFactory,\n            RejectedExecutionHandler handler) {\n                ...\n}\n```\ncorePoolSize: thread pool 建立後初始化的 thread 個數\nmaximumPoolSize: thread pool 內同時間執行 thread 的上限值，因為當 workQueue 滿了又有 task 進入時需要創建更多 thread 來處理，但不能無限增加 thread 數量，故使用此設定值\nkeepAliveTime: thread pool 沒用到的空閒 thread 的存活時間，因為當 loading 降低時，需要將 thread pool 個數需要降回 corePoolSize 減少資源的浪費\nunit: keepAliveTime 時間的單位\nworkQueue: 任何實現 BlockingQueue 的 queue，放尚未被執行的 task\nthreadFactory: 沒什麼好說的，就生成 thread 用的 factory ，用預設值就好\nhandler(rejected): 當 workQueue滿了且 thread pool 內的 thread 已達 maximumPoolSize 的上限，無法處理新的 task 所以需進行額外的處理\n- - -\n畫個圖簡單說明 ThreadPoolExecutor 執行的情況，以下系列圖中的 t 為 task ，所以 t1 表示 task 1\n實線方體為可用 thread ，虛線方體為未存在的 thread ，長方灰階為 work queue\n這裡 corePoolSize = 2 所以有兩個實線方體， maximumPoolSize = 5 所以最多可生成5個 thread ， workQueue = 4 所以長方灰階最多可排4個 task\n<img src=\"/images/thread-pool-executor-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n- - -\n假設目前 t1, t2, t3 3個 task 執行 execute() 此時需決定是否取得 thread 執行 task ，或者放入 workQueue 等待\n<img src=\"/images/thread-pool-executor-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"/>\n- - -\n可用 thread 個數為2，所以 t1, t2 取得 thread 執行， 而 t3 進入 workQueue 等待\n<img src=\"/images/thread-pool-executor-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"/>\n- - -\n此時 t4, t5, t6 3個 task 執行 execute() 後需決定是否取得 thread 執行 task ，或者放入 workQueue 等待\n<img src=\"/images/thread-pool-executor-004.png\" width=\"50%\" height=\"50%\" alt=\"img4\"/>\n- - -\n無可用 thread 所以 t4, t5, t6 放入 workQueue 等待\n<img src=\"/images/thread-pool-executor-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"/>\n- - -\n很快的 t7, t8, t9 也執行 execute()\n<img src=\"/images/thread-pool-executor-006.png\" width=\"50%\" height=\"50%\" alt=\"img6\"/>\n- - -\n無可用 thread 且 workQueue 已滿，所以生成3個 thread 讓 t3, t4, t5 取得 thread 後 t7, t8, t9 放入 workQueue\n<img src=\"/images/thread-pool-executor-007.png\" width=\"50%\" height=\"50%\" alt=\"img7\"/>\n- - -\nt10 執行 execute() 後發現 thread 個數已達 maximumPoolSize 且 workQueue 已滿，觸發 handler 處理\nRejectedExecutionHandler 提供四種策略\nAbortPolicy: 直接拋出 RejectedExecutionException 阻止正常執行\nCallerRunsPolicy: 不會觸發 exception，回給 caller 執行\nDiscardOldestPolicy: 移除 workQueue 內等待最久的 task ，並將新的 task 放入\nDiscardPolicy: 直接拒絕 task 不觸發任何 exception\n<img src=\"/images/thread-pool-executor-008.png\" width=\"50%\" height=\"50%\" alt=\"img8\"/>\n- - -\n過一段時間 workQueue 已空且只剩2個 thread 被 t8, t9 取用\n<img src=\"/images/thread-pool-executor-009.png\" width=\"50%\" height=\"50%\" alt=\"img9\"/>\n- - -\n又過了一段時間，根據 keepAliveTime = 60, unit = sec 所以在3個未用的 thread 經過60秒後銷毀\n<img src=\"/images/thread-pool-executor-010.png\" width=\"50%\" height=\"50%\" alt=\"img10\"/>\n- - -\n已無任何 task 需要執行， thread pool 回到原始狀態\n<img src=\"/images/thread-pool-executor-001.png\" width=\"50%\" height=\"50%\" alt=\"img11\"/>\n- - -\n了解執行原理後，接下來就需要根據經驗來調整參數\n要如何合理的配置 thread pool 的 thread 個數\n這需要牽扯到要解的問題是遇到 CPU bound 還是 I/O bound\n若是 CPU bound 可以設置 maximumPoolSize 設為趨近目前電腦或 VM 所配置的核心數，減少 context switch 的切換\nJava 可用 Runtime.getRuntime().availableProcessors() 取得此數據\n若是 I/O bound 就可以盡量設置高一點，因為在做頻繁 I/O 時 task 大多需要等待 I/O 執行完畢，卡在身上不如給其他人使用，提高 CPU 的利用率\n以此為基礎多跑幾次實驗，最終可調出較佳的結果，這東西很迷沒有正確的數值只能慢慢調整\n\n結論\n1. 為了效能需求 thread pool 最好使用 ThreadPoolExecutor 依據需求自行設定\n2. 請根據 CPU bound 或 I/O bound 進行調整 thread 個數\n\n","source":"_posts/對於-Java-ThreadPoolExecutor-的理解.md","raw":"---\ntitle: 對於 Java ThreadPoolExecutor 的理解\ndate: 2020-01-05 19:26:00\ntags:\n- java\n- thread\n---\n提到 thread 就會想到 thread pool ，因為在實際應用上可能需要處理成千上萬的 task\n不可能一個 task 就開一個 thread 且 thread 過多光是頻繁的 context switch 就可能造成效能低落\n頻繁的創建與銷毀 thread 也是不小的開銷\n所以一般都是根據實際需求創建 thread pool 來控制 thread 個數\nExecutors 有提供好幾種 thread pool 如 newFixedThreadPool, newSingleThreadExecutor, newCachedThreadPool 等\n它們的底層都是使用 ThreadPoolExecutor 搭配不同參數所實現的\n在正常情況下我會依據問題的需求自己調整參數，因為 Executors 大多使用 LinkedBlockingQueue 其預設容量為 Integer.MAX_VALUE\n在高併發下，最終可能累計過多 task 造成 OutOfMemory 的情況發生\n\nThreadPoolExecutor 有7個參數可供調整，只要熟悉每個參數的使用，就可以根據需求來設計 thread pool\n```java\npublic ThreadPoolExecutor(\n            int corePoolSize,\n            int maximumPoolSize,\n            long keepAliveTime,\n            TimeUnit unit,\n            BlockingQueue<Runnable> workQueue,\n            ThreadFactory threadFactory,\n            RejectedExecutionHandler handler) {\n                ...\n}\n```\ncorePoolSize: thread pool 建立後初始化的 thread 個數\nmaximumPoolSize: thread pool 內同時間執行 thread 的上限值，因為當 workQueue 滿了又有 task 進入時需要創建更多 thread 來處理，但不能無限增加 thread 數量，故使用此設定值\nkeepAliveTime: thread pool 沒用到的空閒 thread 的存活時間，因為當 loading 降低時，需要將 thread pool 個數需要降回 corePoolSize 減少資源的浪費\nunit: keepAliveTime 時間的單位\nworkQueue: 任何實現 BlockingQueue 的 queue，放尚未被執行的 task\nthreadFactory: 沒什麼好說的，就生成 thread 用的 factory ，用預設值就好\nhandler(rejected): 當 workQueue滿了且 thread pool 內的 thread 已達 maximumPoolSize 的上限，無法處理新的 task 所以需進行額外的處理\n- - -\n畫個圖簡單說明 ThreadPoolExecutor 執行的情況，以下系列圖中的 t 為 task ，所以 t1 表示 task 1\n實線方體為可用 thread ，虛線方體為未存在的 thread ，長方灰階為 work queue\n這裡 corePoolSize = 2 所以有兩個實線方體， maximumPoolSize = 5 所以最多可生成5個 thread ， workQueue = 4 所以長方灰階最多可排4個 task\n<img src=\"/images/thread-pool-executor-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n- - -\n假設目前 t1, t2, t3 3個 task 執行 execute() 此時需決定是否取得 thread 執行 task ，或者放入 workQueue 等待\n<img src=\"/images/thread-pool-executor-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"/>\n- - -\n可用 thread 個數為2，所以 t1, t2 取得 thread 執行， 而 t3 進入 workQueue 等待\n<img src=\"/images/thread-pool-executor-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"/>\n- - -\n此時 t4, t5, t6 3個 task 執行 execute() 後需決定是否取得 thread 執行 task ，或者放入 workQueue 等待\n<img src=\"/images/thread-pool-executor-004.png\" width=\"50%\" height=\"50%\" alt=\"img4\"/>\n- - -\n無可用 thread 所以 t4, t5, t6 放入 workQueue 等待\n<img src=\"/images/thread-pool-executor-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"/>\n- - -\n很快的 t7, t8, t9 也執行 execute()\n<img src=\"/images/thread-pool-executor-006.png\" width=\"50%\" height=\"50%\" alt=\"img6\"/>\n- - -\n無可用 thread 且 workQueue 已滿，所以生成3個 thread 讓 t3, t4, t5 取得 thread 後 t7, t8, t9 放入 workQueue\n<img src=\"/images/thread-pool-executor-007.png\" width=\"50%\" height=\"50%\" alt=\"img7\"/>\n- - -\nt10 執行 execute() 後發現 thread 個數已達 maximumPoolSize 且 workQueue 已滿，觸發 handler 處理\nRejectedExecutionHandler 提供四種策略\nAbortPolicy: 直接拋出 RejectedExecutionException 阻止正常執行\nCallerRunsPolicy: 不會觸發 exception，回給 caller 執行\nDiscardOldestPolicy: 移除 workQueue 內等待最久的 task ，並將新的 task 放入\nDiscardPolicy: 直接拒絕 task 不觸發任何 exception\n<img src=\"/images/thread-pool-executor-008.png\" width=\"50%\" height=\"50%\" alt=\"img8\"/>\n- - -\n過一段時間 workQueue 已空且只剩2個 thread 被 t8, t9 取用\n<img src=\"/images/thread-pool-executor-009.png\" width=\"50%\" height=\"50%\" alt=\"img9\"/>\n- - -\n又過了一段時間，根據 keepAliveTime = 60, unit = sec 所以在3個未用的 thread 經過60秒後銷毀\n<img src=\"/images/thread-pool-executor-010.png\" width=\"50%\" height=\"50%\" alt=\"img10\"/>\n- - -\n已無任何 task 需要執行， thread pool 回到原始狀態\n<img src=\"/images/thread-pool-executor-001.png\" width=\"50%\" height=\"50%\" alt=\"img11\"/>\n- - -\n了解執行原理後，接下來就需要根據經驗來調整參數\n要如何合理的配置 thread pool 的 thread 個數\n這需要牽扯到要解的問題是遇到 CPU bound 還是 I/O bound\n若是 CPU bound 可以設置 maximumPoolSize 設為趨近目前電腦或 VM 所配置的核心數，減少 context switch 的切換\nJava 可用 Runtime.getRuntime().availableProcessors() 取得此數據\n若是 I/O bound 就可以盡量設置高一點，因為在做頻繁 I/O 時 task 大多需要等待 I/O 執行完畢，卡在身上不如給其他人使用，提高 CPU 的利用率\n以此為基礎多跑幾次實驗，最終可調出較佳的結果，這東西很迷沒有正確的數值只能慢慢調整\n\n結論\n1. 為了效能需求 thread pool 最好使用 ThreadPoolExecutor 依據需求自行設定\n2. 請根據 CPU bound 或 I/O bound 進行調整 thread 個數\n\n","slug":"對於-Java-ThreadPoolExecutor-的理解","published":1,"updated":"2020-01-07T07:23:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5d000z0rpji7j4she7","content":"<p>提到 thread 就會想到 thread pool ，因為在實際應用上可能需要處理成千上萬的 task<br>不可能一個 task 就開一個 thread 且 thread 過多光是頻繁的 context switch 就可能造成效能低落<br>頻繁的創建與銷毀 thread 也是不小的開銷<br>所以一般都是根據實際需求創建 thread pool 來控制 thread 個數<br>Executors 有提供好幾種 thread pool 如 newFixedThreadPool, newSingleThreadExecutor, newCachedThreadPool 等<br>它們的底層都是使用 ThreadPoolExecutor 搭配不同參數所實現的<br>在正常情況下我會依據問題的需求自己調整參數，因為 Executors 大多使用 LinkedBlockingQueue 其預設容量為 Integer.MAX_VALUE<br>在高併發下，最終可能累計過多 task 造成 OutOfMemory 的情況發生</p>\n<p>ThreadPoolExecutor 有7個參數可供調整，只要熟悉每個參數的使用，就可以根據需求來設計 thread pool<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>corePoolSize: thread pool 建立後初始化的 thread 個數<br>maximumPoolSize: thread pool 內同時間執行 thread 的上限值，因為當 workQueue 滿了又有 task 進入時需要創建更多 thread 來處理，但不能無限增加 thread 數量，故使用此設定值<br>keepAliveTime: thread pool 沒用到的空閒 thread 的存活時間，因為當 loading 降低時，需要將 thread pool 個數需要降回 corePoolSize 減少資源的浪費<br>unit: keepAliveTime 時間的單位<br>workQueue: 任何實現 BlockingQueue 的 queue，放尚未被執行的 task<br>threadFactory: 沒什麼好說的，就生成 thread 用的 factory ，用預設值就好<br>handler(rejected): 當 workQueue滿了且 thread pool 內的 thread 已達 maximumPoolSize 的上限，無法處理新的 task 所以需進行額外的處理</p>\n<hr>\n<p>畫個圖簡單說明 ThreadPoolExecutor 執行的情況，以下系列圖中的 t 為 task ，所以 t1 表示 task 1<br>實線方體為可用 thread ，虛線方體為未存在的 thread ，長方灰階為 work queue<br>這裡 corePoolSize = 2 所以有兩個實線方體， maximumPoolSize = 5 所以最多可生成5個 thread ， workQueue = 4 所以長方灰階最多可排4個 task<br><img src=\"/images/thread-pool-executor-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<hr>\n<p>假設目前 t1, t2, t3 3個 task 執行 execute() 此時需決定是否取得 thread 執行 task ，或者放入 workQueue 等待<br><img src=\"/images/thread-pool-executor-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"></p>\n<hr>\n<p>可用 thread 個數為2，所以 t1, t2 取得 thread 執行， 而 t3 進入 workQueue 等待<br><img src=\"/images/thread-pool-executor-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"></p>\n<hr>\n<p>此時 t4, t5, t6 3個 task 執行 execute() 後需決定是否取得 thread 執行 task ，或者放入 workQueue 等待<br><img src=\"/images/thread-pool-executor-004.png\" width=\"50%\" height=\"50%\" alt=\"img4\"></p>\n<hr>\n<p>無可用 thread 所以 t4, t5, t6 放入 workQueue 等待<br><img src=\"/images/thread-pool-executor-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"></p>\n<hr>\n<p>很快的 t7, t8, t9 也執行 execute()<br><img src=\"/images/thread-pool-executor-006.png\" width=\"50%\" height=\"50%\" alt=\"img6\"></p>\n<hr>\n<p>無可用 thread 且 workQueue 已滿，所以生成3個 thread 讓 t3, t4, t5 取得 thread 後 t7, t8, t9 放入 workQueue<br><img src=\"/images/thread-pool-executor-007.png\" width=\"50%\" height=\"50%\" alt=\"img7\"></p>\n<hr>\n<p>t10 執行 execute() 後發現 thread 個數已達 maximumPoolSize 且 workQueue 已滿，觸發 handler 處理<br>RejectedExecutionHandler 提供四種策略<br>AbortPolicy: 直接拋出 RejectedExecutionException 阻止正常執行<br>CallerRunsPolicy: 不會觸發 exception，回給 caller 執行<br>DiscardOldestPolicy: 移除 workQueue 內等待最久的 task ，並將新的 task 放入<br>DiscardPolicy: 直接拒絕 task 不觸發任何 exception<br><img src=\"/images/thread-pool-executor-008.png\" width=\"50%\" height=\"50%\" alt=\"img8\"></p>\n<hr>\n<p>過一段時間 workQueue 已空且只剩2個 thread 被 t8, t9 取用<br><img src=\"/images/thread-pool-executor-009.png\" width=\"50%\" height=\"50%\" alt=\"img9\"></p>\n<hr>\n<p>又過了一段時間，根據 keepAliveTime = 60, unit = sec 所以在3個未用的 thread 經過60秒後銷毀<br><img src=\"/images/thread-pool-executor-010.png\" width=\"50%\" height=\"50%\" alt=\"img10\"></p>\n<hr>\n<p>已無任何 task 需要執行， thread pool 回到原始狀態<br><img src=\"/images/thread-pool-executor-001.png\" width=\"50%\" height=\"50%\" alt=\"img11\"></p>\n<hr>\n<p>了解執行原理後，接下來就需要根據經驗來調整參數<br>要如何合理的配置 thread pool 的 thread 個數<br>這需要牽扯到要解的問題是遇到 CPU bound 還是 I/O bound<br>若是 CPU bound 可以設置 maximumPoolSize 設為趨近目前電腦或 VM 所配置的核心數，減少 context switch 的切換<br>Java 可用 Runtime.getRuntime().availableProcessors() 取得此數據<br>若是 I/O bound 就可以盡量設置高一點，因為在做頻繁 I/O 時 task 大多需要等待 I/O 執行完畢，卡在身上不如給其他人使用，提高 CPU 的利用率<br>以此為基礎多跑幾次實驗，最終可調出較佳的結果，這東西很迷沒有正確的數值只能慢慢調整</p>\n<p>結論</p>\n<ol>\n<li>為了效能需求 thread pool 最好使用 ThreadPoolExecutor 依據需求自行設定</li>\n<li>請根據 CPU bound 或 I/O bound 進行調整 thread 個數</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>提到 thread 就會想到 thread pool ，因為在實際應用上可能需要處理成千上萬的 task<br>不可能一個 task 就開一個 thread 且 thread 過多光是頻繁的 context switch 就可能造成效能低落<br>頻繁的創建與銷毀 thread 也是不小的開銷<br>所以一般都是根據實際需求創建 thread pool 來控制 thread 個數<br>Executors 有提供好幾種 thread pool 如 newFixedThreadPool, newSingleThreadExecutor, newCachedThreadPool 等<br>它們的底層都是使用 ThreadPoolExecutor 搭配不同參數所實現的<br>在正常情況下我會依據問題的需求自己調整參數，因為 Executors 大多使用 LinkedBlockingQueue 其預設容量為 Integer.MAX_VALUE<br>在高併發下，最終可能累計過多 task 造成 OutOfMemory 的情況發生</p>\n<p>ThreadPoolExecutor 有7個參數可供調整，只要熟悉每個參數的使用，就可以根據需求來設計 thread pool<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>corePoolSize: thread pool 建立後初始化的 thread 個數<br>maximumPoolSize: thread pool 內同時間執行 thread 的上限值，因為當 workQueue 滿了又有 task 進入時需要創建更多 thread 來處理，但不能無限增加 thread 數量，故使用此設定值<br>keepAliveTime: thread pool 沒用到的空閒 thread 的存活時間，因為當 loading 降低時，需要將 thread pool 個數需要降回 corePoolSize 減少資源的浪費<br>unit: keepAliveTime 時間的單位<br>workQueue: 任何實現 BlockingQueue 的 queue，放尚未被執行的 task<br>threadFactory: 沒什麼好說的，就生成 thread 用的 factory ，用預設值就好<br>handler(rejected): 當 workQueue滿了且 thread pool 內的 thread 已達 maximumPoolSize 的上限，無法處理新的 task 所以需進行額外的處理</p>\n<hr>\n<p>畫個圖簡單說明 ThreadPoolExecutor 執行的情況，以下系列圖中的 t 為 task ，所以 t1 表示 task 1<br>實線方體為可用 thread ，虛線方體為未存在的 thread ，長方灰階為 work queue<br>這裡 corePoolSize = 2 所以有兩個實線方體， maximumPoolSize = 5 所以最多可生成5個 thread ， workQueue = 4 所以長方灰階最多可排4個 task<br><img src=\"/images/thread-pool-executor-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<hr>\n<p>假設目前 t1, t2, t3 3個 task 執行 execute() 此時需決定是否取得 thread 執行 task ，或者放入 workQueue 等待<br><img src=\"/images/thread-pool-executor-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"></p>\n<hr>\n<p>可用 thread 個數為2，所以 t1, t2 取得 thread 執行， 而 t3 進入 workQueue 等待<br><img src=\"/images/thread-pool-executor-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"></p>\n<hr>\n<p>此時 t4, t5, t6 3個 task 執行 execute() 後需決定是否取得 thread 執行 task ，或者放入 workQueue 等待<br><img src=\"/images/thread-pool-executor-004.png\" width=\"50%\" height=\"50%\" alt=\"img4\"></p>\n<hr>\n<p>無可用 thread 所以 t4, t5, t6 放入 workQueue 等待<br><img src=\"/images/thread-pool-executor-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"></p>\n<hr>\n<p>很快的 t7, t8, t9 也執行 execute()<br><img src=\"/images/thread-pool-executor-006.png\" width=\"50%\" height=\"50%\" alt=\"img6\"></p>\n<hr>\n<p>無可用 thread 且 workQueue 已滿，所以生成3個 thread 讓 t3, t4, t5 取得 thread 後 t7, t8, t9 放入 workQueue<br><img src=\"/images/thread-pool-executor-007.png\" width=\"50%\" height=\"50%\" alt=\"img7\"></p>\n<hr>\n<p>t10 執行 execute() 後發現 thread 個數已達 maximumPoolSize 且 workQueue 已滿，觸發 handler 處理<br>RejectedExecutionHandler 提供四種策略<br>AbortPolicy: 直接拋出 RejectedExecutionException 阻止正常執行<br>CallerRunsPolicy: 不會觸發 exception，回給 caller 執行<br>DiscardOldestPolicy: 移除 workQueue 內等待最久的 task ，並將新的 task 放入<br>DiscardPolicy: 直接拒絕 task 不觸發任何 exception<br><img src=\"/images/thread-pool-executor-008.png\" width=\"50%\" height=\"50%\" alt=\"img8\"></p>\n<hr>\n<p>過一段時間 workQueue 已空且只剩2個 thread 被 t8, t9 取用<br><img src=\"/images/thread-pool-executor-009.png\" width=\"50%\" height=\"50%\" alt=\"img9\"></p>\n<hr>\n<p>又過了一段時間，根據 keepAliveTime = 60, unit = sec 所以在3個未用的 thread 經過60秒後銷毀<br><img src=\"/images/thread-pool-executor-010.png\" width=\"50%\" height=\"50%\" alt=\"img10\"></p>\n<hr>\n<p>已無任何 task 需要執行， thread pool 回到原始狀態<br><img src=\"/images/thread-pool-executor-001.png\" width=\"50%\" height=\"50%\" alt=\"img11\"></p>\n<hr>\n<p>了解執行原理後，接下來就需要根據經驗來調整參數<br>要如何合理的配置 thread pool 的 thread 個數<br>這需要牽扯到要解的問題是遇到 CPU bound 還是 I/O bound<br>若是 CPU bound 可以設置 maximumPoolSize 設為趨近目前電腦或 VM 所配置的核心數，減少 context switch 的切換<br>Java 可用 Runtime.getRuntime().availableProcessors() 取得此數據<br>若是 I/O bound 就可以盡量設置高一點，因為在做頻繁 I/O 時 task 大多需要等待 I/O 執行完畢，卡在身上不如給其他人使用，提高 CPU 的利用率<br>以此為基礎多跑幾次實驗，最終可調出較佳的結果，這東西很迷沒有正確的數值只能慢慢調整</p>\n<p>結論</p>\n<ol>\n<li>為了效能需求 thread pool 最好使用 ThreadPoolExecutor 依據需求自行設定</li>\n<li>請根據 CPU bound 或 I/O bound 進行調整 thread 個數</li>\n</ol>\n"},{"title":"提升Socket傳送Large file的速度","date":"2018-05-13T15:43:53.000Z","_content":"\n在工作上遇到前端上傳large file後需再透過socket傳送給某個service處理\n這裡的service是用C#實現，所以是client (Java) -> server (C#)\n在傳送前一開始就會拿到一個完整的byte array\n若只是幾kb的小檔案最快的做法當然是直接\n`write(byte[] bytes, 0, bytes.length);`\n但是遇到這麼大的檔案不可能這麼做，根據經驗會爆掉的機會很高，只能分成多次寫入\n最先想到的是用NIO的方式ByteBuffer.allocate(size)方式建立緩衝，取得SocketChannel後分批將buffer內的資料透過channel送出，想必處理速度會快很多\n但經過測試各種方法後，發現直接取得檔案大小後直接切好buffer大小，接著操作OutputStream直接寫入的處理的速度是最快的\n在此情境下NIO(buffer)處理比直接寫OutputStream(stream)還慢有可能是網路傳輸還是以stream方式傳輸或者與service方的socket server實現的方式有關吧(server端是C#實現)...\n若client和server都是使用Java感覺應該會是NIO略勝一籌\n\n其實這個做法其實跟Java本身提供的BufferedOutputStream做法一樣\n只是不需要另外檢查buffer是否寫滿(因為這個做法在一開始就知道要切到哪一個byte)\n也少了一層FilterOutputStream (它們的轉換關係 BufferedOutputStream -> FilterOutputStrean -> OutputStream)\n而是選擇直接操作OutputStream，所以才可以做到如此快速\n\n提醒一下\n這個方式比較不適合用在\"讀檔\"後使用socket傳送大檔案\n因為讀檔可以邊讀邊傳(寫入)可以有效降低memory的使用量，所以直接串BufferedOutputStream\n或者使用ByteBuffer串channel，畢竟使用NIO從硬碟讀取大的檔案速度會比傳統Java I/O快很多\n\n最終的程式碼如下\n\n```java\n    private static final int BYTE_BUF_SIZE = 8192;\n    \n    private boolean sendCmd(String ip, int port, byte[] byteArray){\n        boolean isSuccess = true;\n        Socket socket = null;\n        int bufSize = BYTE_BUF_SIZE;// buffer limit\n        int byteArrayLength = byteArray.length;\n        int writeCount = byteArrayLength / bufSize;// how many times to write\n        int byteRemain = byteArrayLength % bufSize;// how many bytes are left\n        int offset = 0;\n        try {\n            socket = new Socket(ip, port);\n            OutputStream out = socket.getOutputStream();\n            for(int count=0; count<writeCount; count++){\n                out.write(byteArray, offset, bufSize);\n                offset += bufSize;\n            }\n            if(byteRemain > 0){// have the remaining bytes\n                out.write(byteArray, offset, byteRemain);\n            }\n            out.flush();\n            out.close();\n            socket.shutdownOutput();\n        } catch (IOException e) {\n            logger.warn(\"use socket send command fail!!, ip: {}, port: {} exceptionMsg:{}\", ip, port, e);\n            isSuccess = false;\n        }finally {\n            if(socket != null){\n                try {\n                    socket.close();\n                } catch (IOException e1) {\n                    logger.warn(\"socket close fail: {}\", e1);\n                    isSuccess = false;\n                }\n            }\n            return isSuccess;\n        }\n    }\n```\n","source":"_posts/提升Socket傳送Large-file的速度.md","raw":"---\ntitle: 提升Socket傳送Large file的速度\ndate: 2018-05-13 23:43:53\ntags:\n- java\n---\n\n在工作上遇到前端上傳large file後需再透過socket傳送給某個service處理\n這裡的service是用C#實現，所以是client (Java) -> server (C#)\n在傳送前一開始就會拿到一個完整的byte array\n若只是幾kb的小檔案最快的做法當然是直接\n`write(byte[] bytes, 0, bytes.length);`\n但是遇到這麼大的檔案不可能這麼做，根據經驗會爆掉的機會很高，只能分成多次寫入\n最先想到的是用NIO的方式ByteBuffer.allocate(size)方式建立緩衝，取得SocketChannel後分批將buffer內的資料透過channel送出，想必處理速度會快很多\n但經過測試各種方法後，發現直接取得檔案大小後直接切好buffer大小，接著操作OutputStream直接寫入的處理的速度是最快的\n在此情境下NIO(buffer)處理比直接寫OutputStream(stream)還慢有可能是網路傳輸還是以stream方式傳輸或者與service方的socket server實現的方式有關吧(server端是C#實現)...\n若client和server都是使用Java感覺應該會是NIO略勝一籌\n\n其實這個做法其實跟Java本身提供的BufferedOutputStream做法一樣\n只是不需要另外檢查buffer是否寫滿(因為這個做法在一開始就知道要切到哪一個byte)\n也少了一層FilterOutputStream (它們的轉換關係 BufferedOutputStream -> FilterOutputStrean -> OutputStream)\n而是選擇直接操作OutputStream，所以才可以做到如此快速\n\n提醒一下\n這個方式比較不適合用在\"讀檔\"後使用socket傳送大檔案\n因為讀檔可以邊讀邊傳(寫入)可以有效降低memory的使用量，所以直接串BufferedOutputStream\n或者使用ByteBuffer串channel，畢竟使用NIO從硬碟讀取大的檔案速度會比傳統Java I/O快很多\n\n最終的程式碼如下\n\n```java\n    private static final int BYTE_BUF_SIZE = 8192;\n    \n    private boolean sendCmd(String ip, int port, byte[] byteArray){\n        boolean isSuccess = true;\n        Socket socket = null;\n        int bufSize = BYTE_BUF_SIZE;// buffer limit\n        int byteArrayLength = byteArray.length;\n        int writeCount = byteArrayLength / bufSize;// how many times to write\n        int byteRemain = byteArrayLength % bufSize;// how many bytes are left\n        int offset = 0;\n        try {\n            socket = new Socket(ip, port);\n            OutputStream out = socket.getOutputStream();\n            for(int count=0; count<writeCount; count++){\n                out.write(byteArray, offset, bufSize);\n                offset += bufSize;\n            }\n            if(byteRemain > 0){// have the remaining bytes\n                out.write(byteArray, offset, byteRemain);\n            }\n            out.flush();\n            out.close();\n            socket.shutdownOutput();\n        } catch (IOException e) {\n            logger.warn(\"use socket send command fail!!, ip: {}, port: {} exceptionMsg:{}\", ip, port, e);\n            isSuccess = false;\n        }finally {\n            if(socket != null){\n                try {\n                    socket.close();\n                } catch (IOException e1) {\n                    logger.warn(\"socket close fail: {}\", e1);\n                    isSuccess = false;\n                }\n            }\n            return isSuccess;\n        }\n    }\n```\n","slug":"提升Socket傳送Large-file的速度","published":1,"updated":"2020-01-23T18:42:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5e00120rpjzkf337kx","content":"<p>在工作上遇到前端上傳large file後需再透過socket傳送給某個service處理<br>這裡的service是用C#實現，所以是client (Java) -&gt; server (C#)<br>在傳送前一開始就會拿到一個完整的byte array<br>若只是幾kb的小檔案最快的做法當然是直接<br><code>write(byte[] bytes, 0, bytes.length);</code><br>但是遇到這麼大的檔案不可能這麼做，根據經驗會爆掉的機會很高，只能分成多次寫入<br>最先想到的是用NIO的方式ByteBuffer.allocate(size)方式建立緩衝，取得SocketChannel後分批將buffer內的資料透過channel送出，想必處理速度會快很多<br>但經過測試各種方法後，發現直接取得檔案大小後直接切好buffer大小，接著操作OutputStream直接寫入的處理的速度是最快的<br>在此情境下NIO(buffer)處理比直接寫OutputStream(stream)還慢有可能是網路傳輸還是以stream方式傳輸或者與service方的socket server實現的方式有關吧(server端是C#實現)…<br>若client和server都是使用Java感覺應該會是NIO略勝一籌</p>\n<p>其實這個做法其實跟Java本身提供的BufferedOutputStream做法一樣<br>只是不需要另外檢查buffer是否寫滿(因為這個做法在一開始就知道要切到哪一個byte)<br>也少了一層FilterOutputStream (它們的轉換關係 BufferedOutputStream -&gt; FilterOutputStrean -&gt; OutputStream)<br>而是選擇直接操作OutputStream，所以才可以做到如此快速</p>\n<p>提醒一下<br>這個方式比較不適合用在”讀檔”後使用socket傳送大檔案<br>因為讀檔可以邊讀邊傳(寫入)可以有效降低memory的使用量，所以直接串BufferedOutputStream<br>或者使用ByteBuffer串channel，畢竟使用NIO從硬碟讀取大的檔案速度會比傳統Java I/O快很多</p>\n<p>最終的程式碼如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BYTE_BUF_SIZE = <span class=\"number\">8192</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendCmd</span><span class=\"params\">(String ip, <span class=\"keyword\">int</span> port, <span class=\"keyword\">byte</span>[] byteArray)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isSuccess = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bufSize = BYTE_BUF_SIZE;<span class=\"comment\">// buffer limit</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> byteArrayLength = byteArray.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> writeCount = byteArrayLength / bufSize;<span class=\"comment\">// how many times to write</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> byteRemain = byteArrayLength % bufSize;<span class=\"comment\">// how many bytes are left</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        socket = <span class=\"keyword\">new</span> Socket(ip, port);</span><br><span class=\"line\">        OutputStream out = socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> count=<span class=\"number\">0</span>; count&lt;writeCount; count++)&#123;</span><br><span class=\"line\">            out.write(byteArray, offset, bufSize);</span><br><span class=\"line\">            offset += bufSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(byteRemain &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">// have the remaining bytes</span></span><br><span class=\"line\">            out.write(byteArray, offset, byteRemain);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">        socket.shutdownOutput();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        logger.warn(<span class=\"string\">\"use socket send command fail!!, ip: &#123;&#125;, port: &#123;&#125; exceptionMsg:&#123;&#125;\"</span>, ip, port, e);</span><br><span class=\"line\">        isSuccess = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(socket != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"socket close fail: &#123;&#125;\"</span>, e1);</span><br><span class=\"line\">                isSuccess = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSuccess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在工作上遇到前端上傳large file後需再透過socket傳送給某個service處理<br>這裡的service是用C#實現，所以是client (Java) -&gt; server (C#)<br>在傳送前一開始就會拿到一個完整的byte array<br>若只是幾kb的小檔案最快的做法當然是直接<br><code>write(byte[] bytes, 0, bytes.length);</code><br>但是遇到這麼大的檔案不可能這麼做，根據經驗會爆掉的機會很高，只能分成多次寫入<br>最先想到的是用NIO的方式ByteBuffer.allocate(size)方式建立緩衝，取得SocketChannel後分批將buffer內的資料透過channel送出，想必處理速度會快很多<br>但經過測試各種方法後，發現直接取得檔案大小後直接切好buffer大小，接著操作OutputStream直接寫入的處理的速度是最快的<br>在此情境下NIO(buffer)處理比直接寫OutputStream(stream)還慢有可能是網路傳輸還是以stream方式傳輸或者與service方的socket server實現的方式有關吧(server端是C#實現)…<br>若client和server都是使用Java感覺應該會是NIO略勝一籌</p>\n<p>其實這個做法其實跟Java本身提供的BufferedOutputStream做法一樣<br>只是不需要另外檢查buffer是否寫滿(因為這個做法在一開始就知道要切到哪一個byte)<br>也少了一層FilterOutputStream (它們的轉換關係 BufferedOutputStream -&gt; FilterOutputStrean -&gt; OutputStream)<br>而是選擇直接操作OutputStream，所以才可以做到如此快速</p>\n<p>提醒一下<br>這個方式比較不適合用在”讀檔”後使用socket傳送大檔案<br>因為讀檔可以邊讀邊傳(寫入)可以有效降低memory的使用量，所以直接串BufferedOutputStream<br>或者使用ByteBuffer串channel，畢竟使用NIO從硬碟讀取大的檔案速度會比傳統Java I/O快很多</p>\n<p>最終的程式碼如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BYTE_BUF_SIZE = <span class=\"number\">8192</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendCmd</span><span class=\"params\">(String ip, <span class=\"keyword\">int</span> port, <span class=\"keyword\">byte</span>[] byteArray)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isSuccess = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bufSize = BYTE_BUF_SIZE;<span class=\"comment\">// buffer limit</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> byteArrayLength = byteArray.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> writeCount = byteArrayLength / bufSize;<span class=\"comment\">// how many times to write</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> byteRemain = byteArrayLength % bufSize;<span class=\"comment\">// how many bytes are left</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        socket = <span class=\"keyword\">new</span> Socket(ip, port);</span><br><span class=\"line\">        OutputStream out = socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> count=<span class=\"number\">0</span>; count&lt;writeCount; count++)&#123;</span><br><span class=\"line\">            out.write(byteArray, offset, bufSize);</span><br><span class=\"line\">            offset += bufSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(byteRemain &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">// have the remaining bytes</span></span><br><span class=\"line\">            out.write(byteArray, offset, byteRemain);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">        socket.shutdownOutput();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        logger.warn(<span class=\"string\">\"use socket send command fail!!, ip: &#123;&#125;, port: &#123;&#125; exceptionMsg:&#123;&#125;\"</span>, ip, port, e);</span><br><span class=\"line\">        isSuccess = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(socket != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"socket close fail: &#123;&#125;\"</span>, e1);</span><br><span class=\"line\">                isSuccess = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSuccess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"更換hexo themes","date":"2018-02-20T13:41:43.000Z","_content":"\n稍微嘗試更換hexo themes\n雖然原生的landscape theme的介面已經很簡潔\n但還是想要更精簡一些\n\n比較了幾個比較知名的theme\n最後決定使用yilia這個theme\n介面簡潔乾淨而且RWD的效果也不錯\n除了不支援舊版IE以外沒什麼好挑惕的\n也順便學習設定disqus當作留言板\n\n","source":"_posts/更換hexo-themes.md","raw":"---\ntitle: 更換hexo themes\ndate: 2018-02-20 21:41:43\ntags:\n- hexo\n---\n\n稍微嘗試更換hexo themes\n雖然原生的landscape theme的介面已經很簡潔\n但還是想要更精簡一些\n\n比較了幾個比較知名的theme\n最後決定使用yilia這個theme\n介面簡潔乾淨而且RWD的效果也不錯\n除了不支援舊版IE以外沒什麼好挑惕的\n也順便學習設定disqus當作留言板\n\n","slug":"更換hexo-themes","published":1,"updated":"2019-10-22T02:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5f00140rpju8fh5844","content":"<p>稍微嘗試更換hexo themes<br>雖然原生的landscape theme的介面已經很簡潔<br>但還是想要更精簡一些</p>\n<p>比較了幾個比較知名的theme<br>最後決定使用yilia這個theme<br>介面簡潔乾淨而且RWD的效果也不錯<br>除了不支援舊版IE以外沒什麼好挑惕的<br>也順便學習設定disqus當作留言板</p>\n","site":{"data":{}},"excerpt":"","more":"<p>稍微嘗試更換hexo themes<br>雖然原生的landscape theme的介面已經很簡潔<br>但還是想要更精簡一些</p>\n<p>比較了幾個比較知名的theme<br>最後決定使用yilia這個theme<br>介面簡潔乾淨而且RWD的效果也不錯<br>除了不支援舊版IE以外沒什麼好挑惕的<br>也順便學習設定disqus當作留言板</p>\n"},{"title":"第一篇Blog，從SVN到Git","date":"2018-02-16T09:28:42.000Z","_content":"\n今天是大年初一\n趁春節的這段時間，來讀之前買的 O'Reilly “版本控制使用Git”\n\n在這之前都是使用SVN來管理自己的source code\n直到去年我的MacBook Pro的SSD硬碟無預期掛掉...\n近五年的code就跟著一起消失了...\n\n人不能太鐵齒，應該要花個小錢買個隨身硬碟做Time machine...\n\n所以今年改使用Git管理，因為可以免費將code上傳到github上儲存\n至少下次硬碟壞掉時，code不會跟著蒸發\n","source":"_posts/第一篇Blog，從SVN到Git.md","raw":"---\ntitle: 第一篇Blog，從SVN到Git\ndate: 2018-02-16 17:28:42\ntags:\n- Blog\n---\n\n今天是大年初一\n趁春節的這段時間，來讀之前買的 O'Reilly “版本控制使用Git”\n\n在這之前都是使用SVN來管理自己的source code\n直到去年我的MacBook Pro的SSD硬碟無預期掛掉...\n近五年的code就跟著一起消失了...\n\n人不能太鐵齒，應該要花個小錢買個隨身硬碟做Time machine...\n\n所以今年改使用Git管理，因為可以免費將code上傳到github上儲存\n至少下次硬碟壞掉時，code不會跟著蒸發\n","slug":"第一篇Blog，從SVN到Git","published":1,"updated":"2019-11-03T14:02:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5g00170rpjpkus34pq","content":"<p>今天是大年初一<br>趁春節的這段時間，來讀之前買的 O’Reilly “版本控制使用Git”</p>\n<p>在這之前都是使用SVN來管理自己的source code<br>直到去年我的MacBook Pro的SSD硬碟無預期掛掉…<br>近五年的code就跟著一起消失了…</p>\n<p>人不能太鐵齒，應該要花個小錢買個隨身硬碟做Time machine…</p>\n<p>所以今年改使用Git管理，因為可以免費將code上傳到github上儲存<br>至少下次硬碟壞掉時，code不會跟著蒸發</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天是大年初一<br>趁春節的這段時間，來讀之前買的 O’Reilly “版本控制使用Git”</p>\n<p>在這之前都是使用SVN來管理自己的source code<br>直到去年我的MacBook Pro的SSD硬碟無預期掛掉…<br>近五年的code就跟著一起消失了…</p>\n<p>人不能太鐵齒，應該要花個小錢買個隨身硬碟做Time machine…</p>\n<p>所以今年改使用Git管理，因為可以免費將code上傳到github上儲存<br>至少下次硬碟壞掉時，code不會跟著蒸發</p>\n"},{"title":"標準常態分佈的機率密度函數","date":"2018-03-24T14:03:21.000Z","_content":"\n前陣子在做SPC逆向工程...\n為此還買了一本簡體書“程序員的數學2 概率與統計”來複習一下統計的觀念\n皇天不負苦心人，在經過多天的努力，最終成功的產出與“SPC參考對象”相同的結果\n為了找到正確的偏移量，在此期間不知實作了多少種不同的標準差...\n\n下一個任務是需要產生機率密度函數去看資料的離散程度...\n至於什麼是常態分佈，可以到{% link 常態分佈wiki https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83 %}上看，應該會比我自己說還要詳細\n一直很好奇為什麼要定義成鐘型，看了下面的youtube影片就才了解，這是自然界的一種規律(巧合？)\n\n{% youtube 4HpvBZnHOVI %}\n\n許多球從中間落下（期望值的位置），最終形成的結果接近於鐘型\n\n上面簡介完了，接著進入主題，開始剖析標準常態分佈的機率密度函數的公式\n$ f(x) = {1 \\over \\sqrt{2\\pi}}\\exp(-{x^2 \\over 2}) $\n\n如果直接從wiki看完公式後，很容易實作出來，只是我更想知道公式背後的原理\n以下是我看書和上網查完資料後，根據自己理解所歸納的結果(趁印象深刻趕快記錄下來)\n\n這時需要將公式拆成兩個部分來看\n現在先看 $ f(x) = \\exp(-{x^2}) $ 這部分：\n\n為什麼要使用 $ -x^2 $ 呢？ \n我們知道$ x^2 $函數是開口向上的鐘型形狀，如下圖所示(以下圖片都是透過Maxima產生)：\n![x^2](/images/st-001.png)\n但我們要的鐘型是開口向下，想要開口向下只需要乘上-1，即 $ -x^2 $\n![-x^2](/images/st-002.png)\n\n接下來看整個 $ \\exp(-{x^2}) $ \n因為經過 $ -x^2 $ 的函數所得的的值是“恆負”的(除了頂點值為0)，永遠落在第二和第三象限\n但是當 $ -x^2 $ 當作常數為底的指數時，透過函數所得到的值是“恆正”的，就會落在第一和第四象限上\n以下是 $ 3^{-x^2} $的函數圖形\n![x^2](/images/st-003.png)\n其實任何常數指數為 $ -x^2 $ 都為鐘型圖形，如下圖為$ 100^{-x^2} $的函數圖形\n![x^2](/images/st-004.png)\n\n雖然取任何常數都可以形成鐘型，那為什麼要取exp當作底呢？\n主要是需要它的部分特性，主要有以下五點：\n1. 左右對稱(以0為中心點，常數c與-c的值會得到相同值)\n2. x軸為0時(中心點)， $ f(0) $ 會取得最大值(鐘型的最高點)\n3. 隨著x值逐漸遠離0時(中心點)，值會漸漸縮小，且值“不會是負的”(這點很重要，因為機率值不可為負的)\n4. 當x趨近於無窮大或趨近於負無窮大時，值趨近於0\n5. 比較好做積分...(連續型的機率是透過計算面積的方式去獲得區間範圍內的機率所以要做積分)\n\n但是只有 $ f(x) = \\exp(-{x^2}) $ 是不夠的，因為對機率來說，總體 $ P(\\Omega) = 1 $\n所以從負無限大到無限大做積分整個 $ f(x) $的總面積必須是1\n嘗試對 $ \\exp(-{x^2}) $從負無窮大到無窮大做積分，得到以下結果\n![x^2](/images/st-005.png)\n總面積會是 $ \\sqrt{\\pi} $ ，所以要讓值為1的方法就是除以 $ \\sqrt{\\pi} $ \n最終會得到 $ f(x) = {1 \\over \\sqrt{\\pi}}\\exp(-{x^2}) $\n我們得到了常態分佈的機率密度函數，但還不能稱為“標準”常態分佈的機率密度函數\n因為要達到“標準”的要求還需要有以下三個特性：\n\n1. 期望值( $ \\mu $ )為0\n2. 變異數( $ Var $ )為1\n3. 標準差( $ \\sigma $ )為1\n\n記做 $ N(\\mu, \\sigma) $， 求 $ N(0, 1) $\n但目前得到的機率分佈函數是 $ N(0, {1 \\over \\sqrt{2}}) = {1 \\over \\sqrt{\\pi}}\\exp(-{x^2}) $ 這不符合標準的定義，不是我們要的\n\n我們先從wiki上看看連續型隨機變數求期望值和變異數的公式:\n\n$ E[X] = \\int xf(x)dx $\n$ Var(x) = E[(x-\\mu)^2] $\n\n因為標準的期望值為0，則 $ \\mu = 0 $ ，帶入後得到 $ Var(x) = E[x^2] $\n\n先令$ g(x) = af(ax) $，其中a是一個大於零的常數，我們需要求出a值\na值需要滿足 $ \\int x^2g(x) = Var(x) $ 積分等於1\n$ \\int x^2g(x) $ 積分後求得 $ 1 \\over {2a^2} $，因為 $ {1 \\over {2a^2}} = 1$\n所以得到$ a = {1 \\over \\sqrt{2}} $可滿足 $ Var(x) = 1 $ 且 $ \\mu = 0 $\n也可以求得 $ \\sigma = \\sqrt{Var(x)} = 1 $，滿足前面所提到的三個條件\n$ N(0, 1) = {1 \\over \\sqrt{2}} f({x \\over \\sqrt{2}}) $ 帶入公式後得到 $ f(x) = {1 \\over \\sqrt{2\\pi}}\\exp(-{x^2 \\over 2}) $\n這樣就符合“標準”常態機率密度函數\n\n在理解後再回頭看公式，就不覺得怪了\n以上所做的一切努力都是為了“湊出”滿足機率定義的函數\n","source":"_posts/標準常態分佈的機率密度函數.md","raw":"---\ntitle: 標準常態分佈的機率密度函數\ndate: 2018-03-24 22:03:21\ntags:\n- math\n- probability\n- statistics\n---\n\n前陣子在做SPC逆向工程...\n為此還買了一本簡體書“程序員的數學2 概率與統計”來複習一下統計的觀念\n皇天不負苦心人，在經過多天的努力，最終成功的產出與“SPC參考對象”相同的結果\n為了找到正確的偏移量，在此期間不知實作了多少種不同的標準差...\n\n下一個任務是需要產生機率密度函數去看資料的離散程度...\n至於什麼是常態分佈，可以到{% link 常態分佈wiki https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83 %}上看，應該會比我自己說還要詳細\n一直很好奇為什麼要定義成鐘型，看了下面的youtube影片就才了解，這是自然界的一種規律(巧合？)\n\n{% youtube 4HpvBZnHOVI %}\n\n許多球從中間落下（期望值的位置），最終形成的結果接近於鐘型\n\n上面簡介完了，接著進入主題，開始剖析標準常態分佈的機率密度函數的公式\n$ f(x) = {1 \\over \\sqrt{2\\pi}}\\exp(-{x^2 \\over 2}) $\n\n如果直接從wiki看完公式後，很容易實作出來，只是我更想知道公式背後的原理\n以下是我看書和上網查完資料後，根據自己理解所歸納的結果(趁印象深刻趕快記錄下來)\n\n這時需要將公式拆成兩個部分來看\n現在先看 $ f(x) = \\exp(-{x^2}) $ 這部分：\n\n為什麼要使用 $ -x^2 $ 呢？ \n我們知道$ x^2 $函數是開口向上的鐘型形狀，如下圖所示(以下圖片都是透過Maxima產生)：\n![x^2](/images/st-001.png)\n但我們要的鐘型是開口向下，想要開口向下只需要乘上-1，即 $ -x^2 $\n![-x^2](/images/st-002.png)\n\n接下來看整個 $ \\exp(-{x^2}) $ \n因為經過 $ -x^2 $ 的函數所得的的值是“恆負”的(除了頂點值為0)，永遠落在第二和第三象限\n但是當 $ -x^2 $ 當作常數為底的指數時，透過函數所得到的值是“恆正”的，就會落在第一和第四象限上\n以下是 $ 3^{-x^2} $的函數圖形\n![x^2](/images/st-003.png)\n其實任何常數指數為 $ -x^2 $ 都為鐘型圖形，如下圖為$ 100^{-x^2} $的函數圖形\n![x^2](/images/st-004.png)\n\n雖然取任何常數都可以形成鐘型，那為什麼要取exp當作底呢？\n主要是需要它的部分特性，主要有以下五點：\n1. 左右對稱(以0為中心點，常數c與-c的值會得到相同值)\n2. x軸為0時(中心點)， $ f(0) $ 會取得最大值(鐘型的最高點)\n3. 隨著x值逐漸遠離0時(中心點)，值會漸漸縮小，且值“不會是負的”(這點很重要，因為機率值不可為負的)\n4. 當x趨近於無窮大或趨近於負無窮大時，值趨近於0\n5. 比較好做積分...(連續型的機率是透過計算面積的方式去獲得區間範圍內的機率所以要做積分)\n\n但是只有 $ f(x) = \\exp(-{x^2}) $ 是不夠的，因為對機率來說，總體 $ P(\\Omega) = 1 $\n所以從負無限大到無限大做積分整個 $ f(x) $的總面積必須是1\n嘗試對 $ \\exp(-{x^2}) $從負無窮大到無窮大做積分，得到以下結果\n![x^2](/images/st-005.png)\n總面積會是 $ \\sqrt{\\pi} $ ，所以要讓值為1的方法就是除以 $ \\sqrt{\\pi} $ \n最終會得到 $ f(x) = {1 \\over \\sqrt{\\pi}}\\exp(-{x^2}) $\n我們得到了常態分佈的機率密度函數，但還不能稱為“標準”常態分佈的機率密度函數\n因為要達到“標準”的要求還需要有以下三個特性：\n\n1. 期望值( $ \\mu $ )為0\n2. 變異數( $ Var $ )為1\n3. 標準差( $ \\sigma $ )為1\n\n記做 $ N(\\mu, \\sigma) $， 求 $ N(0, 1) $\n但目前得到的機率分佈函數是 $ N(0, {1 \\over \\sqrt{2}}) = {1 \\over \\sqrt{\\pi}}\\exp(-{x^2}) $ 這不符合標準的定義，不是我們要的\n\n我們先從wiki上看看連續型隨機變數求期望值和變異數的公式:\n\n$ E[X] = \\int xf(x)dx $\n$ Var(x) = E[(x-\\mu)^2] $\n\n因為標準的期望值為0，則 $ \\mu = 0 $ ，帶入後得到 $ Var(x) = E[x^2] $\n\n先令$ g(x) = af(ax) $，其中a是一個大於零的常數，我們需要求出a值\na值需要滿足 $ \\int x^2g(x) = Var(x) $ 積分等於1\n$ \\int x^2g(x) $ 積分後求得 $ 1 \\over {2a^2} $，因為 $ {1 \\over {2a^2}} = 1$\n所以得到$ a = {1 \\over \\sqrt{2}} $可滿足 $ Var(x) = 1 $ 且 $ \\mu = 0 $\n也可以求得 $ \\sigma = \\sqrt{Var(x)} = 1 $，滿足前面所提到的三個條件\n$ N(0, 1) = {1 \\over \\sqrt{2}} f({x \\over \\sqrt{2}}) $ 帶入公式後得到 $ f(x) = {1 \\over \\sqrt{2\\pi}}\\exp(-{x^2 \\over 2}) $\n這樣就符合“標準”常態機率密度函數\n\n在理解後再回頭看公式，就不覺得怪了\n以上所做的一切努力都是為了“湊出”滿足機率定義的函數\n","slug":"標準常態分佈的機率密度函數","published":1,"updated":"2020-01-21T16:46:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5h00180rpj974ktz3y","content":"<p>前陣子在做SPC逆向工程…<br>為此還買了一本簡體書“程序員的數學2 概率與統計”來複習一下統計的觀念<br>皇天不負苦心人，在經過多天的努力，最終成功的產出與“SPC參考對象”相同的結果<br>為了找到正確的偏移量，在此期間不知實作了多少種不同的標準差…</p>\n<p>下一個任務是需要產生機率密度函數去看資料的離散程度…<br>至於什麼是常態分佈，可以到<a href=\"https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83\" target=\"_blank\" rel=\"noopener\">常態分佈wiki</a>上看，應該會比我自己說還要詳細<br>一直很好奇為什麼要定義成鐘型，看了下面的youtube影片就才了解，這是自然界的一種規律(巧合？)</p>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/4HpvBZnHOVI\" frameborder=\"0\" allowfullscreen></iframe></div>\n<p>許多球從中間落下（期望值的位置），最終形成的結果接近於鐘型</p>\n<p>上面簡介完了，接著進入主題，開始剖析標準常態分佈的機率密度函數的公式<br>$ f(x) = {1 \\over \\sqrt{2\\pi}}\\exp(-{x^2 \\over 2}) $</p>\n<p>如果直接從wiki看完公式後，很容易實作出來，只是我更想知道公式背後的原理<br>以下是我看書和上網查完資料後，根據自己理解所歸納的結果(趁印象深刻趕快記錄下來)</p>\n<p>這時需要將公式拆成兩個部分來看<br>現在先看 $ f(x) = \\exp(-{x^2}) $ 這部分：</p>\n<p>為什麼要使用 $ -x^2 $ 呢？<br>我們知道$ x^2 $函數是開口向上的鐘型形狀，如下圖所示(以下圖片都是透過Maxima產生)：<br><img src=\"/images/st-001.png\" alt=\"x^2\"><br>但我們要的鐘型是開口向下，想要開口向下只需要乘上-1，即 $ -x^2 $<br><img src=\"/images/st-002.png\" alt=\"-x^2\"></p>\n<p>接下來看整個 $ \\exp(-{x^2}) $<br>因為經過 $ -x^2 $ 的函數所得的的值是“恆負”的(除了頂點值為0)，永遠落在第二和第三象限<br>但是當 $ -x^2 $ 當作常數為底的指數時，透過函數所得到的值是“恆正”的，就會落在第一和第四象限上<br>以下是 $ 3^{-x^2} $的函數圖形<br><img src=\"/images/st-003.png\" alt=\"x^2\"><br>其實任何常數指數為 $ -x^2 $ 都為鐘型圖形，如下圖為$ 100^{-x^2} $的函數圖形<br><img src=\"/images/st-004.png\" alt=\"x^2\"></p>\n<p>雖然取任何常數都可以形成鐘型，那為什麼要取exp當作底呢？<br>主要是需要它的部分特性，主要有以下五點：</p>\n<ol>\n<li>左右對稱(以0為中心點，常數c與-c的值會得到相同值)</li>\n<li>x軸為0時(中心點)， $ f(0) $ 會取得最大值(鐘型的最高點)</li>\n<li>隨著x值逐漸遠離0時(中心點)，值會漸漸縮小，且值“不會是負的”(這點很重要，因為機率值不可為負的)</li>\n<li>當x趨近於無窮大或趨近於負無窮大時，值趨近於0</li>\n<li>比較好做積分…(連續型的機率是透過計算面積的方式去獲得區間範圍內的機率所以要做積分)</li>\n</ol>\n<p>但是只有 $ f(x) = \\exp(-{x^2}) $ 是不夠的，因為對機率來說，總體 $ P(\\Omega) = 1 $<br>所以從負無限大到無限大做積分整個 $ f(x) $的總面積必須是1<br>嘗試對 $ \\exp(-{x^2}) $從負無窮大到無窮大做積分，得到以下結果<br><img src=\"/images/st-005.png\" alt=\"x^2\"><br>總面積會是 $ \\sqrt{\\pi} $ ，所以要讓值為1的方法就是除以 $ \\sqrt{\\pi} $<br>最終會得到 $ f(x) = {1 \\over \\sqrt{\\pi}}\\exp(-{x^2}) $<br>我們得到了常態分佈的機率密度函數，但還不能稱為“標準”常態分佈的機率密度函數<br>因為要達到“標準”的要求還需要有以下三個特性：</p>\n<ol>\n<li>期望值( $ \\mu $ )為0</li>\n<li>變異數( $ Var $ )為1</li>\n<li>標準差( $ \\sigma $ )為1</li>\n</ol>\n<p>記做 $ N(\\mu, \\sigma) $， 求 $ N(0, 1) $<br>但目前得到的機率分佈函數是 $ N(0, {1 \\over \\sqrt{2}}) = {1 \\over \\sqrt{\\pi}}\\exp(-{x^2}) $ 這不符合標準的定義，不是我們要的</p>\n<p>我們先從wiki上看看連續型隨機變數求期望值和變異數的公式:</p>\n<p>$ E[X] = \\int xf(x)dx $<br>$ Var(x) = E[(x-\\mu)^2] $</p>\n<p>因為標準的期望值為0，則 $ \\mu = 0 $ ，帶入後得到 $ Var(x) = E[x^2] $</p>\n<p>先令$ g(x) = af(ax) $，其中a是一個大於零的常數，我們需要求出a值<br>a值需要滿足 $ \\int x^2g(x) = Var(x) $ 積分等於1<br>$ \\int x^2g(x) $ 積分後求得 $ 1 \\over {2a^2} $，因為 $ {1 \\over {2a^2}} = 1$<br>所以得到$ a = {1 \\over \\sqrt{2}} $可滿足 $ Var(x) = 1 $ 且 $ \\mu = 0 $<br>也可以求得 $ \\sigma = \\sqrt{Var(x)} = 1 $，滿足前面所提到的三個條件<br>$ N(0, 1) = {1 \\over \\sqrt{2}} f({x \\over \\sqrt{2}}) $ 帶入公式後得到 $ f(x) = {1 \\over \\sqrt{2\\pi}}\\exp(-{x^2 \\over 2}) $<br>這樣就符合“標準”常態機率密度函數</p>\n<p>在理解後再回頭看公式，就不覺得怪了<br>以上所做的一切努力都是為了“湊出”滿足機率定義的函數</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前陣子在做SPC逆向工程…<br>為此還買了一本簡體書“程序員的數學2 概率與統計”來複習一下統計的觀念<br>皇天不負苦心人，在經過多天的努力，最終成功的產出與“SPC參考對象”相同的結果<br>為了找到正確的偏移量，在此期間不知實作了多少種不同的標準差…</p>\n<p>下一個任務是需要產生機率密度函數去看資料的離散程度…<br>至於什麼是常態分佈，可以到<a href=\"https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83\" target=\"_blank\" rel=\"noopener\">常態分佈wiki</a>上看，應該會比我自己說還要詳細<br>一直很好奇為什麼要定義成鐘型，看了下面的youtube影片就才了解，這是自然界的一種規律(巧合？)</p>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/4HpvBZnHOVI\" frameborder=\"0\" allowfullscreen></iframe></div>\n<p>許多球從中間落下（期望值的位置），最終形成的結果接近於鐘型</p>\n<p>上面簡介完了，接著進入主題，開始剖析標準常態分佈的機率密度函數的公式<br>$ f(x) = {1 \\over \\sqrt{2\\pi}}\\exp(-{x^2 \\over 2}) $</p>\n<p>如果直接從wiki看完公式後，很容易實作出來，只是我更想知道公式背後的原理<br>以下是我看書和上網查完資料後，根據自己理解所歸納的結果(趁印象深刻趕快記錄下來)</p>\n<p>這時需要將公式拆成兩個部分來看<br>現在先看 $ f(x) = \\exp(-{x^2}) $ 這部分：</p>\n<p>為什麼要使用 $ -x^2 $ 呢？<br>我們知道$ x^2 $函數是開口向上的鐘型形狀，如下圖所示(以下圖片都是透過Maxima產生)：<br><img src=\"/images/st-001.png\" alt=\"x^2\"><br>但我們要的鐘型是開口向下，想要開口向下只需要乘上-1，即 $ -x^2 $<br><img src=\"/images/st-002.png\" alt=\"-x^2\"></p>\n<p>接下來看整個 $ \\exp(-{x^2}) $<br>因為經過 $ -x^2 $ 的函數所得的的值是“恆負”的(除了頂點值為0)，永遠落在第二和第三象限<br>但是當 $ -x^2 $ 當作常數為底的指數時，透過函數所得到的值是“恆正”的，就會落在第一和第四象限上<br>以下是 $ 3^{-x^2} $的函數圖形<br><img src=\"/images/st-003.png\" alt=\"x^2\"><br>其實任何常數指數為 $ -x^2 $ 都為鐘型圖形，如下圖為$ 100^{-x^2} $的函數圖形<br><img src=\"/images/st-004.png\" alt=\"x^2\"></p>\n<p>雖然取任何常數都可以形成鐘型，那為什麼要取exp當作底呢？<br>主要是需要它的部分特性，主要有以下五點：</p>\n<ol>\n<li>左右對稱(以0為中心點，常數c與-c的值會得到相同值)</li>\n<li>x軸為0時(中心點)， $ f(0) $ 會取得最大值(鐘型的最高點)</li>\n<li>隨著x值逐漸遠離0時(中心點)，值會漸漸縮小，且值“不會是負的”(這點很重要，因為機率值不可為負的)</li>\n<li>當x趨近於無窮大或趨近於負無窮大時，值趨近於0</li>\n<li>比較好做積分…(連續型的機率是透過計算面積的方式去獲得區間範圍內的機率所以要做積分)</li>\n</ol>\n<p>但是只有 $ f(x) = \\exp(-{x^2}) $ 是不夠的，因為對機率來說，總體 $ P(\\Omega) = 1 $<br>所以從負無限大到無限大做積分整個 $ f(x) $的總面積必須是1<br>嘗試對 $ \\exp(-{x^2}) $從負無窮大到無窮大做積分，得到以下結果<br><img src=\"/images/st-005.png\" alt=\"x^2\"><br>總面積會是 $ \\sqrt{\\pi} $ ，所以要讓值為1的方法就是除以 $ \\sqrt{\\pi} $<br>最終會得到 $ f(x) = {1 \\over \\sqrt{\\pi}}\\exp(-{x^2}) $<br>我們得到了常態分佈的機率密度函數，但還不能稱為“標準”常態分佈的機率密度函數<br>因為要達到“標準”的要求還需要有以下三個特性：</p>\n<ol>\n<li>期望值( $ \\mu $ )為0</li>\n<li>變異數( $ Var $ )為1</li>\n<li>標準差( $ \\sigma $ )為1</li>\n</ol>\n<p>記做 $ N(\\mu, \\sigma) $， 求 $ N(0, 1) $<br>但目前得到的機率分佈函數是 $ N(0, {1 \\over \\sqrt{2}}) = {1 \\over \\sqrt{\\pi}}\\exp(-{x^2}) $ 這不符合標準的定義，不是我們要的</p>\n<p>我們先從wiki上看看連續型隨機變數求期望值和變異數的公式:</p>\n<p>$ E[X] = \\int xf(x)dx $<br>$ Var(x) = E[(x-\\mu)^2] $</p>\n<p>因為標準的期望值為0，則 $ \\mu = 0 $ ，帶入後得到 $ Var(x) = E[x^2] $</p>\n<p>先令$ g(x) = af(ax) $，其中a是一個大於零的常數，我們需要求出a值<br>a值需要滿足 $ \\int x^2g(x) = Var(x) $ 積分等於1<br>$ \\int x^2g(x) $ 積分後求得 $ 1 \\over {2a^2} $，因為 $ {1 \\over {2a^2}} = 1$<br>所以得到$ a = {1 \\over \\sqrt{2}} $可滿足 $ Var(x) = 1 $ 且 $ \\mu = 0 $<br>也可以求得 $ \\sigma = \\sqrt{Var(x)} = 1 $，滿足前面所提到的三個條件<br>$ N(0, 1) = {1 \\over \\sqrt{2}} f({x \\over \\sqrt{2}}) $ 帶入公式後得到 $ f(x) = {1 \\over \\sqrt{2\\pi}}\\exp(-{x^2 \\over 2}) $<br>這樣就符合“標準”常態機率密度函數</p>\n<p>在理解後再回頭看公式，就不覺得怪了<br>以上所做的一切努力都是為了“湊出”滿足機率定義的函數</p>\n"},{"title":"比較好的nested map寫法","date":"2018-03-03T15:02:41.000Z","_content":"\n最近在幫忙修正Android的bug時，看到了一段複雜if else的code\n仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group\n\n輸入資料為n*m的matrix\n```java\nString[][] dataMatrix = {{\"level 1\", \"level 2\", \"level 3\", \"data 1\"},\n                         {\"level 1\", \"level 2\", \"level 3\", \"data 2\"}};\n```\n\n但是原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1\n\n```java 程式碼 1:\n    //Map<level 1, Map<level 2, Map<level 3, List<data>>>>\n    Map<String, Map<String, Map<String, List<String>>>> map = new HashMap<>();\n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n    \n    if(map.containsKey(level1)){\n        if(map.get(level1).containsKey(level2)){\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }else{\n            map.get(level1).put(level2, new HashMap<>());\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }\n    }else{\n        map.put(level1, new HashMap<>());\n        if(map.get(level1).containsKey(level2)){\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }else{\n            map.get(level1).put(level2, new HashMap<>());\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }\n    }\n\n    System.out.println(map.get(level1).get(level2).get(level3).get(0));\n    System.out.println(map.get(level1).get(level2).get(level3).get(1));\n```\n\n程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改...\n看到這段程式碼時，當下真的有種想幫他重構的衝動\n但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益\n最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2\n\n```java 程式碼 2:\n    //Map<level 1, Map<level 2, Map<level 3, List<data>>>>\n    Map<String, Map<String, Map<String, List<String>>>> map = new HashMap<>();\n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n\n    if(!map.containsKey(level1)) {\n        map.put(level1, new HashMap<>());\n    }\n    if(!map.get(level1).containsKey(level2)) {\n        map.get(level1).put(level2, new HashMap<>());\n    }\n    if(!map.get(level1).get(level2).containsKey(level3)) {\n        map.get(level1).get(level2).put(level3, new LinkedList<>());\n    }\n\n    map.get(level1).get(level2).get(level3).add(\"data 1\");\n    map.get(level1).get(level2).get(level3).add(\"data 2\");\n    \n    System.out.println(map.get(level1).get(level2).get(level3).get(0));\n    System.out.println(map.get(level1).get(level2).get(level3).get(1));\n```\n\n程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化\n因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null\n以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可\n不管之後增加幾層map都不需要寫成複雜的巢狀判斷式\n\n隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可...\n就如同下方的程式碼 3\n\n```java 程式碼 3:\n    //Map<level 1 + level 2 + level 3, List<data>>\n    Map<String, List<String>> map = new HashMap<>();\n    \n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n    \n    String combinKey = level1 + level2 + level3;\n    \n    if(!map.put(combinKey)) {\n        map,put(combinKey, new LinkedList<>());\n    }\n\n    map.get(combinKey).add(\"data 1\");\n    map.get(combinKey).add(\"data 2\");\n    \n    System.out.println(map.get(combinKey).get(0));\n    System.out.println(map.get(combinKey).get(1));\n```\n\n\n若是能夠使用 java 8 的 stream 的話就更簡單了，如同下方的程式碼 4\n\n```java 程式碼 4:\nMap<String, List<String>> map = Arrays.stream(dataMatrix).collect(\n                Collectors.toMap(\n                    kv -> kv[0] + kv[1] + kv[2],\n                    kv -> Lists.newArrayList(kv[3]),\n                    (newVal, oldVal) -> {\n                        newVal.addAll(oldVal);\n                        return newVal;\n                    }\n                )\n            );\n```\n\n結論： \n我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養\n不是只求程式會跑就好，這樣只會累積一些不必要的技術債...\n所以我覺得每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀\n時時提醒自己不要埋地雷給別人踩，顯現自己的專業\n\n此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上...\n","source":"_posts/比較好的nested-map寫法.md","raw":"---\ntitle: 比較好的nested map寫法\ndate: 2018-03-03 23:02:41\ntags:\n- java\n- clean code\n---\n\n最近在幫忙修正Android的bug時，看到了一段複雜if else的code\n仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group\n\n輸入資料為n*m的matrix\n```java\nString[][] dataMatrix = {{\"level 1\", \"level 2\", \"level 3\", \"data 1\"},\n                         {\"level 1\", \"level 2\", \"level 3\", \"data 2\"}};\n```\n\n但是原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1\n\n```java 程式碼 1:\n    //Map<level 1, Map<level 2, Map<level 3, List<data>>>>\n    Map<String, Map<String, Map<String, List<String>>>> map = new HashMap<>();\n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n    \n    if(map.containsKey(level1)){\n        if(map.get(level1).containsKey(level2)){\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }else{\n            map.get(level1).put(level2, new HashMap<>());\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }\n    }else{\n        map.put(level1, new HashMap<>());\n        if(map.get(level1).containsKey(level2)){\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }else{\n            map.get(level1).put(level2, new HashMap<>());\n            if(map.get(level1).get(level2).containsKey(level3)){\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }else{\n                map.get(level1).get(level2).put(level3, new LinkedList<>());\n                map.get(level1).get(level2).get(level3).add(\"data 1\");\n                map.get(level1).get(level2).get(level3).add(\"data 2\");\n            }\n        }\n    }\n\n    System.out.println(map.get(level1).get(level2).get(level3).get(0));\n    System.out.println(map.get(level1).get(level2).get(level3).get(1));\n```\n\n程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改...\n看到這段程式碼時，當下真的有種想幫他重構的衝動\n但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益\n最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2\n\n```java 程式碼 2:\n    //Map<level 1, Map<level 2, Map<level 3, List<data>>>>\n    Map<String, Map<String, Map<String, List<String>>>> map = new HashMap<>();\n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n\n    if(!map.containsKey(level1)) {\n        map.put(level1, new HashMap<>());\n    }\n    if(!map.get(level1).containsKey(level2)) {\n        map.get(level1).put(level2, new HashMap<>());\n    }\n    if(!map.get(level1).get(level2).containsKey(level3)) {\n        map.get(level1).get(level2).put(level3, new LinkedList<>());\n    }\n\n    map.get(level1).get(level2).get(level3).add(\"data 1\");\n    map.get(level1).get(level2).get(level3).add(\"data 2\");\n    \n    System.out.println(map.get(level1).get(level2).get(level3).get(0));\n    System.out.println(map.get(level1).get(level2).get(level3).get(1));\n```\n\n程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化\n因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null\n以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可\n不管之後增加幾層map都不需要寫成複雜的巢狀判斷式\n\n隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可...\n就如同下方的程式碼 3\n\n```java 程式碼 3:\n    //Map<level 1 + level 2 + level 3, List<data>>\n    Map<String, List<String>> map = new HashMap<>();\n    \n    String level1 = \"level 1\";\n    String level2 = \"level 2\";\n    String level3 = \"level 3\";\n    \n    String combinKey = level1 + level2 + level3;\n    \n    if(!map.put(combinKey)) {\n        map,put(combinKey, new LinkedList<>());\n    }\n\n    map.get(combinKey).add(\"data 1\");\n    map.get(combinKey).add(\"data 2\");\n    \n    System.out.println(map.get(combinKey).get(0));\n    System.out.println(map.get(combinKey).get(1));\n```\n\n\n若是能夠使用 java 8 的 stream 的話就更簡單了，如同下方的程式碼 4\n\n```java 程式碼 4:\nMap<String, List<String>> map = Arrays.stream(dataMatrix).collect(\n                Collectors.toMap(\n                    kv -> kv[0] + kv[1] + kv[2],\n                    kv -> Lists.newArrayList(kv[3]),\n                    (newVal, oldVal) -> {\n                        newVal.addAll(oldVal);\n                        return newVal;\n                    }\n                )\n            );\n```\n\n結論： \n我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養\n不是只求程式會跑就好，這樣只會累積一些不必要的技術債...\n所以我覺得每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀\n時時提醒自己不要埋地雷給別人踩，顯現自己的專業\n\n此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上...\n","slug":"比較好的nested-map寫法","published":1,"updated":"2020-01-21T16:46:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5j001a0rpjwipwfwug","content":"<p>最近在幫忙修正Android的bug時，看到了一段複雜if else的code<br>仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group</p>\n<p>輸入資料為n*m的matrix<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[][] dataMatrix = &#123;&#123;<span class=\"string\">\"level 1\"</span>, <span class=\"string\">\"level 2\"</span>, <span class=\"string\">\"level 3\"</span>, <span class=\"string\">\"data 1\"</span>&#125;,</span><br><span class=\"line\">                         &#123;<span class=\"string\">\"level 1\"</span>, <span class=\"string\">\"level 2\"</span>, <span class=\"string\">\"level 3\"</span>, <span class=\"string\">\"data 2\"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>但是原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 1:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(map.containsKey(level1))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    map.put(level1, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改…<br>看到這段程式碼時，當下真的有種想幫他重構的衝動<br>但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益<br>最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 2:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.containsKey(level1)) &#123;</span><br><span class=\"line\">    map.put(level1, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.get(level1).containsKey(level2)) &#123;</span><br><span class=\"line\">    map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.get(level1).get(level2).containsKey(level3)) &#123;</span><br><span class=\"line\">    map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化<br>因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null<br>以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可<br>不管之後增加幾層map都不需要寫成複雜的巢狀判斷式</p>\n<p>隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可…<br>就如同下方的程式碼 3</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 3:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1 + level 2 + level 3, List&lt;data&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String combinKey = level1 + level2 + level3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.put(combinKey)) &#123;</span><br><span class=\"line\">    map,put(combinKey, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.get(combinKey).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">map.get(combinKey).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(combinKey).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(combinKey).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>若是能夠使用 java 8 的 stream 的話就更簡單了，如同下方的程式碼 4</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 4:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; map = Arrays.stream(dataMatrix).collect(</span><br><span class=\"line\">                Collectors.toMap(</span><br><span class=\"line\">                    kv -&gt; kv[<span class=\"number\">0</span>] + kv[<span class=\"number\">1</span>] + kv[<span class=\"number\">2</span>],</span><br><span class=\"line\">                    kv -&gt; Lists.newArrayList(kv[<span class=\"number\">3</span>]),</span><br><span class=\"line\">                    (newVal, oldVal) -&gt; &#123;</span><br><span class=\"line\">                        newVal.addAll(oldVal);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> newVal;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                )</span><br><span class=\"line\">            );</span><br></pre></td></tr></table></figure>\n<p>結論：<br>我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養<br>不是只求程式會跑就好，這樣只會累積一些不必要的技術債…<br>所以我覺得每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀<br>時時提醒自己不要埋地雷給別人踩，顯現自己的專業</p>\n<p>此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在幫忙修正Android的bug時，看到了一段複雜if else的code<br>仔細的看了一下，才知道是使用一個三層的nested map結構來幫資料做group</p>\n<p>輸入資料為n*m的matrix<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[][] dataMatrix = &#123;&#123;<span class=\"string\">\"level 1\"</span>, <span class=\"string\">\"level 2\"</span>, <span class=\"string\">\"level 3\"</span>, <span class=\"string\">\"data 1\"</span>&#125;,</span><br><span class=\"line\">                         &#123;<span class=\"string\">\"level 1\"</span>, <span class=\"string\">\"level 2\"</span>, <span class=\"string\">\"level 3\"</span>, <span class=\"string\">\"data 2\"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>但是原始的code寫的滿複雜的，為了方便說明就簡化一下，寫成程式碼 1</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 1:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(map.containsKey(level1))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    map.put(level1, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(level1).containsKey(level2))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(level1).get(level2).containsKey(level3))&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">            map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>程式碼 1 的寫法用了三層的巢狀，也包含許多重複的判斷邏輯，不但不容易閱讀，也不利於後續的維護和修改…<br>看到這段程式碼時，當下真的有種想幫他重構的衝動<br>但想一想此段code沒有bug，只是醜了點，若重構既花時間也沒有實質效益<br>最終只在程式碼 1 的上方增加註解，寫了個比較好的作法，就是下方的程式碼 2</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 2:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1, Map&lt;level 2, Map&lt;level 3, List&lt;data&gt;&gt;&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.containsKey(level1)) &#123;</span><br><span class=\"line\">    map.put(level1, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.get(level1).containsKey(level2)) &#123;</span><br><span class=\"line\">    map.get(level1).put(level2, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.get(level1).get(level2).containsKey(level3)) &#123;</span><br><span class=\"line\">    map.get(level1).get(level2).put(level3, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">map.get(level1).get(level2).get(level3).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(level1).get(level2).get(level3).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>程式碼 2 的寫法可以輕鬆地在執行過程中自動做初始化<br>因為第7~9行就可以將level 1為null的可以性完全排除，在第7行後level 1就不可能是null<br>以此類推第10行和第13行都可以自動幫level 2和level 3做初始化，所以後面只需專注於放資料即可<br>不管之後增加幾層map都不需要寫成複雜的巢狀判斷式</p>\n<p>隔天想了一下，如果沒有什麼特殊需求，其實只需要將三層的key組合成一個唯一的字串即可…<br>就如同下方的程式碼 3</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 3:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map&lt;level 1 + level 2 + level 3, List&lt;data&gt;&gt;</span></span><br><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">String level1 = <span class=\"string\">\"level 1\"</span>;</span><br><span class=\"line\">String level2 = <span class=\"string\">\"level 2\"</span>;</span><br><span class=\"line\">String level3 = <span class=\"string\">\"level 3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String combinKey = level1 + level2 + level3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!map.put(combinKey)) &#123;</span><br><span class=\"line\">    map,put(combinKey, <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map.get(combinKey).add(<span class=\"string\">\"data 1\"</span>);</span><br><span class=\"line\">map.get(combinKey).add(<span class=\"string\">\"data 2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(map.get(combinKey).get(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(map.get(combinKey).get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>若是能夠使用 java 8 的 stream 的話就更簡單了，如同下方的程式碼 4</p>\n<figure class=\"highlight java\"><figcaption><span>程式碼 4:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; map = Arrays.stream(dataMatrix).collect(</span><br><span class=\"line\">                Collectors.toMap(</span><br><span class=\"line\">                    kv -&gt; kv[<span class=\"number\">0</span>] + kv[<span class=\"number\">1</span>] + kv[<span class=\"number\">2</span>],</span><br><span class=\"line\">                    kv -&gt; Lists.newArrayList(kv[<span class=\"number\">3</span>]),</span><br><span class=\"line\">                    (newVal, oldVal) -&gt; &#123;</span><br><span class=\"line\">                        newVal.addAll(oldVal);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> newVal;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                )</span><br><span class=\"line\">            );</span><br></pre></td></tr></table></figure>\n<p>結論：<br>我一直認為寫出簡潔易讀且好維護的程式碼是身為一個軟體開發者該有的素養<br>不是只求程式會跑就好，這樣只會累積一些不必要的技術債…<br>所以我覺得每個開發者，都應該買本“clean code 無瑕的程式碼 + 番外篇”來讀一讀<br>時時提醒自己不要埋地雷給別人踩，顯現自己的專業</p>\n<p>此時想起我放在辦公室的clean code一書被同事們借來借去，現在也不知道流浪到哪位同事的辦公桌上…</p>\n"},{"title":"簡易版shell script作自動化處理","date":"2019-10-22T08:26:18.000Z","_content":"\n好久沒有寫sh了...都快忘光了...所以今天寫一個簡單的自動化腳本作為複習\n\n* 最常見的就是滿足三個功能\n * 執行某個命令後自動化處理某些事情\n * 更改設定黨特定參數\n * 參數防呆，避免將數值改壞\n\n先來完成第一步\n首先要透過發出不同的命令去執行特定任務，大多都會使用case來針對不同命令做特定處理，最後增加一個case \\*) 當命令錯誤時可提示使用方式\n這裡將處理的任務各自寫成獨立的function，是為了方便後續的維護與修改\n下方的＄1是sh檔取得command line輸入的第一個參數，若有多個參數數值會依序count，如：\\$1, \\$2, \\$3...\n\n\n ```bash\ncmd=$1\n\nfunction edit_config() {\n    echo 'edit config'\n}\n\nfunction run_start() {\n    echo 'run start'\n}\n\nfunction run_stop() {\n    echo 'run stop'\n}\n\ncase $cmd in\n    config)\n        edit_config;\n        ;;\n    start)\n        run_start;\n        ;;\n    stop)\n        run_stop;\n        ;;\n    *)\n        echo 'Usage 1. config id, 2. start, 3. stop'\n        ;;\nesac\n```\n\n第二步來修改設定檔案特定的參數\n假設現在要修改某個config檔案叫作test.cfg，裡面內容如下\n\n```bash\n\n# test config\n# id\nid=0\n\n# other\nother.cmd=xxx\n\n```\n\n想要修改數值可以使用sed命令即時修改特定參數id\n```bash\nsed -i 's/原字串/取代字串/g 修改檔案名稱\n```\n因為筆電是macbook所以直接執行會出錯，要在前面再加一個空字串...\n```bash\nsed -i '' 's/原字串/取代字串/g 修改檔案名稱\n```\n接下來使用if/else來檢查第二參數id有沒有參數 (防呆) ，參數-z為檢查字串長度，若是0則為true，所以可用來判斷是否有輸入id\n```bash\nif [ -z $id ]\n```\n檢查命令為config才設置id\n```bash\ncmd=$1\nfile=test.cfg\n\nif [ $cmd == 'config' ]\nthen\n    id=$2\nfi\n\nfunction edit_config() {\n    if [ -z $id ]\n    then\n        echo 'no arg \"id\"'\n    else\n        echo 'edit config, id='$id\n        sed -i '' 's/\\(id=\\).*/id='$id'/g' $file \n    fi\n}\n\n```\n最終完成後的格式如下\n```bash\n#!/bin/bash\n\ncmd=$1\nfile=test.cfg\n\nif [ $cmd == 'config' ]\nthen\n    id=$2\nfi\n\nfunction edit_config() {\n    if [ -z $id ]\n    then\n        echo 'no arg \"id\"'\n    else\n        echo 'edit config, id='$id\n        sed -i '' 's/\\(id=\\).*/id='$id'/g' $file \n    fi\n}\n\nfunction run_start() {\n    echo 'run start'\n}\n\nfunction run_stop() {\n    echo 'run stop'\n}\n\ncase $cmd in\n    config)\n        edit_config;\n        ;;\n    start)\n        run_start;\n        ;;\n    stop)\n        run_stop;\n        ;;\n    *)\n        echo 'Usage 1. config id, 2. start, 3. stop'\n        ;;\nesac\n\n```\n\n測試命令\n```shell\n./test_cmd.sh\nUsage 1. config id, 2. start, 3. stop\n\n./test_cmd.sh config\nno arg \"id\"\n\n./test_cmd.sh config 2\nedit config, id=2\n\n./test_cmd.sh start\nrun start\n\n./test_cmd.sh stop\nrun stop\n```\n\n將結果放到 /etc/rc.local 在server開啟時自動執行 /server-script/test_cmd start\n如果是做成 service 可以放到 /etc/init.d/ 後啟動，使用 chkconfig 設定此 service 為 on\n","source":"_posts/簡易版shell-script作自動化處理.md","raw":"---\ntitle: 簡易版shell script作自動化處理\ndate: 2019-10-22 16:26:18\ntags:\n- shell\n---\n\n好久沒有寫sh了...都快忘光了...所以今天寫一個簡單的自動化腳本作為複習\n\n* 最常見的就是滿足三個功能\n * 執行某個命令後自動化處理某些事情\n * 更改設定黨特定參數\n * 參數防呆，避免將數值改壞\n\n先來完成第一步\n首先要透過發出不同的命令去執行特定任務，大多都會使用case來針對不同命令做特定處理，最後增加一個case \\*) 當命令錯誤時可提示使用方式\n這裡將處理的任務各自寫成獨立的function，是為了方便後續的維護與修改\n下方的＄1是sh檔取得command line輸入的第一個參數，若有多個參數數值會依序count，如：\\$1, \\$2, \\$3...\n\n\n ```bash\ncmd=$1\n\nfunction edit_config() {\n    echo 'edit config'\n}\n\nfunction run_start() {\n    echo 'run start'\n}\n\nfunction run_stop() {\n    echo 'run stop'\n}\n\ncase $cmd in\n    config)\n        edit_config;\n        ;;\n    start)\n        run_start;\n        ;;\n    stop)\n        run_stop;\n        ;;\n    *)\n        echo 'Usage 1. config id, 2. start, 3. stop'\n        ;;\nesac\n```\n\n第二步來修改設定檔案特定的參數\n假設現在要修改某個config檔案叫作test.cfg，裡面內容如下\n\n```bash\n\n# test config\n# id\nid=0\n\n# other\nother.cmd=xxx\n\n```\n\n想要修改數值可以使用sed命令即時修改特定參數id\n```bash\nsed -i 's/原字串/取代字串/g 修改檔案名稱\n```\n因為筆電是macbook所以直接執行會出錯，要在前面再加一個空字串...\n```bash\nsed -i '' 's/原字串/取代字串/g 修改檔案名稱\n```\n接下來使用if/else來檢查第二參數id有沒有參數 (防呆) ，參數-z為檢查字串長度，若是0則為true，所以可用來判斷是否有輸入id\n```bash\nif [ -z $id ]\n```\n檢查命令為config才設置id\n```bash\ncmd=$1\nfile=test.cfg\n\nif [ $cmd == 'config' ]\nthen\n    id=$2\nfi\n\nfunction edit_config() {\n    if [ -z $id ]\n    then\n        echo 'no arg \"id\"'\n    else\n        echo 'edit config, id='$id\n        sed -i '' 's/\\(id=\\).*/id='$id'/g' $file \n    fi\n}\n\n```\n最終完成後的格式如下\n```bash\n#!/bin/bash\n\ncmd=$1\nfile=test.cfg\n\nif [ $cmd == 'config' ]\nthen\n    id=$2\nfi\n\nfunction edit_config() {\n    if [ -z $id ]\n    then\n        echo 'no arg \"id\"'\n    else\n        echo 'edit config, id='$id\n        sed -i '' 's/\\(id=\\).*/id='$id'/g' $file \n    fi\n}\n\nfunction run_start() {\n    echo 'run start'\n}\n\nfunction run_stop() {\n    echo 'run stop'\n}\n\ncase $cmd in\n    config)\n        edit_config;\n        ;;\n    start)\n        run_start;\n        ;;\n    stop)\n        run_stop;\n        ;;\n    *)\n        echo 'Usage 1. config id, 2. start, 3. stop'\n        ;;\nesac\n\n```\n\n測試命令\n```shell\n./test_cmd.sh\nUsage 1. config id, 2. start, 3. stop\n\n./test_cmd.sh config\nno arg \"id\"\n\n./test_cmd.sh config 2\nedit config, id=2\n\n./test_cmd.sh start\nrun start\n\n./test_cmd.sh stop\nrun stop\n```\n\n將結果放到 /etc/rc.local 在server開啟時自動執行 /server-script/test_cmd start\n如果是做成 service 可以放到 /etc/init.d/ 後啟動，使用 chkconfig 設定此 service 為 on\n","slug":"簡易版shell-script作自動化處理","published":1,"updated":"2020-02-09T03:02:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5k001c0rpjuymemi91","content":"<p>好久沒有寫sh了…都快忘光了…所以今天寫一個簡單的自動化腳本作為複習</p>\n<ul>\n<li>最常見的就是滿足三個功能<ul>\n<li>執行某個命令後自動化處理某些事情</li>\n<li>更改設定黨特定參數</li>\n<li>參數防呆，避免將數值改壞</li>\n</ul>\n</li>\n</ul>\n<p>先來完成第一步<br>首先要透過發出不同的命令去執行特定任務，大多都會使用case來針對不同命令做特定處理，最後增加一個case *) 當命令錯誤時可提示使用方式<br>這裡將處理的任務各自寫成獨立的function，是為了方便後續的維護與修改<br>下方的＄1是sh檔取得command line輸入的第一個參數，若有多個參數數值會依序count，如：\\$1, \\$2, \\$3…</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">edit_config</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'edit config'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">run_start</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'run start'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">run_stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'run stop'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$cmd</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    config)</span><br><span class=\"line\">        edit_config;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        run_start;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        run_stop;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'Usage 1. config id, 2. start, 3. stop'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>第二步來修改設定檔案特定的參數<br>假設現在要修改某個config檔案叫作test.cfg，裡面內容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test config</span></span><br><span class=\"line\"><span class=\"comment\"># id</span></span><br><span class=\"line\">id=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># other</span></span><br><span class=\"line\">other.cmd=xxx</span><br></pre></td></tr></table></figure>\n<p>想要修改數值可以使用sed命令即時修改特定參數id<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">'s/原字串/取代字串/g 修改檔案名稱</span></span><br></pre></td></tr></table></figure></p>\n<p>因為筆電是macbook所以直接執行會出錯，要在前面再加一個空字串…<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">''</span> <span class=\"string\">'s/原字串/取代字串/g 修改檔案名稱</span></span><br></pre></td></tr></table></figure></p>\n<p>接下來使用if/else來檢查第二參數id有沒有參數 (防呆) ，參數-z為檢查字串長度，若是0則為true，所以可用來判斷是否有輸入id<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$id</span> ]</span><br></pre></td></tr></table></figure></p>\n<p>檢查命令為config才設置id<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd=<span class=\"variable\">$1</span></span><br><span class=\"line\">file=test.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$cmd</span> == <span class=\"string\">'config'</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    id=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">edit_config</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"variable\">$id</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'no arg \"id\"'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'edit config, id='</span><span class=\"variable\">$id</span></span><br><span class=\"line\">        sed -i <span class=\"string\">''</span> <span class=\"string\">'s/\\(id=\\).*/id='</span><span class=\"variable\">$id</span><span class=\"string\">'/g'</span> <span class=\"variable\">$file</span> </span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最終完成後的格式如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cmd=<span class=\"variable\">$1</span></span><br><span class=\"line\">file=test.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$cmd</span> == <span class=\"string\">'config'</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    id=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">edit_config</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"variable\">$id</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'no arg \"id\"'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'edit config, id='</span><span class=\"variable\">$id</span></span><br><span class=\"line\">        sed -i <span class=\"string\">''</span> <span class=\"string\">'s/\\(id=\\).*/id='</span><span class=\"variable\">$id</span><span class=\"string\">'/g'</span> <span class=\"variable\">$file</span> </span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">run_start</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'run start'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">run_stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'run stop'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$cmd</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    config)</span><br><span class=\"line\">        edit_config;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        run_start;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        run_stop;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'Usage 1. config id, 2. start, 3. stop'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure></p>\n<p>測試命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./test_cmd.sh</span><br><span class=\"line\">Usage 1. config id, 2. start, 3. stop</span><br><span class=\"line\"></span><br><span class=\"line\">./test_cmd.sh config</span><br><span class=\"line\">no arg \"id\"</span><br><span class=\"line\"></span><br><span class=\"line\">./test_cmd.sh config 2</span><br><span class=\"line\">edit config, id=2</span><br><span class=\"line\"></span><br><span class=\"line\">./test_cmd.sh start</span><br><span class=\"line\">run start</span><br><span class=\"line\"></span><br><span class=\"line\">./test_cmd.sh stop</span><br><span class=\"line\">run stop</span><br></pre></td></tr></table></figure></p>\n<p>將結果放到 /etc/rc.local 在server開啟時自動執行 /server-script/test_cmd start<br>如果是做成 service 可以放到 /etc/init.d/ 後啟動，使用 chkconfig 設定此 service 為 on</p>\n","site":{"data":{}},"excerpt":"","more":"<p>好久沒有寫sh了…都快忘光了…所以今天寫一個簡單的自動化腳本作為複習</p>\n<ul>\n<li>最常見的就是滿足三個功能<ul>\n<li>執行某個命令後自動化處理某些事情</li>\n<li>更改設定黨特定參數</li>\n<li>參數防呆，避免將數值改壞</li>\n</ul>\n</li>\n</ul>\n<p>先來完成第一步<br>首先要透過發出不同的命令去執行特定任務，大多都會使用case來針對不同命令做特定處理，最後增加一個case *) 當命令錯誤時可提示使用方式<br>這裡將處理的任務各自寫成獨立的function，是為了方便後續的維護與修改<br>下方的＄1是sh檔取得command line輸入的第一個參數，若有多個參數數值會依序count，如：\\$1, \\$2, \\$3…</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">edit_config</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'edit config'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">run_start</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'run start'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">run_stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'run stop'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$cmd</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    config)</span><br><span class=\"line\">        edit_config;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        run_start;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        run_stop;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'Usage 1. config id, 2. start, 3. stop'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>第二步來修改設定檔案特定的參數<br>假設現在要修改某個config檔案叫作test.cfg，裡面內容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test config</span></span><br><span class=\"line\"><span class=\"comment\"># id</span></span><br><span class=\"line\">id=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># other</span></span><br><span class=\"line\">other.cmd=xxx</span><br></pre></td></tr></table></figure>\n<p>想要修改數值可以使用sed命令即時修改特定參數id<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">'s/原字串/取代字串/g 修改檔案名稱</span></span><br></pre></td></tr></table></figure></p>\n<p>因為筆電是macbook所以直接執行會出錯，要在前面再加一個空字串…<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">''</span> <span class=\"string\">'s/原字串/取代字串/g 修改檔案名稱</span></span><br></pre></td></tr></table></figure></p>\n<p>接下來使用if/else來檢查第二參數id有沒有參數 (防呆) ，參數-z為檢查字串長度，若是0則為true，所以可用來判斷是否有輸入id<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$id</span> ]</span><br></pre></td></tr></table></figure></p>\n<p>檢查命令為config才設置id<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd=<span class=\"variable\">$1</span></span><br><span class=\"line\">file=test.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$cmd</span> == <span class=\"string\">'config'</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    id=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">edit_config</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"variable\">$id</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'no arg \"id\"'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'edit config, id='</span><span class=\"variable\">$id</span></span><br><span class=\"line\">        sed -i <span class=\"string\">''</span> <span class=\"string\">'s/\\(id=\\).*/id='</span><span class=\"variable\">$id</span><span class=\"string\">'/g'</span> <span class=\"variable\">$file</span> </span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最終完成後的格式如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cmd=<span class=\"variable\">$1</span></span><br><span class=\"line\">file=test.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$cmd</span> == <span class=\"string\">'config'</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    id=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">edit_config</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"variable\">$id</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'no arg \"id\"'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'edit config, id='</span><span class=\"variable\">$id</span></span><br><span class=\"line\">        sed -i <span class=\"string\">''</span> <span class=\"string\">'s/\\(id=\\).*/id='</span><span class=\"variable\">$id</span><span class=\"string\">'/g'</span> <span class=\"variable\">$file</span> </span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">run_start</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'run start'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">run_stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'run stop'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$cmd</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    config)</span><br><span class=\"line\">        edit_config;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        run_start;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        run_stop;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'Usage 1. config id, 2. start, 3. stop'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure></p>\n<p>測試命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./test_cmd.sh</span><br><span class=\"line\">Usage 1. config id, 2. start, 3. stop</span><br><span class=\"line\"></span><br><span class=\"line\">./test_cmd.sh config</span><br><span class=\"line\">no arg \"id\"</span><br><span class=\"line\"></span><br><span class=\"line\">./test_cmd.sh config 2</span><br><span class=\"line\">edit config, id=2</span><br><span class=\"line\"></span><br><span class=\"line\">./test_cmd.sh start</span><br><span class=\"line\">run start</span><br><span class=\"line\"></span><br><span class=\"line\">./test_cmd.sh stop</span><br><span class=\"line\">run stop</span><br></pre></td></tr></table></figure></p>\n<p>將結果放到 /etc/rc.local 在server開啟時自動執行 /server-script/test_cmd start<br>如果是做成 service 可以放到 /etc/init.d/ 後啟動，使用 chkconfig 設定此 service 為 on</p>\n"},{"title":"用illustrator幫自己畫一個新頭像","date":"2018-07-15T15:33:59.000Z","_content":"\n今天晚上沒事，心血來潮用illustrator幫自己畫個Github的頭像\n\n決定用我的名字Heng來創作，主題就用燃燒自己的生命來寫程式\n所以Heng就畫成熊熊燃燒的樣子，畫成圓形方便在某些頭像濾鏡為圓形可直接套用\n但看起來好像少了些什麼...\n\n<img src=\"/images/heng-001.png\" width=\"50%\" height=\"50%\" alt=\"head img 1\"/>\n\n<br/><br/>\n現在增加coding字型的底座，看起來就像火炬，滿符合我設定的主題\n\n<img src=\"/images/heng-002.png\" width=\"50%\" height=\"50%\" alt=\"head img 2\"/>\n\n替換成功囉!\n","source":"_posts/用illustrator幫自己畫一個新頭像.md","raw":"---\ntitle: 用illustrator幫自己畫一個新頭像\ndate: 2018-07-15 23:33:59\ntags:\n- illustrator\n---\n\n今天晚上沒事，心血來潮用illustrator幫自己畫個Github的頭像\n\n決定用我的名字Heng來創作，主題就用燃燒自己的生命來寫程式\n所以Heng就畫成熊熊燃燒的樣子，畫成圓形方便在某些頭像濾鏡為圓形可直接套用\n但看起來好像少了些什麼...\n\n<img src=\"/images/heng-001.png\" width=\"50%\" height=\"50%\" alt=\"head img 1\"/>\n\n<br/><br/>\n現在增加coding字型的底座，看起來就像火炬，滿符合我設定的主題\n\n<img src=\"/images/heng-002.png\" width=\"50%\" height=\"50%\" alt=\"head img 2\"/>\n\n替換成功囉!\n","slug":"用illustrator幫自己畫一個新頭像","published":1,"updated":"2019-10-10T15:42:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5l001f0rpjmkv8gtha","content":"<p>今天晚上沒事，心血來潮用illustrator幫自己畫個Github的頭像</p>\n<p>決定用我的名字Heng來創作，主題就用燃燒自己的生命來寫程式<br>所以Heng就畫成熊熊燃燒的樣子，畫成圓形方便在某些頭像濾鏡為圓形可直接套用<br>但看起來好像少了些什麼…</p>\n<p><img src=\"/images/heng-001.png\" width=\"50%\" height=\"50%\" alt=\"head img 1\"></p>\n<p><br><br><br>現在增加coding字型的底座，看起來就像火炬，滿符合我設定的主題</p>\n<p><img src=\"/images/heng-002.png\" width=\"50%\" height=\"50%\" alt=\"head img 2\"></p>\n<p>替換成功囉!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天晚上沒事，心血來潮用illustrator幫自己畫個Github的頭像</p>\n<p>決定用我的名字Heng來創作，主題就用燃燒自己的生命來寫程式<br>所以Heng就畫成熊熊燃燒的樣子，畫成圓形方便在某些頭像濾鏡為圓形可直接套用<br>但看起來好像少了些什麼…</p>\n<p><img src=\"/images/heng-001.png\" width=\"50%\" height=\"50%\" alt=\"head img 1\"></p>\n<p><br><br><br>現在增加coding字型的底座，看起來就像火炬，滿符合我設定的主題</p>\n<p><img src=\"/images/heng-002.png\" width=\"50%\" height=\"50%\" alt=\"head img 2\"></p>\n<p>替換成功囉!</p>\n"},{"title":"以前設計的APP Icon","date":"2019-10-10T14:13:18.000Z","_content":"\n以前設計的APP Icon，全部都是利用下班時在家用自己筆電內的illustrator繪製\n因為以前的工作是做工業4.0大數據，所以當時大多設計的Icon都是與工廠有關\n當時很流行扁平化設計\n\n<img src=\"/images/app-icon-001.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 1\"/>\n<img src=\"/images/app-icon-002.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 2\"/>\n\n\n下面是第一代的Icon，那時還流行反光效果\n\n<img src=\"/images/app-icon-003.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 3\"/>\n","source":"_drafts/以前設計的APP-Icon.md","raw":"---\ntitle: 以前設計的APP Icon\ndate: 2019-10-10 22:13:18\ntags:\n- illustrator\n---\n\n以前設計的APP Icon，全部都是利用下班時在家用自己筆電內的illustrator繪製\n因為以前的工作是做工業4.0大數據，所以當時大多設計的Icon都是與工廠有關\n當時很流行扁平化設計\n\n<img src=\"/images/app-icon-001.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 1\"/>\n<img src=\"/images/app-icon-002.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 2\"/>\n\n\n下面是第一代的Icon，那時還流行反光效果\n\n<img src=\"/images/app-icon-003.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 3\"/>\n","slug":"以前設計的APP-Icon","published":0,"updated":"2020-01-21T16:42:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr5m001g0rpj59drnd5m","content":"<p>以前設計的APP Icon，全部都是利用下班時在家用自己筆電內的illustrator繪製<br>因為以前的工作是做工業4.0大數據，所以當時大多設計的Icon都是與工廠有關<br>當時很流行扁平化設計</p>\n<p><img src=\"/images/app-icon-001.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 1\"><br><img src=\"/images/app-icon-002.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 2\"></p>\n<p>下面是第一代的Icon，那時還流行反光效果</p>\n<p><img src=\"/images/app-icon-003.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 3\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>以前設計的APP Icon，全部都是利用下班時在家用自己筆電內的illustrator繪製<br>因為以前的工作是做工業4.0大數據，所以當時大多設計的Icon都是與工廠有關<br>當時很流行扁平化設計</p>\n<p><img src=\"/images/app-icon-001.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 1\"><br><img src=\"/images/app-icon-002.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 2\"></p>\n<p>下面是第一代的Icon，那時還流行反光效果</p>\n<p><img src=\"/images/app-icon-003.png\" width=\"50%\" height=\"50%\" alt=\"new icon list 3\"></p>\n"},{"title":"Hadoop Writable","date":"2019-11-03T04:10:44.000Z","_content":"\n近幾天花了一些時間研究一下Hadoop，幾年前在使用HBase時有稍微玩一下\n但沒有深入去瞭解，目前正在學習使用docker，看到docker hub上有人已經包好hadoop cluster\n就建個cluster來測試一下\n\n啟動hadoop cluster成功\n<img src=\"/images/hadoop-writable-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n\n<img src=\"/images/hadoop-writable-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"/>\n\n<img src=\"/images/hadoop-writable-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"/>\n\n這次主題為客製化Writable，將資料包裝為Serializable Object後傳輸\n為了傳輸效能Hadoop有自己的序列化，而不直接使用Java自帶的序列化\n同樣是序列化，但是Java序列化產生出的byte stream包了較多的物件資訊(重量)\nHadoop的序列化自帶的序列化資訊比較簡潔(輕量)\n\n要使用Hadoop的序列化必須implements Writable\n它會要求Override write和readFields作為序列化與反序列化資料轉化為byte stream\n\n此次使用場景為統計各個產品被哪些顧客購買\n資料分為三種：\n顧客資料(customer.txt)\n\n| customerId | productId |\n| ---------- | --------- |\n| 001        | 01        |\n| 002        | 04        |\n| ...        | ...       |\n\n\n產品資料(product.txt)\n\n| productId  | productName   |\n| ---------- | ------------- |\n| 01         | iPhone 8 Plus |\n| 02         | iPhone 7      |\n| ...        | ...           |\n\n產品價格(price.txt)\n\n| productId  | productPrice  |\n| ---------- | ------------- |\n| 01         | 449.97s       |\n| 02         | 207.00        |\n| ...        | ...           |\n\n先建立一個CustomerBean將來資料從map傳給reducer時可用\n這裡要注意write和readFields在做序列化和反序列化時“順序”需要保持順序一致\n才不會解析錯誤\n\n```java \npublic class CustomerBean implements Writable {\n    protected static final String CUSTOMER = \"customer.txt\";\n    protected static final String PRODUCT = \"product.txt\";\n    protected static final String PRICE = \"price.txt\";\n    \n    private String dataType;\n    \n    private String customerId;\n    private String productId;\n    private String productName;\n    private double productPrice;\n    \n    public CustomerBean() {\n        super();\n    }\n\n    @Override\n    public void write(DataOutput out) throws IOException {\n        out.writeUTF(this.dataType);\n        out.writeUTF(this.customerId);\n        out.writeUTF(this.productName);\n        out.writeDouble(this.productPrice);\n    }\n    \n    @Override\n    public void readFields(DataInput in) throws IOException {\n        this.dataType = in.readUTF();\n        this.customerId = in.readUTF();\n        this.productName = in.readUTF();\n        this.productPrice = in.readDouble();\n    }\n    \n    ...\n\n}\n\n```\n\n- - -\n接下來建立一個BuyPhoneMapper將資料封裝到CustomerBean後傳給reducer處理\n因為資料源有三種，所以第一步需要在setup時預先判別資料源類型，這裡使用檔名做為區別\n第二步根據資料類型封裝資料到CustomerBean此時也需要紀錄資料源類型，方便在reducer時判別\n第三步將資料寫入context，分組key為productId(三種資料源共通使用)，value為CustomerBean\n\n```java \npublic class BuyPhoneMapper extends Mapper<LongWritable, Text, Text, CustomerBean> {\n    private static Logger logger = LoggerFactory.getLogger(BuyPhoneMapper.class);\n    \n    private String dataType;\n    private CustomerBean customerBean = new CustomerBean();\n    private Text outputKey = new Text();\n    \n    @Override\n    protected void setup(Context context) throws IOException, InterruptedException {\n        FileSplit inputSplit = (FileSplit) context.getInputSplit();\n        this.dataType = inputSplit.getPath().getName();\n    }\n    \n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n        String record = value.toString();\n        String[] cols = record.split(Constant.REGEX_COLS_SPLIT_SYMBOL);\n        this.customerBean.setDataType(this.dataType);\n        switch(this.dataType){\n            case CUSTOMER:\n                setCustomer(cols, this.outputKey, this.customerBean);\n                break;\n            case PRODUCT:\n                setProduct(cols, this.outputKey, this.customerBean);\n                break;\n            case PRICE:\n                setPrice(cols, this.outputKey, this.customerBean);\n                break;\n            default:\n                logger.warn(\"It can't find this data type: {}\", this.dataType);\n                return;\n        }\n        context.write(this.outputKey, this.customerBean);\n    }\n    \n    // record: customerId, productId\n    private void setCustomer(String[] cols, Text key, CustomerBean customerBean){\n        String customerId = cols[0];\n        String productId = cols[1];\n        customerBean.setCustomerId(customerId);\n        customerBean.setProductId(productId);\n        customerBean.setProductName(ENPTY_STRING);\n        customerBean.setProductPrice(0d);\n        key.set(productId);\n    }\n    \n    // record: productId, productName\n    private void setProduct(String[] cols, Text key, CustomerBean customerBean){\n        String productId = cols[0];\n        String productName = cols[1];\n        customerBean.setCustomerId(ENPTY_STRING);\n        customerBean.setProductId(productId);\n        customerBean.setProductName(productName);\n        customerBean.setProductPrice(0d);\n        key.set(productId);\n    }\n    \n    // record: productId, productPrice\n    private void setPrice(String[] cols, Text key, CustomerBean customerBean){\n        String productId = cols[0];\n        double productPrice = Double.parseDouble(cols[1]);\n        customerBean.setCustomerId(ENPTY_STRING);\n        customerBean.setProductId(productId);\n        customerBean.setProductName(ENPTY_STRING);\n        customerBean.setProductPrice(productPrice);\n        key.set(productId);\n    }\n}\n\n```\n\n- - -\nBuyPhoneReducer統計手機產品被哪些顧客購買\n第一步根據資料源類型取得顧客資料(customer)產品名稱(productName)和產品價格(productPrice)\n第二步統計顧客使用的產品\n第三步依據產品名稱(productId)與產品價格(productPrice)分群(key)，統計買該產品的顧客們(customerIds)輸出為value\n\n```java \npublic class BuyPhoneReducer extends Reducer<Text, CustomerBean, Text, Text> {\n    private static Logger logger = LoggerFactory.getLogger(BuyPhoneReducer.class);\n    \n    private Text outputKey = new Text();\n    private Text outputValue = new Text();\n    \n    @Override\n    protected void reduce(Text key, Iterable<CustomerBean> values, Context context) throws IOException, InterruptedException {\n        List<CustomerBean> customers = new ArrayList<>();\n        String productName = ENPTY_STRING;\n        double productPrice = 0d;\n        for(CustomerBean customerBean:values){\n            switch(customerBean.getDataType()){\n                case CUSTOMER:\n                    addCustomer(customers, customerBean);\n                    break;\n                case PRODUCT:\n                    productName = customerBean.getProductName();\n                    break;  \n                case PRICE:\n                    productPrice = customerBean.getProductPrice();\n                    break;\n                default:\n                    logger.warn(\"It can't find this data type: {}\", customerBean.getDataType());\n                    return;\n            }\n        }\n        writeResult(context, customers, productName, productPrice);\n    }\n    \n    private void addCustomer(List<CustomerBean> customers, CustomerBean customer){\n        CustomerBean temp = new CustomerBean();\n        try {\n            BeanUtils.copyProperties(temp, customer);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            e.printStackTrace();\n        }\n        customers.add(temp);\n    }\n    \n    private void writeResult(Context context, List<CustomerBean> customers, String productName, double productPrice) throws IOException, InterruptedException {\n        if(customers.isEmpty()){\n            return;\n        }\n        List<String> customerIds = new ArrayList<>();\n        for(CustomerBean customer:customers){\n            customer.setProductName(productName);\n            customer.setProductPrice(productPrice);\n            customerIds.add(customer.getCustomerId());\n        }\n        this.outputKey.set(productName + REGEX_COLS_SPLIT_SYMBOL + productPrice);\n        this.outputValue.set(Joiner.on(REGEX_DATA_JOIN_SPLIT_SYMBOL).join(customerIds));\n        context.write(this.outputKey, this.outputValue);\n    }\n}\n\n```\n- - -\n到最後一個步驟了，包裝成hadoop任務(job)，yarn可以根據此設定進行執行\n當job送出時會也會包含Configuration的xml設定一起送出\n這裡我將Job多包裝一層，比較方便閱讀和使用\n\n```java \npublic static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf = new Configuration();\n    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();\n    \n    if(otherArgs.length < 2){\n        System.err.println(\"Usage: \" + JOB_NAME + \" <in> <out>\");\n        System.exit(2);\n    }\n    \n    Job job = new HadoopJob(conf, JOB_NAME)\n            .mapReduce(BuyPhoneJob.class, BuyPhoneMapper.class, BuyPhoneReducer.class)\n            .mapKeyValue(Text.class, CustomerBean.class)\n            .reducerKeyValue(Text.class, Text.class)\n            .getJob();\n    \n    FileInputFormat.setInputPaths(job, new Path(otherArgs[0]));\n    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));\n    \n    System.exit(job.waitForCompletion(true) ? 0 : 1);\n}\n```\n<img src=\"/images/hadoop-writable-004.png\" width=\"300px\" height=\"15%\" alt=\"img4\"/>\n\n\n將產品資料寫入到hdfs\n<img src=\"/images/hadoop-writable-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"/>\n\n<img src=\"/images/hadoop-writable-006.png\" width=\"50%\" height=\"50%\" alt=\"img6\"/>\n\n執行job\n\n<img src=\"/images/hadoop-writable-007.png\" width=\"50%\" height=\"50%\" alt=\"img7\"/>\n\n執行完成\n\n<img src=\"/images/hadoop-writable-008.png\" width=\"50%\" height=\"50%\" alt=\"img8\"/>\n\n查看結果\n\n<img src=\"/images/hadoop-writable-009.png\" width=\"50%\" height=\"50%\" alt=\"img9\"/>\n","source":"_posts/Hadoop-Writable.md","raw":"---\ntitle: Hadoop Writable\ndate: 2019-11-03 12:10:44\ntags:\n- hadoop\n- big data\n---\n\n近幾天花了一些時間研究一下Hadoop，幾年前在使用HBase時有稍微玩一下\n但沒有深入去瞭解，目前正在學習使用docker，看到docker hub上有人已經包好hadoop cluster\n就建個cluster來測試一下\n\n啟動hadoop cluster成功\n<img src=\"/images/hadoop-writable-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"/>\n\n<img src=\"/images/hadoop-writable-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"/>\n\n<img src=\"/images/hadoop-writable-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"/>\n\n這次主題為客製化Writable，將資料包裝為Serializable Object後傳輸\n為了傳輸效能Hadoop有自己的序列化，而不直接使用Java自帶的序列化\n同樣是序列化，但是Java序列化產生出的byte stream包了較多的物件資訊(重量)\nHadoop的序列化自帶的序列化資訊比較簡潔(輕量)\n\n要使用Hadoop的序列化必須implements Writable\n它會要求Override write和readFields作為序列化與反序列化資料轉化為byte stream\n\n此次使用場景為統計各個產品被哪些顧客購買\n資料分為三種：\n顧客資料(customer.txt)\n\n| customerId | productId |\n| ---------- | --------- |\n| 001        | 01        |\n| 002        | 04        |\n| ...        | ...       |\n\n\n產品資料(product.txt)\n\n| productId  | productName   |\n| ---------- | ------------- |\n| 01         | iPhone 8 Plus |\n| 02         | iPhone 7      |\n| ...        | ...           |\n\n產品價格(price.txt)\n\n| productId  | productPrice  |\n| ---------- | ------------- |\n| 01         | 449.97s       |\n| 02         | 207.00        |\n| ...        | ...           |\n\n先建立一個CustomerBean將來資料從map傳給reducer時可用\n這裡要注意write和readFields在做序列化和反序列化時“順序”需要保持順序一致\n才不會解析錯誤\n\n```java \npublic class CustomerBean implements Writable {\n    protected static final String CUSTOMER = \"customer.txt\";\n    protected static final String PRODUCT = \"product.txt\";\n    protected static final String PRICE = \"price.txt\";\n    \n    private String dataType;\n    \n    private String customerId;\n    private String productId;\n    private String productName;\n    private double productPrice;\n    \n    public CustomerBean() {\n        super();\n    }\n\n    @Override\n    public void write(DataOutput out) throws IOException {\n        out.writeUTF(this.dataType);\n        out.writeUTF(this.customerId);\n        out.writeUTF(this.productName);\n        out.writeDouble(this.productPrice);\n    }\n    \n    @Override\n    public void readFields(DataInput in) throws IOException {\n        this.dataType = in.readUTF();\n        this.customerId = in.readUTF();\n        this.productName = in.readUTF();\n        this.productPrice = in.readDouble();\n    }\n    \n    ...\n\n}\n\n```\n\n- - -\n接下來建立一個BuyPhoneMapper將資料封裝到CustomerBean後傳給reducer處理\n因為資料源有三種，所以第一步需要在setup時預先判別資料源類型，這裡使用檔名做為區別\n第二步根據資料類型封裝資料到CustomerBean此時也需要紀錄資料源類型，方便在reducer時判別\n第三步將資料寫入context，分組key為productId(三種資料源共通使用)，value為CustomerBean\n\n```java \npublic class BuyPhoneMapper extends Mapper<LongWritable, Text, Text, CustomerBean> {\n    private static Logger logger = LoggerFactory.getLogger(BuyPhoneMapper.class);\n    \n    private String dataType;\n    private CustomerBean customerBean = new CustomerBean();\n    private Text outputKey = new Text();\n    \n    @Override\n    protected void setup(Context context) throws IOException, InterruptedException {\n        FileSplit inputSplit = (FileSplit) context.getInputSplit();\n        this.dataType = inputSplit.getPath().getName();\n    }\n    \n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n        String record = value.toString();\n        String[] cols = record.split(Constant.REGEX_COLS_SPLIT_SYMBOL);\n        this.customerBean.setDataType(this.dataType);\n        switch(this.dataType){\n            case CUSTOMER:\n                setCustomer(cols, this.outputKey, this.customerBean);\n                break;\n            case PRODUCT:\n                setProduct(cols, this.outputKey, this.customerBean);\n                break;\n            case PRICE:\n                setPrice(cols, this.outputKey, this.customerBean);\n                break;\n            default:\n                logger.warn(\"It can't find this data type: {}\", this.dataType);\n                return;\n        }\n        context.write(this.outputKey, this.customerBean);\n    }\n    \n    // record: customerId, productId\n    private void setCustomer(String[] cols, Text key, CustomerBean customerBean){\n        String customerId = cols[0];\n        String productId = cols[1];\n        customerBean.setCustomerId(customerId);\n        customerBean.setProductId(productId);\n        customerBean.setProductName(ENPTY_STRING);\n        customerBean.setProductPrice(0d);\n        key.set(productId);\n    }\n    \n    // record: productId, productName\n    private void setProduct(String[] cols, Text key, CustomerBean customerBean){\n        String productId = cols[0];\n        String productName = cols[1];\n        customerBean.setCustomerId(ENPTY_STRING);\n        customerBean.setProductId(productId);\n        customerBean.setProductName(productName);\n        customerBean.setProductPrice(0d);\n        key.set(productId);\n    }\n    \n    // record: productId, productPrice\n    private void setPrice(String[] cols, Text key, CustomerBean customerBean){\n        String productId = cols[0];\n        double productPrice = Double.parseDouble(cols[1]);\n        customerBean.setCustomerId(ENPTY_STRING);\n        customerBean.setProductId(productId);\n        customerBean.setProductName(ENPTY_STRING);\n        customerBean.setProductPrice(productPrice);\n        key.set(productId);\n    }\n}\n\n```\n\n- - -\nBuyPhoneReducer統計手機產品被哪些顧客購買\n第一步根據資料源類型取得顧客資料(customer)產品名稱(productName)和產品價格(productPrice)\n第二步統計顧客使用的產品\n第三步依據產品名稱(productId)與產品價格(productPrice)分群(key)，統計買該產品的顧客們(customerIds)輸出為value\n\n```java \npublic class BuyPhoneReducer extends Reducer<Text, CustomerBean, Text, Text> {\n    private static Logger logger = LoggerFactory.getLogger(BuyPhoneReducer.class);\n    \n    private Text outputKey = new Text();\n    private Text outputValue = new Text();\n    \n    @Override\n    protected void reduce(Text key, Iterable<CustomerBean> values, Context context) throws IOException, InterruptedException {\n        List<CustomerBean> customers = new ArrayList<>();\n        String productName = ENPTY_STRING;\n        double productPrice = 0d;\n        for(CustomerBean customerBean:values){\n            switch(customerBean.getDataType()){\n                case CUSTOMER:\n                    addCustomer(customers, customerBean);\n                    break;\n                case PRODUCT:\n                    productName = customerBean.getProductName();\n                    break;  \n                case PRICE:\n                    productPrice = customerBean.getProductPrice();\n                    break;\n                default:\n                    logger.warn(\"It can't find this data type: {}\", customerBean.getDataType());\n                    return;\n            }\n        }\n        writeResult(context, customers, productName, productPrice);\n    }\n    \n    private void addCustomer(List<CustomerBean> customers, CustomerBean customer){\n        CustomerBean temp = new CustomerBean();\n        try {\n            BeanUtils.copyProperties(temp, customer);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            e.printStackTrace();\n        }\n        customers.add(temp);\n    }\n    \n    private void writeResult(Context context, List<CustomerBean> customers, String productName, double productPrice) throws IOException, InterruptedException {\n        if(customers.isEmpty()){\n            return;\n        }\n        List<String> customerIds = new ArrayList<>();\n        for(CustomerBean customer:customers){\n            customer.setProductName(productName);\n            customer.setProductPrice(productPrice);\n            customerIds.add(customer.getCustomerId());\n        }\n        this.outputKey.set(productName + REGEX_COLS_SPLIT_SYMBOL + productPrice);\n        this.outputValue.set(Joiner.on(REGEX_DATA_JOIN_SPLIT_SYMBOL).join(customerIds));\n        context.write(this.outputKey, this.outputValue);\n    }\n}\n\n```\n- - -\n到最後一個步驟了，包裝成hadoop任務(job)，yarn可以根據此設定進行執行\n當job送出時會也會包含Configuration的xml設定一起送出\n這裡我將Job多包裝一層，比較方便閱讀和使用\n\n```java \npublic static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {\n    Configuration conf = new Configuration();\n    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();\n    \n    if(otherArgs.length < 2){\n        System.err.println(\"Usage: \" + JOB_NAME + \" <in> <out>\");\n        System.exit(2);\n    }\n    \n    Job job = new HadoopJob(conf, JOB_NAME)\n            .mapReduce(BuyPhoneJob.class, BuyPhoneMapper.class, BuyPhoneReducer.class)\n            .mapKeyValue(Text.class, CustomerBean.class)\n            .reducerKeyValue(Text.class, Text.class)\n            .getJob();\n    \n    FileInputFormat.setInputPaths(job, new Path(otherArgs[0]));\n    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));\n    \n    System.exit(job.waitForCompletion(true) ? 0 : 1);\n}\n```\n<img src=\"/images/hadoop-writable-004.png\" width=\"300px\" height=\"15%\" alt=\"img4\"/>\n\n\n將產品資料寫入到hdfs\n<img src=\"/images/hadoop-writable-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"/>\n\n<img src=\"/images/hadoop-writable-006.png\" width=\"50%\" height=\"50%\" alt=\"img6\"/>\n\n執行job\n\n<img src=\"/images/hadoop-writable-007.png\" width=\"50%\" height=\"50%\" alt=\"img7\"/>\n\n執行完成\n\n<img src=\"/images/hadoop-writable-008.png\" width=\"50%\" height=\"50%\" alt=\"img8\"/>\n\n查看結果\n\n<img src=\"/images/hadoop-writable-009.png\" width=\"50%\" height=\"50%\" alt=\"img9\"/>\n","slug":"Hadoop-Writable","published":1,"updated":"2019-11-11T12:55:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr6600330rpjtn22x2q9","content":"<p>近幾天花了一些時間研究一下Hadoop，幾年前在使用HBase時有稍微玩一下<br>但沒有深入去瞭解，目前正在學習使用docker，看到docker hub上有人已經包好hadoop cluster<br>就建個cluster來測試一下</p>\n<p>啟動hadoop cluster成功<br><img src=\"/images/hadoop-writable-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<p><img src=\"/images/hadoop-writable-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"></p>\n<p><img src=\"/images/hadoop-writable-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"></p>\n<p>這次主題為客製化Writable，將資料包裝為Serializable Object後傳輸<br>為了傳輸效能Hadoop有自己的序列化，而不直接使用Java自帶的序列化<br>同樣是序列化，但是Java序列化產生出的byte stream包了較多的物件資訊(重量)<br>Hadoop的序列化自帶的序列化資訊比較簡潔(輕量)</p>\n<p>要使用Hadoop的序列化必須implements Writable<br>它會要求Override write和readFields作為序列化與反序列化資料轉化為byte stream</p>\n<p>此次使用場景為統計各個產品被哪些顧客購買<br>資料分為三種：<br>顧客資料(customer.txt)</p>\n<table>\n<thead>\n<tr>\n<th>customerId</th>\n<th>productId</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>001</td>\n<td>01</td>\n</tr>\n<tr>\n<td>002</td>\n<td>04</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>產品資料(product.txt)</p>\n<table>\n<thead>\n<tr>\n<th>productId</th>\n<th>productName</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>iPhone 8 Plus</td>\n</tr>\n<tr>\n<td>02</td>\n<td>iPhone 7</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>產品價格(price.txt)</p>\n<table>\n<thead>\n<tr>\n<th>productId</th>\n<th>productPrice</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>449.97s</td>\n</tr>\n<tr>\n<td>02</td>\n<td>207.00</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>先建立一個CustomerBean將來資料從map傳給reducer時可用<br>這裡要注意write和readFields在做序列化和反序列化時“順序”需要保持順序一致<br>才不會解析錯誤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CUSTOMER = <span class=\"string\">\"customer.txt\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PRODUCT = <span class=\"string\">\"product.txt\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PRICE = <span class=\"string\">\"price.txt\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String customerId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String productId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String productName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> productPrice;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomerBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.dataType);</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.customerId);</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.productName);</span><br><span class=\"line\">        out.writeDouble(<span class=\"keyword\">this</span>.productPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataType = in.readUTF();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customerId = in.readUTF();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productName = in.readUTF();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productPrice = in.readDouble();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>接下來建立一個BuyPhoneMapper將資料封裝到CustomerBean後傳給reducer處理<br>因為資料源有三種，所以第一步需要在setup時預先判別資料源類型，這裡使用檔名做為區別<br>第二步根據資料類型封裝資料到CustomerBean此時也需要紀錄資料源類型，方便在reducer時判別<br>第三步將資料寫入context，分組key為productId(三種資料源共通使用)，value為CustomerBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">CustomerBean</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(BuyPhoneMapper.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CustomerBean customerBean = <span class=\"keyword\">new</span> CustomerBean();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text outputKey = <span class=\"keyword\">new</span> Text();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">(Context context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        FileSplit inputSplit = (FileSplit) context.getInputSplit();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataType = inputSplit.getPath().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable key, Text value, Context context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        String record = value.toString();</span><br><span class=\"line\">        String[] cols = record.split(Constant.REGEX_COLS_SPLIT_SYMBOL);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customerBean.setDataType(<span class=\"keyword\">this</span>.dataType);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(<span class=\"keyword\">this</span>.dataType)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CUSTOMER:</span><br><span class=\"line\">                setCustomer(cols, <span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.customerBean);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> PRODUCT:</span><br><span class=\"line\">                setProduct(cols, <span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.customerBean);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> PRICE:</span><br><span class=\"line\">                setPrice(cols, <span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.customerBean);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"It can't find this data type: &#123;&#125;\"</span>, <span class=\"keyword\">this</span>.dataType);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.write(<span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.customerBean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// record: customerId, productId</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setCustomer</span><span class=\"params\">(String[] cols, Text key, CustomerBean customerBean)</span></span>&#123;</span><br><span class=\"line\">        String customerId = cols[<span class=\"number\">0</span>];</span><br><span class=\"line\">        String productId = cols[<span class=\"number\">1</span>];</span><br><span class=\"line\">        customerBean.setCustomerId(customerId);</span><br><span class=\"line\">        customerBean.setProductId(productId);</span><br><span class=\"line\">        customerBean.setProductName(ENPTY_STRING);</span><br><span class=\"line\">        customerBean.setProductPrice(<span class=\"number\">0</span>d);</span><br><span class=\"line\">        key.set(productId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// record: productId, productName</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setProduct</span><span class=\"params\">(String[] cols, Text key, CustomerBean customerBean)</span></span>&#123;</span><br><span class=\"line\">        String productId = cols[<span class=\"number\">0</span>];</span><br><span class=\"line\">        String productName = cols[<span class=\"number\">1</span>];</span><br><span class=\"line\">        customerBean.setCustomerId(ENPTY_STRING);</span><br><span class=\"line\">        customerBean.setProductId(productId);</span><br><span class=\"line\">        customerBean.setProductName(productName);</span><br><span class=\"line\">        customerBean.setProductPrice(<span class=\"number\">0</span>d);</span><br><span class=\"line\">        key.set(productId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// record: productId, productPrice</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(String[] cols, Text key, CustomerBean customerBean)</span></span>&#123;</span><br><span class=\"line\">        String productId = cols[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">double</span> productPrice = Double.parseDouble(cols[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        customerBean.setCustomerId(ENPTY_STRING);</span><br><span class=\"line\">        customerBean.setProductId(productId);</span><br><span class=\"line\">        customerBean.setProductName(ENPTY_STRING);</span><br><span class=\"line\">        customerBean.setProductPrice(productPrice);</span><br><span class=\"line\">        key.set(productId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>BuyPhoneReducer統計手機產品被哪些顧客購買<br>第一步根據資料源類型取得顧客資料(customer)產品名稱(productName)和產品價格(productPrice)<br>第二步統計顧客使用的產品<br>第三步依據產品名稱(productId)與產品價格(productPrice)分群(key)，統計買該產品的顧客們(customerIds)輸出為value</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneReducer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">CustomerBean</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(BuyPhoneReducer.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text outputKey = <span class=\"keyword\">new</span> Text();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text outputValue = <span class=\"keyword\">new</span> Text();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text key, Iterable&lt;CustomerBean&gt; values, Context context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        List&lt;CustomerBean&gt; customers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        String productName = ENPTY_STRING;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> productPrice = <span class=\"number\">0</span>d;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(CustomerBean customerBean:values)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(customerBean.getDataType())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> CUSTOMER:</span><br><span class=\"line\">                    addCustomer(customers, customerBean);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> PRODUCT:</span><br><span class=\"line\">                    productName = customerBean.getProductName();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                <span class=\"keyword\">case</span> PRICE:</span><br><span class=\"line\">                    productPrice = customerBean.getProductPrice();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"It can't find this data type: &#123;&#125;\"</span>, customerBean.getDataType());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        writeResult(context, customers, productName, productPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addCustomer</span><span class=\"params\">(List&lt;CustomerBean&gt; customers, CustomerBean customer)</span></span>&#123;</span><br><span class=\"line\">        CustomerBean temp = <span class=\"keyword\">new</span> CustomerBean();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            BeanUtils.copyProperties(temp, customer);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        customers.add(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeResult</span><span class=\"params\">(Context context, List&lt;CustomerBean&gt; customers, String productName, <span class=\"keyword\">double</span> productPrice)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(customers.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;String&gt; customerIds = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(CustomerBean customer:customers)&#123;</span><br><span class=\"line\">            customer.setProductName(productName);</span><br><span class=\"line\">            customer.setProductPrice(productPrice);</span><br><span class=\"line\">            customerIds.add(customer.getCustomerId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.outputKey.set(productName + REGEX_COLS_SPLIT_SYMBOL + productPrice);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.outputValue.set(Joiner.on(REGEX_DATA_JOIN_SPLIT_SYMBOL).join(customerIds));</span><br><span class=\"line\">        context.write(<span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.outputValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>到最後一個步驟了，包裝成hadoop任務(job)，yarn可以根據此設定進行執行<br>當job送出時會也會包含Configuration的xml設定一起送出<br>這裡我將Job多包裝一層，比較方便閱讀和使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class=\"line\">    Configuration conf = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">    String[] otherArgs = <span class=\"keyword\">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(otherArgs.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Usage: \"</span> + JOB_NAME + <span class=\"string\">\" &lt;in&gt; &lt;out&gt;\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Job job = <span class=\"keyword\">new</span> HadoopJob(conf, JOB_NAME)</span><br><span class=\"line\">            .mapReduce(BuyPhoneJob.class, BuyPhoneMapper.class, BuyPhoneReducer.class)</span><br><span class=\"line\">            .mapKeyValue(Text.class, CustomerBean.class)</span><br><span class=\"line\">            .reducerKeyValue(Text.class, Text.class)</span><br><span class=\"line\">            .getJob();</span><br><span class=\"line\">    </span><br><span class=\"line\">    FileInputFormat.setInputPaths(job, <span class=\"keyword\">new</span> Path(otherArgs[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    FileOutputFormat.setOutputPath(job, <span class=\"keyword\">new</span> Path(otherArgs[<span class=\"number\">1</span>]));</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.exit(job.waitForCompletion(<span class=\"keyword\">true</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/hadoop-writable-004.png\" width=\"300px\" height=\"15%\" alt=\"img4\"></p>\n<p>將產品資料寫入到hdfs<br><img src=\"/images/hadoop-writable-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"></p>\n<p><img src=\"/images/hadoop-writable-006.png\" width=\"50%\" height=\"50%\" alt=\"img6\"></p>\n<p>執行job</p>\n<p><img src=\"/images/hadoop-writable-007.png\" width=\"50%\" height=\"50%\" alt=\"img7\"></p>\n<p>執行完成</p>\n<p><img src=\"/images/hadoop-writable-008.png\" width=\"50%\" height=\"50%\" alt=\"img8\"></p>\n<p>查看結果</p>\n<p><img src=\"/images/hadoop-writable-009.png\" width=\"50%\" height=\"50%\" alt=\"img9\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>近幾天花了一些時間研究一下Hadoop，幾年前在使用HBase時有稍微玩一下<br>但沒有深入去瞭解，目前正在學習使用docker，看到docker hub上有人已經包好hadoop cluster<br>就建個cluster來測試一下</p>\n<p>啟動hadoop cluster成功<br><img src=\"/images/hadoop-writable-001.png\" width=\"50%\" height=\"50%\" alt=\"img1\"></p>\n<p><img src=\"/images/hadoop-writable-002.png\" width=\"50%\" height=\"50%\" alt=\"img2\"></p>\n<p><img src=\"/images/hadoop-writable-003.png\" width=\"50%\" height=\"50%\" alt=\"img3\"></p>\n<p>這次主題為客製化Writable，將資料包裝為Serializable Object後傳輸<br>為了傳輸效能Hadoop有自己的序列化，而不直接使用Java自帶的序列化<br>同樣是序列化，但是Java序列化產生出的byte stream包了較多的物件資訊(重量)<br>Hadoop的序列化自帶的序列化資訊比較簡潔(輕量)</p>\n<p>要使用Hadoop的序列化必須implements Writable<br>它會要求Override write和readFields作為序列化與反序列化資料轉化為byte stream</p>\n<p>此次使用場景為統計各個產品被哪些顧客購買<br>資料分為三種：<br>顧客資料(customer.txt)</p>\n<table>\n<thead>\n<tr>\n<th>customerId</th>\n<th>productId</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>001</td>\n<td>01</td>\n</tr>\n<tr>\n<td>002</td>\n<td>04</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>產品資料(product.txt)</p>\n<table>\n<thead>\n<tr>\n<th>productId</th>\n<th>productName</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>iPhone 8 Plus</td>\n</tr>\n<tr>\n<td>02</td>\n<td>iPhone 7</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>產品價格(price.txt)</p>\n<table>\n<thead>\n<tr>\n<th>productId</th>\n<th>productPrice</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>449.97s</td>\n</tr>\n<tr>\n<td>02</td>\n<td>207.00</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>先建立一個CustomerBean將來資料從map傳給reducer時可用<br>這裡要注意write和readFields在做序列化和反序列化時“順序”需要保持順序一致<br>才不會解析錯誤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CUSTOMER = <span class=\"string\">\"customer.txt\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PRODUCT = <span class=\"string\">\"product.txt\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PRICE = <span class=\"string\">\"price.txt\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String customerId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String productId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String productName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> productPrice;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomerBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.dataType);</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.customerId);</span><br><span class=\"line\">        out.writeUTF(<span class=\"keyword\">this</span>.productName);</span><br><span class=\"line\">        out.writeDouble(<span class=\"keyword\">this</span>.productPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataType = in.readUTF();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customerId = in.readUTF();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productName = in.readUTF();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productPrice = in.readDouble();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>接下來建立一個BuyPhoneMapper將資料封裝到CustomerBean後傳給reducer處理<br>因為資料源有三種，所以第一步需要在setup時預先判別資料源類型，這裡使用檔名做為區別<br>第二步根據資料類型封裝資料到CustomerBean此時也需要紀錄資料源類型，方便在reducer時判別<br>第三步將資料寫入context，分組key為productId(三種資料源共通使用)，value為CustomerBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">CustomerBean</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(BuyPhoneMapper.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CustomerBean customerBean = <span class=\"keyword\">new</span> CustomerBean();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text outputKey = <span class=\"keyword\">new</span> Text();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">(Context context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        FileSplit inputSplit = (FileSplit) context.getInputSplit();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataType = inputSplit.getPath().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable key, Text value, Context context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        String record = value.toString();</span><br><span class=\"line\">        String[] cols = record.split(Constant.REGEX_COLS_SPLIT_SYMBOL);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customerBean.setDataType(<span class=\"keyword\">this</span>.dataType);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(<span class=\"keyword\">this</span>.dataType)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CUSTOMER:</span><br><span class=\"line\">                setCustomer(cols, <span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.customerBean);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> PRODUCT:</span><br><span class=\"line\">                setProduct(cols, <span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.customerBean);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> PRICE:</span><br><span class=\"line\">                setPrice(cols, <span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.customerBean);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"It can't find this data type: &#123;&#125;\"</span>, <span class=\"keyword\">this</span>.dataType);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.write(<span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.customerBean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// record: customerId, productId</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setCustomer</span><span class=\"params\">(String[] cols, Text key, CustomerBean customerBean)</span></span>&#123;</span><br><span class=\"line\">        String customerId = cols[<span class=\"number\">0</span>];</span><br><span class=\"line\">        String productId = cols[<span class=\"number\">1</span>];</span><br><span class=\"line\">        customerBean.setCustomerId(customerId);</span><br><span class=\"line\">        customerBean.setProductId(productId);</span><br><span class=\"line\">        customerBean.setProductName(ENPTY_STRING);</span><br><span class=\"line\">        customerBean.setProductPrice(<span class=\"number\">0</span>d);</span><br><span class=\"line\">        key.set(productId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// record: productId, productName</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setProduct</span><span class=\"params\">(String[] cols, Text key, CustomerBean customerBean)</span></span>&#123;</span><br><span class=\"line\">        String productId = cols[<span class=\"number\">0</span>];</span><br><span class=\"line\">        String productName = cols[<span class=\"number\">1</span>];</span><br><span class=\"line\">        customerBean.setCustomerId(ENPTY_STRING);</span><br><span class=\"line\">        customerBean.setProductId(productId);</span><br><span class=\"line\">        customerBean.setProductName(productName);</span><br><span class=\"line\">        customerBean.setProductPrice(<span class=\"number\">0</span>d);</span><br><span class=\"line\">        key.set(productId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// record: productId, productPrice</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(String[] cols, Text key, CustomerBean customerBean)</span></span>&#123;</span><br><span class=\"line\">        String productId = cols[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">double</span> productPrice = Double.parseDouble(cols[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        customerBean.setCustomerId(ENPTY_STRING);</span><br><span class=\"line\">        customerBean.setProductId(productId);</span><br><span class=\"line\">        customerBean.setProductName(ENPTY_STRING);</span><br><span class=\"line\">        customerBean.setProductPrice(productPrice);</span><br><span class=\"line\">        key.set(productId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>BuyPhoneReducer統計手機產品被哪些顧客購買<br>第一步根據資料源類型取得顧客資料(customer)產品名稱(productName)和產品價格(productPrice)<br>第二步統計顧客使用的產品<br>第三步依據產品名稱(productId)與產品價格(productPrice)分群(key)，統計買該產品的顧客們(customerIds)輸出為value</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyPhoneReducer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">CustomerBean</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(BuyPhoneReducer.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text outputKey = <span class=\"keyword\">new</span> Text();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Text outputValue = <span class=\"keyword\">new</span> Text();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text key, Iterable&lt;CustomerBean&gt; values, Context context)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        List&lt;CustomerBean&gt; customers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        String productName = ENPTY_STRING;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> productPrice = <span class=\"number\">0</span>d;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(CustomerBean customerBean:values)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(customerBean.getDataType())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> CUSTOMER:</span><br><span class=\"line\">                    addCustomer(customers, customerBean);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> PRODUCT:</span><br><span class=\"line\">                    productName = customerBean.getProductName();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                <span class=\"keyword\">case</span> PRICE:</span><br><span class=\"line\">                    productPrice = customerBean.getProductPrice();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"It can't find this data type: &#123;&#125;\"</span>, customerBean.getDataType());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        writeResult(context, customers, productName, productPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addCustomer</span><span class=\"params\">(List&lt;CustomerBean&gt; customers, CustomerBean customer)</span></span>&#123;</span><br><span class=\"line\">        CustomerBean temp = <span class=\"keyword\">new</span> CustomerBean();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            BeanUtils.copyProperties(temp, customer);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        customers.add(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeResult</span><span class=\"params\">(Context context, List&lt;CustomerBean&gt; customers, String productName, <span class=\"keyword\">double</span> productPrice)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(customers.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;String&gt; customerIds = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(CustomerBean customer:customers)&#123;</span><br><span class=\"line\">            customer.setProductName(productName);</span><br><span class=\"line\">            customer.setProductPrice(productPrice);</span><br><span class=\"line\">            customerIds.add(customer.getCustomerId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.outputKey.set(productName + REGEX_COLS_SPLIT_SYMBOL + productPrice);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.outputValue.set(Joiner.on(REGEX_DATA_JOIN_SPLIT_SYMBOL).join(customerIds));</span><br><span class=\"line\">        context.write(<span class=\"keyword\">this</span>.outputKey, <span class=\"keyword\">this</span>.outputValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>到最後一個步驟了，包裝成hadoop任務(job)，yarn可以根據此設定進行執行<br>當job送出時會也會包含Configuration的xml設定一起送出<br>這裡我將Job多包裝一層，比較方便閱讀和使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class=\"line\">    Configuration conf = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">    String[] otherArgs = <span class=\"keyword\">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(otherArgs.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Usage: \"</span> + JOB_NAME + <span class=\"string\">\" &lt;in&gt; &lt;out&gt;\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Job job = <span class=\"keyword\">new</span> HadoopJob(conf, JOB_NAME)</span><br><span class=\"line\">            .mapReduce(BuyPhoneJob.class, BuyPhoneMapper.class, BuyPhoneReducer.class)</span><br><span class=\"line\">            .mapKeyValue(Text.class, CustomerBean.class)</span><br><span class=\"line\">            .reducerKeyValue(Text.class, Text.class)</span><br><span class=\"line\">            .getJob();</span><br><span class=\"line\">    </span><br><span class=\"line\">    FileInputFormat.setInputPaths(job, <span class=\"keyword\">new</span> Path(otherArgs[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    FileOutputFormat.setOutputPath(job, <span class=\"keyword\">new</span> Path(otherArgs[<span class=\"number\">1</span>]));</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.exit(job.waitForCompletion(<span class=\"keyword\">true</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/hadoop-writable-004.png\" width=\"300px\" height=\"15%\" alt=\"img4\"></p>\n<p>將產品資料寫入到hdfs<br><img src=\"/images/hadoop-writable-005.png\" width=\"50%\" height=\"50%\" alt=\"img5\"></p>\n<p><img src=\"/images/hadoop-writable-006.png\" width=\"50%\" height=\"50%\" alt=\"img6\"></p>\n<p>執行job</p>\n<p><img src=\"/images/hadoop-writable-007.png\" width=\"50%\" height=\"50%\" alt=\"img7\"></p>\n<p>執行完成</p>\n<p><img src=\"/images/hadoop-writable-008.png\" width=\"50%\" height=\"50%\" alt=\"img8\"></p>\n<p>查看結果</p>\n<p><img src=\"/images/hadoop-writable-009.png\" width=\"50%\" height=\"50%\" alt=\"img9\"></p>\n"},{"title":"Java Unit Test 使用 Mockito + Powermock (1)","date":"2020-04-25T05:24:29.000Z","_content":"\n目前開發的產品很重視 Unit Test ，需要根據使用情境和 source code 本身寫測試\n且 Unit Test coverage 都可達到 95% ~ 100%\n\n在寫一段時間的測試後，也有了紀錄一下測試心得的想法\n當然測試的方式和組合也百百種，不可能一下子就講齊\n這裡會使用簡單的測試案例來說明怎麼寫測試\n\n第一個測試案例是 web controller\n因為網路的興起，大部分寫 Java 都會使用 spring 搭配 MVC 架構來進行開發\n對於測試來說，最麻煩的就是需要與資料庫或底層資料互動\n依據資料庫回傳的結果進行不同的行為或流程\n幸運的是，資料庫通常都會將其抽為 dao 層\n在進行測試時，我們只需要針對 dao 的 input 和 output 進行 mock 做不同行為綁定\n\n由於 mock 可以設定特定的行為，設定當 dao 輸入哪些參數時， dao 要回傳什麼資料\n讓整個過程中不會使用到 dao 真實行為，而是使用 mock 設計好的行為\n這樣可以隨意操控 dao ，讓它回傳或者拋出測試時所需的資料或異常\n進而達成我們針對 web controller 不同情境下測試的目的\n\n建立一個 web dao 來使用 id 取得資料，因為沒有真正實作細節，所以直接拋出自定義的 database exception\n```java\npublic class WebDao {\n\n    public Optional<Data> findDataById(int id) throws DatabaseException {\n        throw new DatabaseException();\n    }\n}\n\n```\nexception 預設訊息為無法連線資料庫\n```java\npublic class DatabaseException extends Exception {\n    private static final String UNABLE_CONN_DB_EXCEPTION = \"Unable to connect to database.\";\n    \n    public DatabaseException() {\n        super(UNABLE_CONN_DB_EXCEPTION);\n    }\n}\n```\ndata bean 格式\n```java\npublic class Data {\n    private int id;\n    private String col1;\n    private String col2;\n    ...\n}\n\n```\n---\nweb controller 中定義 web dao ，因為沒有要真的使用 web dao\n所以沒有引入 spring 針對 web dao 綁定 @autowired 做注入\n\n當前只有一個 `read(...)` 根據 request 傳入 data id 後透過 dao 取得結果\n```java\npublic class WebController {\n    private final Gson GSON = new Gson();\n    private WebDao webDao;\n    \n    public String read(HttpServletRequest request){\n        int id = Integer.parseInt(request.getParameter(\"id\"));\n        Optional<Data> data;\n        try {\n            data = webDao.findDataById(id);\n        } catch (DatabaseException e) {\n            return e.getMessage();\n        }\n        if(data.isEmpty()){\n            return \"not find data by id: \" + id;\n        }\n        return GSON.toJson(data.get());\n    }\n}\n```\n簡單分析這個 `read(...)` 可以知道執行過程中可能有 3 種情況發生\n1. 正常從 dao 取得 data 後回傳結果 ( 執行到 16 行 )\n2. 從 dao 取到的 data 結果為空，回傳錯誤訊息 ( 執行到 14 行 )\n3. 資料庫拋出異常，回傳錯誤訊息 ( 執行到 11 行 )\n\n而我們需要針對這 3 種不同的情境進行測試，確保每個情境最終結果與我們預測的一樣\n\n---\n開始寫測試\nMockito 有幾種掛載方式，如果只是簡單的測試，我個人是習慣直接使用 ＠RunWith 設定 runner\n這裡需要注意的是 `setup()` 這裡指定要 mock 的對象主要有兩個， `request` 和 `webDao`\n`request` 模擬 `read(...)` 的入參，因為我們不希望真的產生 `HttpServletRequest`\n`webDao` 模擬實際的 dao ，因為我們不會實際對資料庫做連線\n最後 instance `webController` 以便進行後續的測試操作\n\n此時有一個問題， `webController` 要使用 `webDao` 需要將它注入到 `webController`\n但是我們並沒有對外開放 set method 用於注入 `webDao`\n\n這種情況在實際開發過程中常常會遇到，我們不可能為了測試方便特別修改 source code\n此時需要一些特別的手段突破注入的次元壁，而 Powermock 可以透過侵入式的方式強行進行注入，進而解決我們的問題\n\n這裡採用 Powermock 的 `Whitebox.setInternalState(Object object, Class<?> fieldType, Object value)`\n第一個參數是注入目標對象，後面兩個參數是要注入的類型與其資料\n```java\n@RunWith(MockitoJUnitRunner.class)\npublic class WebControllerTest {\n    private final Gson GSON = new Gson();\n\n    private HttpServletRequest request;\n    private WebDao webDao;\n    private WebController webController;\n    \n    @Before\n    public void setup() {\n        this.request = mock(HttpServletRequest.class);\n        this.webDao = mock(WebDao.class);\n        \n        this.webController = new WebController();\n        // use powermock to mock private field\n        Whitebox.setInternalState(this.webController, WebDao.class, this.webDao);\n    }\n    ...\n}\n```\n關於 Powermock 的使用會在之後的文章慢慢補齊，此案例只用到 `Whitebox`\n現階段主要還是會以情境搭需求使用，需要用到 Powermock 時才會說明\n\n---\n\n第一個測試案例\n正常取得資料的情況\n\n測試名稱採用 Should_ExpectedBehavior_When_StateUnderTest 的命名方式\n這是網路上建議測試時採用的命名規則之一，有興趣的可以 google 一下其他測試命名規則\n\n這個命名規則的好處是測試名稱即情境，在多人合作下可以清楚知道同事主要是針對哪個情況去測試，不用深入去看 source code\n```java\n@Test\npublic void Should_ReturnData_When_GetDataById() throws DatabaseException {\n    final int ID = 1;\n    final String COL1 = \"col1\";\n    final String COL2 = \"col2\";\n    \n    // given\n    Optional<Data> data = Optional.of(new Data(ID, COL1, COL2));\n        \n    when(this.request.getParameter(\"id\")).thenReturn(\"1\");\n    when(this.webDao.findDataById(anyInt())).thenReturn(data);\n    \n    // when\n    String response = this.webController.read(this.request);\n    \n    // then\n    try{\n        Data result = this.GSON.fromJson(response, Data.class);\n        \n        verify(this.webDao, times(1)).findDataById(anyInt());\n        assertThat(result.getId(), is(ID));\n        assertThat(result.getCol1(), is(COL1));\n        assertThat(result.getCol2(), is(COL2));\n    } catch (JsonSyntaxException e){\n        fail(\"parser response data fail.\");\n    }\n}\n\n```\n第 10 行和 11 行，針對 `read(...)` 執行過程中會用到行為做設置\n這裡設定當觸發 `request.getParameter(\"id\")` 這個行為需要回傳字串\"1\"\n當觸發 `webDao.findDataById(anyInt())` 這個行為時回傳第 8 行我們設置的假資料\n這裡可能會有疑問是為什麼 id 回傳是設置字串\"1\"而不是 anyString()\n這是因為我們在執行 `read(...)` 過程中會針對 id 轉為 integer ，避免傳入非整數的字串造成問題\n而 `webDao.findDataById(anyInt())` 則沒這個問題，我們不在意傳入當 id 的 int 數值是什麼\n最終都會傳回我們自己設置的假資料\n\n第 20 行驗證 `webDao.findDataById(...)` 有被呼叫過一次，確保目標 method 有被正常執行到\n第 21 ~ 23 行，檢查回傳的資料結構與數值與我們預計的相符合\n第 25 行可以針對資料結構異常時，告知我們測試失敗，否則當轉換失敗會無法執行到 20 ~ 23 行做資料驗證，導致測試案例成功的異常問題\n\n---\n第二個測試案例\n測試資料庫拋出異常時，回傳對映的異常訊息與我們預計的是否相符合\n```java\n@Test\npublic void Should_Fail_When_UnableConnDatabase() throws DatabaseException {\n    final String EXPECT_EXCEPTION_MSG = \"Unable to connect to database.\";\n    \n    // given\n    DatabaseException exception = new DatabaseException();\n    \n    when(this.request.getParameter(\"id\")).thenReturn(\"1\");\n    when(this.webDao.findDataById(anyInt())).thenThrow(exception);\n    \n    // when\n    String response = this.webController.read(this.request);\n    \n    // then\n    verify(this.webDao, times(1)).findDataById(anyInt());\n    assertThat(response, is(EXPECT_EXCEPTION_MSG));\n}\n```\n第 9 行拋出我們第 6 行設置的異常\n第 12 行 response 的資料會是異常訊息\n第 16 行驗證錯誤訊息與我們預計的相符合\n\n---\n第三個測試案例\n測試當使用 id 查詢沒有取得資料時，回傳對映的異常訊息與我們預計的是否相符合\n```java\n@Test\npublic void Should_Fail_When_NotFindData() throws DatabaseException {\n    final String EXPECT_EXCEPTION_MSG = \"not find data by id\";\n    \n    // given\n    Optional<Data> data = Optional.empty();\n    \n    when(this.request.getParameter(\"id\")).thenReturn(\"1\");\n    when(this.webDao.findDataById(anyInt())).thenReturn(data);\n    \n    // when\n    String response = this.webController.read(this.request);\n    \n    // then\n    assertThat(response, anything(EXPECT_EXCEPTION_MSG));\n}\n```\n第 9 行回傳資料提換為我們第 6 行設置的空資料\n第 12 行 response 的資料會是找不到 data 的異常訊息\n第 15 行驗證錯誤訊息與我們預計的相符合\n\n---\n\n執行結果\n<img src=\"/images/java-unit-test-mockito-powermock-1-001.png\" width=\"100%\" height=\"100%\" alt=\"img1\"/>\n3 個測試都通過，與預計的結果相符合\n\n<img src=\"/images/java-unit-test-mockito-powermock-1-002.png\" width=\"100%\" height=\"100%\" alt=\"img2\"/>\nweb controller unit test coverage 100%\n\n關於 Java Unit Test 的測試案例解說，暫時告一段落\n有空再補齊其他測試案例\n\n詳情可參考我的 github source code:\nhttps://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test\n","source":"_posts/Java-Unit-Test-使用-Mockito-Powermock-1.md","raw":"---\ntitle: Java Unit Test 使用 Mockito + Powermock (1)\ndate: 2020-04-25 13:24:29\ntags:\n- unit test\n---\n\n目前開發的產品很重視 Unit Test ，需要根據使用情境和 source code 本身寫測試\n且 Unit Test coverage 都可達到 95% ~ 100%\n\n在寫一段時間的測試後，也有了紀錄一下測試心得的想法\n當然測試的方式和組合也百百種，不可能一下子就講齊\n這裡會使用簡單的測試案例來說明怎麼寫測試\n\n第一個測試案例是 web controller\n因為網路的興起，大部分寫 Java 都會使用 spring 搭配 MVC 架構來進行開發\n對於測試來說，最麻煩的就是需要與資料庫或底層資料互動\n依據資料庫回傳的結果進行不同的行為或流程\n幸運的是，資料庫通常都會將其抽為 dao 層\n在進行測試時，我們只需要針對 dao 的 input 和 output 進行 mock 做不同行為綁定\n\n由於 mock 可以設定特定的行為，設定當 dao 輸入哪些參數時， dao 要回傳什麼資料\n讓整個過程中不會使用到 dao 真實行為，而是使用 mock 設計好的行為\n這樣可以隨意操控 dao ，讓它回傳或者拋出測試時所需的資料或異常\n進而達成我們針對 web controller 不同情境下測試的目的\n\n建立一個 web dao 來使用 id 取得資料，因為沒有真正實作細節，所以直接拋出自定義的 database exception\n```java\npublic class WebDao {\n\n    public Optional<Data> findDataById(int id) throws DatabaseException {\n        throw new DatabaseException();\n    }\n}\n\n```\nexception 預設訊息為無法連線資料庫\n```java\npublic class DatabaseException extends Exception {\n    private static final String UNABLE_CONN_DB_EXCEPTION = \"Unable to connect to database.\";\n    \n    public DatabaseException() {\n        super(UNABLE_CONN_DB_EXCEPTION);\n    }\n}\n```\ndata bean 格式\n```java\npublic class Data {\n    private int id;\n    private String col1;\n    private String col2;\n    ...\n}\n\n```\n---\nweb controller 中定義 web dao ，因為沒有要真的使用 web dao\n所以沒有引入 spring 針對 web dao 綁定 @autowired 做注入\n\n當前只有一個 `read(...)` 根據 request 傳入 data id 後透過 dao 取得結果\n```java\npublic class WebController {\n    private final Gson GSON = new Gson();\n    private WebDao webDao;\n    \n    public String read(HttpServletRequest request){\n        int id = Integer.parseInt(request.getParameter(\"id\"));\n        Optional<Data> data;\n        try {\n            data = webDao.findDataById(id);\n        } catch (DatabaseException e) {\n            return e.getMessage();\n        }\n        if(data.isEmpty()){\n            return \"not find data by id: \" + id;\n        }\n        return GSON.toJson(data.get());\n    }\n}\n```\n簡單分析這個 `read(...)` 可以知道執行過程中可能有 3 種情況發生\n1. 正常從 dao 取得 data 後回傳結果 ( 執行到 16 行 )\n2. 從 dao 取到的 data 結果為空，回傳錯誤訊息 ( 執行到 14 行 )\n3. 資料庫拋出異常，回傳錯誤訊息 ( 執行到 11 行 )\n\n而我們需要針對這 3 種不同的情境進行測試，確保每個情境最終結果與我們預測的一樣\n\n---\n開始寫測試\nMockito 有幾種掛載方式，如果只是簡單的測試，我個人是習慣直接使用 ＠RunWith 設定 runner\n這裡需要注意的是 `setup()` 這裡指定要 mock 的對象主要有兩個， `request` 和 `webDao`\n`request` 模擬 `read(...)` 的入參，因為我們不希望真的產生 `HttpServletRequest`\n`webDao` 模擬實際的 dao ，因為我們不會實際對資料庫做連線\n最後 instance `webController` 以便進行後續的測試操作\n\n此時有一個問題， `webController` 要使用 `webDao` 需要將它注入到 `webController`\n但是我們並沒有對外開放 set method 用於注入 `webDao`\n\n這種情況在實際開發過程中常常會遇到，我們不可能為了測試方便特別修改 source code\n此時需要一些特別的手段突破注入的次元壁，而 Powermock 可以透過侵入式的方式強行進行注入，進而解決我們的問題\n\n這裡採用 Powermock 的 `Whitebox.setInternalState(Object object, Class<?> fieldType, Object value)`\n第一個參數是注入目標對象，後面兩個參數是要注入的類型與其資料\n```java\n@RunWith(MockitoJUnitRunner.class)\npublic class WebControllerTest {\n    private final Gson GSON = new Gson();\n\n    private HttpServletRequest request;\n    private WebDao webDao;\n    private WebController webController;\n    \n    @Before\n    public void setup() {\n        this.request = mock(HttpServletRequest.class);\n        this.webDao = mock(WebDao.class);\n        \n        this.webController = new WebController();\n        // use powermock to mock private field\n        Whitebox.setInternalState(this.webController, WebDao.class, this.webDao);\n    }\n    ...\n}\n```\n關於 Powermock 的使用會在之後的文章慢慢補齊，此案例只用到 `Whitebox`\n現階段主要還是會以情境搭需求使用，需要用到 Powermock 時才會說明\n\n---\n\n第一個測試案例\n正常取得資料的情況\n\n測試名稱採用 Should_ExpectedBehavior_When_StateUnderTest 的命名方式\n這是網路上建議測試時採用的命名規則之一，有興趣的可以 google 一下其他測試命名規則\n\n這個命名規則的好處是測試名稱即情境，在多人合作下可以清楚知道同事主要是針對哪個情況去測試，不用深入去看 source code\n```java\n@Test\npublic void Should_ReturnData_When_GetDataById() throws DatabaseException {\n    final int ID = 1;\n    final String COL1 = \"col1\";\n    final String COL2 = \"col2\";\n    \n    // given\n    Optional<Data> data = Optional.of(new Data(ID, COL1, COL2));\n        \n    when(this.request.getParameter(\"id\")).thenReturn(\"1\");\n    when(this.webDao.findDataById(anyInt())).thenReturn(data);\n    \n    // when\n    String response = this.webController.read(this.request);\n    \n    // then\n    try{\n        Data result = this.GSON.fromJson(response, Data.class);\n        \n        verify(this.webDao, times(1)).findDataById(anyInt());\n        assertThat(result.getId(), is(ID));\n        assertThat(result.getCol1(), is(COL1));\n        assertThat(result.getCol2(), is(COL2));\n    } catch (JsonSyntaxException e){\n        fail(\"parser response data fail.\");\n    }\n}\n\n```\n第 10 行和 11 行，針對 `read(...)` 執行過程中會用到行為做設置\n這裡設定當觸發 `request.getParameter(\"id\")` 這個行為需要回傳字串\"1\"\n當觸發 `webDao.findDataById(anyInt())` 這個行為時回傳第 8 行我們設置的假資料\n這裡可能會有疑問是為什麼 id 回傳是設置字串\"1\"而不是 anyString()\n這是因為我們在執行 `read(...)` 過程中會針對 id 轉為 integer ，避免傳入非整數的字串造成問題\n而 `webDao.findDataById(anyInt())` 則沒這個問題，我們不在意傳入當 id 的 int 數值是什麼\n最終都會傳回我們自己設置的假資料\n\n第 20 行驗證 `webDao.findDataById(...)` 有被呼叫過一次，確保目標 method 有被正常執行到\n第 21 ~ 23 行，檢查回傳的資料結構與數值與我們預計的相符合\n第 25 行可以針對資料結構異常時，告知我們測試失敗，否則當轉換失敗會無法執行到 20 ~ 23 行做資料驗證，導致測試案例成功的異常問題\n\n---\n第二個測試案例\n測試資料庫拋出異常時，回傳對映的異常訊息與我們預計的是否相符合\n```java\n@Test\npublic void Should_Fail_When_UnableConnDatabase() throws DatabaseException {\n    final String EXPECT_EXCEPTION_MSG = \"Unable to connect to database.\";\n    \n    // given\n    DatabaseException exception = new DatabaseException();\n    \n    when(this.request.getParameter(\"id\")).thenReturn(\"1\");\n    when(this.webDao.findDataById(anyInt())).thenThrow(exception);\n    \n    // when\n    String response = this.webController.read(this.request);\n    \n    // then\n    verify(this.webDao, times(1)).findDataById(anyInt());\n    assertThat(response, is(EXPECT_EXCEPTION_MSG));\n}\n```\n第 9 行拋出我們第 6 行設置的異常\n第 12 行 response 的資料會是異常訊息\n第 16 行驗證錯誤訊息與我們預計的相符合\n\n---\n第三個測試案例\n測試當使用 id 查詢沒有取得資料時，回傳對映的異常訊息與我們預計的是否相符合\n```java\n@Test\npublic void Should_Fail_When_NotFindData() throws DatabaseException {\n    final String EXPECT_EXCEPTION_MSG = \"not find data by id\";\n    \n    // given\n    Optional<Data> data = Optional.empty();\n    \n    when(this.request.getParameter(\"id\")).thenReturn(\"1\");\n    when(this.webDao.findDataById(anyInt())).thenReturn(data);\n    \n    // when\n    String response = this.webController.read(this.request);\n    \n    // then\n    assertThat(response, anything(EXPECT_EXCEPTION_MSG));\n}\n```\n第 9 行回傳資料提換為我們第 6 行設置的空資料\n第 12 行 response 的資料會是找不到 data 的異常訊息\n第 15 行驗證錯誤訊息與我們預計的相符合\n\n---\n\n執行結果\n<img src=\"/images/java-unit-test-mockito-powermock-1-001.png\" width=\"100%\" height=\"100%\" alt=\"img1\"/>\n3 個測試都通過，與預計的結果相符合\n\n<img src=\"/images/java-unit-test-mockito-powermock-1-002.png\" width=\"100%\" height=\"100%\" alt=\"img2\"/>\nweb controller unit test coverage 100%\n\n關於 Java Unit Test 的測試案例解說，暫時告一段落\n有空再補齊其他測試案例\n\n詳情可參考我的 github source code:\nhttps://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test\n","slug":"Java-Unit-Test-使用-Mockito-Powermock-1","published":1,"updated":"2020-04-27T14:13:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr6600340rpjkkpfsc4v","content":"<p>目前開發的產品很重視 Unit Test ，需要根據使用情境和 source code 本身寫測試<br>且 Unit Test coverage 都可達到 95% ~ 100%</p>\n<p>在寫一段時間的測試後，也有了紀錄一下測試心得的想法<br>當然測試的方式和組合也百百種，不可能一下子就講齊<br>這裡會使用簡單的測試案例來說明怎麼寫測試</p>\n<p>第一個測試案例是 web controller<br>因為網路的興起，大部分寫 Java 都會使用 spring 搭配 MVC 架構來進行開發<br>對於測試來說，最麻煩的就是需要與資料庫或底層資料互動<br>依據資料庫回傳的結果進行不同的行為或流程<br>幸運的是，資料庫通常都會將其抽為 dao 層<br>在進行測試時，我們只需要針對 dao 的 input 和 output 進行 mock 做不同行為綁定</p>\n<p>由於 mock 可以設定特定的行為，設定當 dao 輸入哪些參數時， dao 要回傳什麼資料<br>讓整個過程中不會使用到 dao 真實行為，而是使用 mock 設計好的行為<br>這樣可以隨意操控 dao ，讓它回傳或者拋出測試時所需的資料或異常<br>進而達成我們針對 web controller 不同情境下測試的目的</p>\n<p>建立一個 web dao 來使用 id 取得資料，因為沒有真正實作細節，所以直接拋出自定義的 database exception<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Optional&lt;Data&gt; <span class=\"title\">findDataById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DatabaseException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>exception 預設訊息為無法連線資料庫<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DatabaseException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String UNABLE_CONN_DB_EXCEPTION = <span class=\"string\">\"Unable to connect to database.\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DatabaseException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(UNABLE_CONN_DB_EXCEPTION);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>data bean 格式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String col1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String col2;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>web controller 中定義 web dao ，因為沒有要真的使用 web dao<br>所以沒有引入 spring 針對 web dao 綁定 @autowired 做注入</p>\n<p>當前只有一個 <code>read(...)</code> 根據 request 傳入 data id 後透過 dao 取得結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Gson GSON = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebDao webDao;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">read</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(request.getParameter(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">        Optional&lt;Data&gt; data;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            data = webDao.findDataById(id);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DatabaseException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"not find data by id: \"</span> + id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GSON.toJson(data.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>簡單分析這個 <code>read(...)</code> 可以知道執行過程中可能有 3 種情況發生</p>\n<ol>\n<li>正常從 dao 取得 data 後回傳結果 ( 執行到 16 行 )</li>\n<li>從 dao 取到的 data 結果為空，回傳錯誤訊息 ( 執行到 14 行 )</li>\n<li>資料庫拋出異常，回傳錯誤訊息 ( 執行到 11 行 )</li>\n</ol>\n<p>而我們需要針對這 3 種不同的情境進行測試，確保每個情境最終結果與我們預測的一樣</p>\n<hr>\n<p>開始寫測試<br>Mockito 有幾種掛載方式，如果只是簡單的測試，我個人是習慣直接使用 ＠RunWith 設定 runner<br>這裡需要注意的是 <code>setup()</code> 這裡指定要 mock 的對象主要有兩個， <code>request</code> 和 <code>webDao</code><br><code>request</code> 模擬 <code>read(...)</code> 的入參，因為我們不希望真的產生 <code>HttpServletRequest</code><br><code>webDao</code> 模擬實際的 dao ，因為我們不會實際對資料庫做連線<br>最後 instance <code>webController</code> 以便進行後續的測試操作</p>\n<p>此時有一個問題， <code>webController</code> 要使用 <code>webDao</code> 需要將它注入到 <code>webController</code><br>但是我們並沒有對外開放 set method 用於注入 <code>webDao</code></p>\n<p>這種情況在實際開發過程中常常會遇到，我們不可能為了測試方便特別修改 source code<br>此時需要一些特別的手段突破注入的次元壁，而 Powermock 可以透過侵入式的方式強行進行注入，進而解決我們的問題</p>\n<p>這裡採用 Powermock 的 <code>Whitebox.setInternalState(Object object, Class&lt;?&gt; fieldType, Object value)</code><br>第一個參數是注入目標對象，後面兩個參數是要注入的類型與其資料<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(MockitoJUnitRunner.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebControllerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Gson GSON = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServletRequest request;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebDao webDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebController webController;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = mock(HttpServletRequest.class);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.webDao = mock(WebDao.class);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.webController = <span class=\"keyword\">new</span> WebController();</span><br><span class=\"line\">        <span class=\"comment\">// use powermock to mock private field</span></span><br><span class=\"line\">        Whitebox.setInternalState(<span class=\"keyword\">this</span>.webController, WebDao.class, <span class=\"keyword\">this</span>.webDao);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>關於 Powermock 的使用會在之後的文章慢慢補齊，此案例只用到 <code>Whitebox</code><br>現階段主要還是會以情境搭需求使用，需要用到 Powermock 時才會說明</p>\n<hr>\n<p>第一個測試案例<br>正常取得資料的情況</p>\n<p>測試名稱採用 Should_ExpectedBehavior_When_StateUnderTest 的命名方式<br>這是網路上建議測試時採用的命名規則之一，有興趣的可以 google 一下其他測試命名規則</p>\n<p>這個命名規則的好處是測試名稱即情境，在多人合作下可以清楚知道同事主要是針對哪個情況去測試，不用深入去看 source code<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_ReturnData_When_GetDataById</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ID = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String COL1 = <span class=\"string\">\"col1\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String COL2 = <span class=\"string\">\"col2\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Optional&lt;Data&gt; data = Optional.of(<span class=\"keyword\">new</span> Data(ID, COL1, COL2));</span><br><span class=\"line\">        </span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"id\"</span>)).thenReturn(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.webDao.findDataById(anyInt())).thenReturn(data);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    String response = <span class=\"keyword\">this</span>.webController.read(<span class=\"keyword\">this</span>.request);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        Data result = <span class=\"keyword\">this</span>.GSON.fromJson(response, Data.class);</span><br><span class=\"line\">        </span><br><span class=\"line\">        verify(<span class=\"keyword\">this</span>.webDao, times(<span class=\"number\">1</span>)).findDataById(anyInt());</span><br><span class=\"line\">        assertThat(result.getId(), is(ID));</span><br><span class=\"line\">        assertThat(result.getCol1(), is(COL1));</span><br><span class=\"line\">        assertThat(result.getCol2(), is(COL2));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (JsonSyntaxException e)&#123;</span><br><span class=\"line\">        fail(<span class=\"string\">\"parser response data fail.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第 10 行和 11 行，針對 <code>read(...)</code> 執行過程中會用到行為做設置<br>這裡設定當觸發 <code>request.getParameter(&quot;id&quot;)</code> 這個行為需要回傳字串”1”<br>當觸發 <code>webDao.findDataById(anyInt())</code> 這個行為時回傳第 8 行我們設置的假資料<br>這裡可能會有疑問是為什麼 id 回傳是設置字串”1”而不是 anyString()<br>這是因為我們在執行 <code>read(...)</code> 過程中會針對 id 轉為 integer ，避免傳入非整數的字串造成問題<br>而 <code>webDao.findDataById(anyInt())</code> 則沒這個問題，我們不在意傳入當 id 的 int 數值是什麼<br>最終都會傳回我們自己設置的假資料</p>\n<p>第 20 行驗證 <code>webDao.findDataById(...)</code> 有被呼叫過一次，確保目標 method 有被正常執行到<br>第 21 ~ 23 行，檢查回傳的資料結構與數值與我們預計的相符合<br>第 25 行可以針對資料結構異常時，告知我們測試失敗，否則當轉換失敗會無法執行到 20 ~ 23 行做資料驗證，導致測試案例成功的異常問題</p>\n<hr>\n<p>第二個測試案例<br>測試資料庫拋出異常時，回傳對映的異常訊息與我們預計的是否相符合<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_Fail_When_UnableConnDatabase</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String EXPECT_EXCEPTION_MSG = <span class=\"string\">\"Unable to connect to database.\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    DatabaseException exception = <span class=\"keyword\">new</span> DatabaseException();</span><br><span class=\"line\">    </span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"id\"</span>)).thenReturn(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.webDao.findDataById(anyInt())).thenThrow(exception);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    String response = <span class=\"keyword\">this</span>.webController.read(<span class=\"keyword\">this</span>.request);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    verify(<span class=\"keyword\">this</span>.webDao, times(<span class=\"number\">1</span>)).findDataById(anyInt());</span><br><span class=\"line\">    assertThat(response, is(EXPECT_EXCEPTION_MSG));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第 9 行拋出我們第 6 行設置的異常<br>第 12 行 response 的資料會是異常訊息<br>第 16 行驗證錯誤訊息與我們預計的相符合</p>\n<hr>\n<p>第三個測試案例<br>測試當使用 id 查詢沒有取得資料時，回傳對映的異常訊息與我們預計的是否相符合<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_Fail_When_NotFindData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String EXPECT_EXCEPTION_MSG = <span class=\"string\">\"not find data by id\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Optional&lt;Data&gt; data = Optional.empty();</span><br><span class=\"line\">    </span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"id\"</span>)).thenReturn(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.webDao.findDataById(anyInt())).thenReturn(data);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    String response = <span class=\"keyword\">this</span>.webController.read(<span class=\"keyword\">this</span>.request);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    assertThat(response, anything(EXPECT_EXCEPTION_MSG));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第 9 行回傳資料提換為我們第 6 行設置的空資料<br>第 12 行 response 的資料會是找不到 data 的異常訊息<br>第 15 行驗證錯誤訊息與我們預計的相符合</p>\n<hr>\n<p>執行結果<br><img src=\"/images/java-unit-test-mockito-powermock-1-001.png\" width=\"100%\" height=\"100%\" alt=\"img1\"><br>3 個測試都通過，與預計的結果相符合</p>\n<p><img src=\"/images/java-unit-test-mockito-powermock-1-002.png\" width=\"100%\" height=\"100%\" alt=\"img2\"><br>web controller unit test coverage 100%</p>\n<p>關於 Java Unit Test 的測試案例解說，暫時告一段落<br>有空再補齊其他測試案例</p>\n<p>詳情可參考我的 github source code:<br><a href=\"https://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test\" target=\"_blank\" rel=\"noopener\">https://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>目前開發的產品很重視 Unit Test ，需要根據使用情境和 source code 本身寫測試<br>且 Unit Test coverage 都可達到 95% ~ 100%</p>\n<p>在寫一段時間的測試後，也有了紀錄一下測試心得的想法<br>當然測試的方式和組合也百百種，不可能一下子就講齊<br>這裡會使用簡單的測試案例來說明怎麼寫測試</p>\n<p>第一個測試案例是 web controller<br>因為網路的興起，大部分寫 Java 都會使用 spring 搭配 MVC 架構來進行開發<br>對於測試來說，最麻煩的就是需要與資料庫或底層資料互動<br>依據資料庫回傳的結果進行不同的行為或流程<br>幸運的是，資料庫通常都會將其抽為 dao 層<br>在進行測試時，我們只需要針對 dao 的 input 和 output 進行 mock 做不同行為綁定</p>\n<p>由於 mock 可以設定特定的行為，設定當 dao 輸入哪些參數時， dao 要回傳什麼資料<br>讓整個過程中不會使用到 dao 真實行為，而是使用 mock 設計好的行為<br>這樣可以隨意操控 dao ，讓它回傳或者拋出測試時所需的資料或異常<br>進而達成我們針對 web controller 不同情境下測試的目的</p>\n<p>建立一個 web dao 來使用 id 取得資料，因為沒有真正實作細節，所以直接拋出自定義的 database exception<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Optional&lt;Data&gt; <span class=\"title\">findDataById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DatabaseException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>exception 預設訊息為無法連線資料庫<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DatabaseException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String UNABLE_CONN_DB_EXCEPTION = <span class=\"string\">\"Unable to connect to database.\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DatabaseException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(UNABLE_CONN_DB_EXCEPTION);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>data bean 格式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String col1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String col2;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>web controller 中定義 web dao ，因為沒有要真的使用 web dao<br>所以沒有引入 spring 針對 web dao 綁定 @autowired 做注入</p>\n<p>當前只有一個 <code>read(...)</code> 根據 request 傳入 data id 後透過 dao 取得結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Gson GSON = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebDao webDao;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">read</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(request.getParameter(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">        Optional&lt;Data&gt; data;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            data = webDao.findDataById(id);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DatabaseException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"not find data by id: \"</span> + id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GSON.toJson(data.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>簡單分析這個 <code>read(...)</code> 可以知道執行過程中可能有 3 種情況發生</p>\n<ol>\n<li>正常從 dao 取得 data 後回傳結果 ( 執行到 16 行 )</li>\n<li>從 dao 取到的 data 結果為空，回傳錯誤訊息 ( 執行到 14 行 )</li>\n<li>資料庫拋出異常，回傳錯誤訊息 ( 執行到 11 行 )</li>\n</ol>\n<p>而我們需要針對這 3 種不同的情境進行測試，確保每個情境最終結果與我們預測的一樣</p>\n<hr>\n<p>開始寫測試<br>Mockito 有幾種掛載方式，如果只是簡單的測試，我個人是習慣直接使用 ＠RunWith 設定 runner<br>這裡需要注意的是 <code>setup()</code> 這裡指定要 mock 的對象主要有兩個， <code>request</code> 和 <code>webDao</code><br><code>request</code> 模擬 <code>read(...)</code> 的入參，因為我們不希望真的產生 <code>HttpServletRequest</code><br><code>webDao</code> 模擬實際的 dao ，因為我們不會實際對資料庫做連線<br>最後 instance <code>webController</code> 以便進行後續的測試操作</p>\n<p>此時有一個問題， <code>webController</code> 要使用 <code>webDao</code> 需要將它注入到 <code>webController</code><br>但是我們並沒有對外開放 set method 用於注入 <code>webDao</code></p>\n<p>這種情況在實際開發過程中常常會遇到，我們不可能為了測試方便特別修改 source code<br>此時需要一些特別的手段突破注入的次元壁，而 Powermock 可以透過侵入式的方式強行進行注入，進而解決我們的問題</p>\n<p>這裡採用 Powermock 的 <code>Whitebox.setInternalState(Object object, Class&lt;?&gt; fieldType, Object value)</code><br>第一個參數是注入目標對象，後面兩個參數是要注入的類型與其資料<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(MockitoJUnitRunner.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebControllerTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Gson GSON = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServletRequest request;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebDao webDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebController webController;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = mock(HttpServletRequest.class);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.webDao = mock(WebDao.class);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.webController = <span class=\"keyword\">new</span> WebController();</span><br><span class=\"line\">        <span class=\"comment\">// use powermock to mock private field</span></span><br><span class=\"line\">        Whitebox.setInternalState(<span class=\"keyword\">this</span>.webController, WebDao.class, <span class=\"keyword\">this</span>.webDao);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>關於 Powermock 的使用會在之後的文章慢慢補齊，此案例只用到 <code>Whitebox</code><br>現階段主要還是會以情境搭需求使用，需要用到 Powermock 時才會說明</p>\n<hr>\n<p>第一個測試案例<br>正常取得資料的情況</p>\n<p>測試名稱採用 Should_ExpectedBehavior_When_StateUnderTest 的命名方式<br>這是網路上建議測試時採用的命名規則之一，有興趣的可以 google 一下其他測試命名規則</p>\n<p>這個命名規則的好處是測試名稱即情境，在多人合作下可以清楚知道同事主要是針對哪個情況去測試，不用深入去看 source code<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_ReturnData_When_GetDataById</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ID = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String COL1 = <span class=\"string\">\"col1\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String COL2 = <span class=\"string\">\"col2\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Optional&lt;Data&gt; data = Optional.of(<span class=\"keyword\">new</span> Data(ID, COL1, COL2));</span><br><span class=\"line\">        </span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"id\"</span>)).thenReturn(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.webDao.findDataById(anyInt())).thenReturn(data);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    String response = <span class=\"keyword\">this</span>.webController.read(<span class=\"keyword\">this</span>.request);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        Data result = <span class=\"keyword\">this</span>.GSON.fromJson(response, Data.class);</span><br><span class=\"line\">        </span><br><span class=\"line\">        verify(<span class=\"keyword\">this</span>.webDao, times(<span class=\"number\">1</span>)).findDataById(anyInt());</span><br><span class=\"line\">        assertThat(result.getId(), is(ID));</span><br><span class=\"line\">        assertThat(result.getCol1(), is(COL1));</span><br><span class=\"line\">        assertThat(result.getCol2(), is(COL2));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (JsonSyntaxException e)&#123;</span><br><span class=\"line\">        fail(<span class=\"string\">\"parser response data fail.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第 10 行和 11 行，針對 <code>read(...)</code> 執行過程中會用到行為做設置<br>這裡設定當觸發 <code>request.getParameter(&quot;id&quot;)</code> 這個行為需要回傳字串”1”<br>當觸發 <code>webDao.findDataById(anyInt())</code> 這個行為時回傳第 8 行我們設置的假資料<br>這裡可能會有疑問是為什麼 id 回傳是設置字串”1”而不是 anyString()<br>這是因為我們在執行 <code>read(...)</code> 過程中會針對 id 轉為 integer ，避免傳入非整數的字串造成問題<br>而 <code>webDao.findDataById(anyInt())</code> 則沒這個問題，我們不在意傳入當 id 的 int 數值是什麼<br>最終都會傳回我們自己設置的假資料</p>\n<p>第 20 行驗證 <code>webDao.findDataById(...)</code> 有被呼叫過一次，確保目標 method 有被正常執行到<br>第 21 ~ 23 行，檢查回傳的資料結構與數值與我們預計的相符合<br>第 25 行可以針對資料結構異常時，告知我們測試失敗，否則當轉換失敗會無法執行到 20 ~ 23 行做資料驗證，導致測試案例成功的異常問題</p>\n<hr>\n<p>第二個測試案例<br>測試資料庫拋出異常時，回傳對映的異常訊息與我們預計的是否相符合<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_Fail_When_UnableConnDatabase</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String EXPECT_EXCEPTION_MSG = <span class=\"string\">\"Unable to connect to database.\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    DatabaseException exception = <span class=\"keyword\">new</span> DatabaseException();</span><br><span class=\"line\">    </span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"id\"</span>)).thenReturn(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.webDao.findDataById(anyInt())).thenThrow(exception);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    String response = <span class=\"keyword\">this</span>.webController.read(<span class=\"keyword\">this</span>.request);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    verify(<span class=\"keyword\">this</span>.webDao, times(<span class=\"number\">1</span>)).findDataById(anyInt());</span><br><span class=\"line\">    assertThat(response, is(EXPECT_EXCEPTION_MSG));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第 9 行拋出我們第 6 行設置的異常<br>第 12 行 response 的資料會是異常訊息<br>第 16 行驗證錯誤訊息與我們預計的相符合</p>\n<hr>\n<p>第三個測試案例<br>測試當使用 id 查詢沒有取得資料時，回傳對映的異常訊息與我們預計的是否相符合<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Should_Fail_When_NotFindData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> DatabaseException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String EXPECT_EXCEPTION_MSG = <span class=\"string\">\"not find data by id\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// given</span></span><br><span class=\"line\">    Optional&lt;Data&gt; data = Optional.empty();</span><br><span class=\"line\">    </span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.request.getParameter(<span class=\"string\">\"id\"</span>)).thenReturn(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    when(<span class=\"keyword\">this</span>.webDao.findDataById(anyInt())).thenReturn(data);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// when</span></span><br><span class=\"line\">    String response = <span class=\"keyword\">this</span>.webController.read(<span class=\"keyword\">this</span>.request);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">    assertThat(response, anything(EXPECT_EXCEPTION_MSG));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第 9 行回傳資料提換為我們第 6 行設置的空資料<br>第 12 行 response 的資料會是找不到 data 的異常訊息<br>第 15 行驗證錯誤訊息與我們預計的相符合</p>\n<hr>\n<p>執行結果<br><img src=\"/images/java-unit-test-mockito-powermock-1-001.png\" width=\"100%\" height=\"100%\" alt=\"img1\"><br>3 個測試都通過，與預計的結果相符合</p>\n<p><img src=\"/images/java-unit-test-mockito-powermock-1-002.png\" width=\"100%\" height=\"100%\" alt=\"img2\"><br>web controller unit test coverage 100%</p>\n<p>關於 Java Unit Test 的測試案例解說，暫時告一段落<br>有空再補齊其他測試案例</p>\n<p>詳情可參考我的 github source code:<br><a href=\"https://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test\" target=\"_blank\" rel=\"noopener\">https://github.com/HengLin31/java-unit-test/blob/master/src/test/java/pers/henglin/test</a></p>\n"},{"title":"從無到有DIY chart (二)","date":"2018-04-14T14:17:36.000Z","_content":"\n增加曲線效果，點與點之間的線條轉折變得更加柔和，效果如下\n{% raw %}\n<html>\n    <head>\n    \n    </head>\n    <body>\n        <div align=\"center\">\n            <h2>Chart</h2>\n            <div>\n                <canvas id=\"chart\" width=\"300\" height=\"150\"></canvas>\n            </div>\n        </div>\n    </body>\n</html>\n<script language=\"javascript\">\nclass Chart{\n    constructor(params){\n    this._LINE_TENSION = 0.2\n    this._LINE_WIDTH_ORI = 2;\n    this._LINE_WIDTH_FOCUS = 5;\n    this._COLOR_GRAY = 'gray';\n    this._COLOR_WHITE = 'white';\n    \n    this._id = params.id;\n    this._matrix = params.matrix;\n    this._radius = params.radius;\n    this._dataSet = [];\n    this._curveDataSet = [];\n    \n    this._canvas;\n    this._canvasWidth;\n    this._canvasHeight;\n    this._ctx;\n    this._preFocusPoint;\n    \n    this._Coordinate;\n    \n    this._init();\n    }\n\n    _init(){\n        this._canvas = document.getElementById(this._id);\n        if(!this._canvas.getContext){\n            throw \"can't get canvas context!\";\n        }\n        this._canvasWidth = this._canvas.width;\n        this._canvasHeight = this._canvas.height;\n        this._ctx = this._canvas.getContext('2d');\n    \n        this._initCoordinate();\n        this._initDataSet();\n        this._initCurveLines();\n        this._bindMouseEvent();\n        this.draw();\n    }\n    \n    _initCoordinate(){\n        this._Coordinate = new Coordinate({\n            canvas: this._canvas,\n            matrix: this._matrix\n        });\n    }\n\n    _initDataSet(){\n        for(const [index, point] of this._matrix.entries()){\n            var reverseY = this._canvasHeight - point[1];\n            this._dataSet.push({\n                index: index,\n                x: point[0],\n                y: reverseY,\n                color: this._randomColor()\n            });\n        }\n    }\n    \n    _initFrame(){\n        const rect = this._Coordinate.getChartBoundingRect();\n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n        \n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n    }\n    \n    _initLines(){\n        this._ctx.beginPath();\n        const dataLength = this._dataSet.length;\n        if(dataLength < 2) return;\n        if(dataLength == 2){\n            const firstPoint = this._dataSet[0];\n            const secondPoint = this._dataSet[1];\n            this._ctx.moveTo(firstPoint.x, firstPoint.y);\n            this._ctx.lineTo(secondPoint.x, secondPoint.y);\n            this._ctx.stroke();\n            return;\n        }\n        \n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                this._ctx.moveTo(point.x, point.y);\n                continue;\n            }\n            const preControlPoint = this._curveDataSet[index - 1];\n            const controlPoint = this._curveDataSet[index];\n            this._ctx.bezierCurveTo(\n                preControlPoint.next.x, preControlPoint.next.y, \n                controlPoint.pre.x, controlPoint.pre.y, \n                point.x, point.y\n            );            \n        }\n        this._ctx.stroke();\n    }\n    \n    _showControlPoint(){\n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                continue;\n            }\n            const preControlPoint = this._curveDataSet[index - 1];\n            const controlPoint = this._curveDataSet[index];\n            \n            this._drawCircle({x: preControlPoint.next.x, y: preControlPoint.next.y, radius: 2, lineWidth: 1, color: preControlPoint.oriPoint.color});\n            this._drawCircle({x: controlPoint.pre.x,     y: controlPoint.pre.y,     radius: 2, lineWidth: 1, color: controlPoint.oriPoint.color});\n            \n            this._ctx.stroke();\n        }\n    }\n    \n    _initCircles(){\n        const _self = this;\n        this._dataSet.forEach((point) => {\n            _self._drawCircle({\n                x: point.x, \n                y: point.y, \n                radius: _self._radius, \n                lineWidth: _self._LINE_WIDTH_ORI,\n                color: point.color\n            });\n        });\n    }\n    \n    _initCurveLines(){\n        const dataLength = this._dataSet.length;\n        /*\n            less than three points don't need to use curve\n        */\n        if(dataLength <= 2) return;\n        for(let index=1; index<(dataLength-1); index++){\n            const prePoint = this._dataSet[index - 1];\n            const currentPoint = this._dataSet[index];\n            const nextPoint = this._dataSet[index + 1];\n            /*\n                use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale\n            */\n            const deltaX = nextPoint.x - prePoint.x;\n            const deltaY = nextPoint.y - prePoint.y;\n            const distance = this._distance(prePoint, nextPoint);\n            const cos = deltaX / distance;\n            const sin = deltaY / distance;\n            /*\n                calc current point distance between two points pre and next\n            */\n            const preRelativeDistance = this._distance(prePoint, currentPoint);\n            const nextRelativeDistance = this._distance(currentPoint, nextPoint);\n            /*\n                calc actual offset by current point and pre point\n                ps: actual offset = current point - (scale * two point distance * tension)\n            */\n            const preControlPointX = currentPoint.x - (cos * preRelativeDistance * this._LINE_TENSION);\n            const preControlPointY = currentPoint.y - (sin * preRelativeDistance * this._LINE_TENSION);\n            /*\n                calc actual offset by current point and next point\n            */\n            const nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * this._LINE_TENSION);\n            const nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * this._LINE_TENSION);\n            /*\n                \n            */\n            this._curveDataSet.push({\n                oriPoint: currentPoint,\n                pre: {x: preControlPointX, y: preControlPointY}, \n                next: {x: nextControlPointX, y: nextControlPointY},\n            });\n            \n        }\n    \n        const firstPoint = this._dataSet[0];\n        const secondCurvePoint = this._curveDataSet[1];\n        this._curveDataSet.unshift({\n            oriPoint: firstPoint,\n            next: {\n                x: (firstPoint.x + secondCurvePoint.pre.x) / 2,\n                y: (firstPoint.y + secondCurvePoint.pre.y) / 2\n            }\n        });\n        \n        const lastPoint = this._dataSet[dataLength - 1];\n        const secondLastCurvePoint = this._curveDataSet[dataLength - 2];\n        this._curveDataSet.push({\n            oriPoint: lastPoint,\n            pre: {\n                x: (lastPoint.x + secondLastCurvePoint.next.x) / 2, \n                y: (lastPoint.y + secondLastCurvePoint.next.y) / 2\n            }\n        });\n    }\n    \n    _bindMouseEvent(){\n        const _self = this;\n        this._canvas.addEventListener(\"mousemove\", (event) => {\n            const rect = _self._canvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            _self._findNearPointByMouse({x: x, y: y});\n        });\n    }\n    \n    _randomColor(){\n        return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n    \n    _drawRect(params){\n        this._ctx.lineWidth = params.lineWidth;\n        this._ctx.strokeStyle = params.color;\n        this._ctx.beginPath();\n        this._ctx.rect(params.x, params.y, params.width, params.height);\n        this._ctx.stroke();\n    }\n    \n    _drawLine(point1, point2){\n        this._ctx.lineWidth = point2.lineWidth;\n        this._ctx.strokeStyle = point2.color;\n        this._ctx.beginPath();\n        this._ctx.moveTo(point1.x, point1.y);\n        this._ctx.lineTo(point2.x, point2.y);\n        this._ctx.stroke();\n    }\n\n    _drawCircle(point){\n        this._ctx.lineWidth = point.lineWidth;\n        this._ctx.beginPath();\n        this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n        this._ctx.strokeStyle = point.color;\n        this._ctx.fillStyle  = point.color;\n        this._ctx.fill();\n        this._ctx.stroke();\n    }\n    \n    _drawFocusPoint(point){\n        this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n    }\n    \n    _findNearPointByMouse(mousePos){\n        let minDistancePoint;\n        let minDistance = Number.MAX_VALUE;\n        for(var index=0, size= this._dataSet.length; index<size; index++){\n            const currentPos = this._dataSet[index];\n            const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n            \n            if(minDistance > distanceBetweenTwoPoints){\n                minDistancePoint = currentPos;\n                minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n            }\n        }\n        if(!this._preFocusPoint){\n            this._drawFocusPoint(minDistancePoint);\n            this._preFocusPoint = minDistancePoint;\n            return;\n        }\n        /*\n            if pre point isn't self, it's need to render\n        */\n        if(this._preFocusPoint.index !== minDistancePoint.index){\n            this.render();\n            this._drawFocusPoint(minDistancePoint);\n        }\n        this._preFocusPoint = minDistancePoint;\n    }\n    \n    _distance(point1, point2){\n        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n    }\n    \n    _clear(){\n        this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n    }\n    \n    /* public */\n    draw(){\n        this._initFrame();\n        this._initLines();\n        this._initCircles();\n    }\n    \n    render(){\n        this._clear();\n        this.draw();\n        console.log('render');\n    }\n\n    printDataSet(){\n        console.log('dataSet', this._dataSet);\n    }\n}\n\nclass Coordinate{\n    constructor(params){\n        this._LEFT_OFFSET = 20;\n        this._BOTTOM_OFFSET = 20;\n        this._TOP_OFFSET = 10;\n        this._RIGHT_OFFSET = 10;\n        \n        this._canvas = params.canvas;\n        this._oriMatrix = params.matrix;\n        \n        this._chartBoundingRect;\n        this._xAxis;\n        this._yAxis;\n        \n        this._init();\n    }\n    \n    _init(){\n        this._initChartBoundingRect();\n        this._initXAxisAndYAxis();\n    }\n    \n    _initChartBoundingRect(){\n        const oriCanvasRect = this._canvas.getBoundingClientRect();\n        //console.log(oriCanvasRect);\n        this._chartBoundingRect = {\n            left: 0 + this._LEFT_OFFSET,\n            top: 0 + this._TOP_OFFSET,\n            bottom: oriCanvasRect.height - this._BOTTOM_OFFSET,\n            right: oriCanvasRect.width - this._RIGHT_OFFSET,\n            \n            width: oriCanvasRect.width - this._LEFT_OFFSET - this._RIGHT_OFFSET,\n            height: oriCanvasRect.height - this._BOTTOM_OFFSET - this._TOP_OFFSET,\n        }\n        console.log(this._chartBoundingRect);\n    }\n\n    _initXAxisAndYAxis(){\n        let xMax = Number.MIN_VALUE;\n        let xMin = Number.MAX_VALUE;\n        \n        let yMax = Number.MIN_VALUE;\n        let yMin = Number.MAX_VALUE;\n        \n        this._oriMatrix.forEach((point) => {\n            const x = point[0];\n            const y = point[1];\n            \n            xMax = Math.max(xMax, x);\n            xMin = Math.min(xMin, x);\n            \n            yMax = Math.max(yMax, y);\n            yMin = Math.min(yMin, y);\n        });\n        \n        const xNormal = (xMax - xMin);\n        const yNormal = (yMax - yMin);\n    }\n    \n    getChartBoundingRect(){\n        return this._chartBoundingRect;\n    }\n}\n\n(function(global){\n    const canvasId = 'chart';\n    const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];\n    const radius = 4;\n    const chart = new Chart({\n        id: canvasId, \n        matrix: matrix,\n        radius: radius\n    });\n    chart.draw();\n    chart.printDataSet();\n    console.log('chart', chart);\n    console.log(chart._id);\n})(this);\n</script>\n{% endraw %}\n\n主要增加的程式碼如下，參考chart.js繪製曲線的方式，自己試做看看，主要是針對點與點之間距離的計算出bezier curve的control point\n```js\n    for(let index=1; index<(dataLength-1); index++){\n        const prePoint = this._dataSet[index - 1];\n        const currentPoint = this._dataSet[index];\n        const nextPoint = this._dataSet[index + 1];\n        /*\n            use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale\n        */\n        const deltaX = nextPoint.x - prePoint.x;\n        const deltaY = nextPoint.y - prePoint.y;\n        const distance = this._distance(prePoint, nextPoint);\n        const cos = deltaX / distance;\n        const sin = deltaY / distance;\n        /*\n            calc current point distance between two points pre and next\n        */\n        const preRelativeDistance = this._distance(prePoint, currentPoint);\n        const nextRelativeDistance = this._distance(currentPoint, nextPoint);\n        /*\n            calc actual offset by current point and pre point\n            ps: actual offset = current point - (scale * two point distance * tension)\n        */\n        const preControlPointX = currentPoint.x - (cos * preRelativeDistance * this._LINE_TENSION);// _LINE_TENSION = 0.2\n        const preControlPointY = currentPoint.y - (sin * preRelativeDistance * this._LINE_TENSION);\n        /*\n            calc actual offset by current point and next point\n        */\n        const nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * this._LINE_TENSION);\n        const nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * this._LINE_TENSION);\n        \n        this._curveDataSet.push({\n            oriPoint: currentPoint,\n            pre: {x: preControlPointX, y: preControlPointY}, \n            next: {x: nextControlPointX, y: nextControlPointY},\n        });\n    }\n```\n\n使用 bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) 繪製出曲線\n其中cp1x, cp1y 第一個控制點，而cp2x, cp2y 第二個控制點，最後一組參數x, y 為繪製的終點座標\n\n```js\n    for(const [index, point] of this._dataSet.entries()){\n        if(index == 0){\n            this._ctx.moveTo(point.x, point.y);\n            continue;\n        }\n        const preControlPoint = this._curveDataSet[index - 1];\n        const controlPoint = this._curveDataSet[index];\n        this._ctx.bezierCurveTo(\n            preControlPoint.next.x, preControlPoint.next.y, \n            controlPoint.pre.x, controlPoint.pre.y, \n            point.x, point.y\n        );            \n    }\n```\n","source":"_posts/從無到有DIY-chart-二.md","raw":"---\ntitle: 從無到有DIY chart (二)\ndate: 2018-04-14 22:17:36\ntags:\n- js\n---\n\n增加曲線效果，點與點之間的線條轉折變得更加柔和，效果如下\n{% raw %}\n<html>\n    <head>\n    \n    </head>\n    <body>\n        <div align=\"center\">\n            <h2>Chart</h2>\n            <div>\n                <canvas id=\"chart\" width=\"300\" height=\"150\"></canvas>\n            </div>\n        </div>\n    </body>\n</html>\n<script language=\"javascript\">\nclass Chart{\n    constructor(params){\n    this._LINE_TENSION = 0.2\n    this._LINE_WIDTH_ORI = 2;\n    this._LINE_WIDTH_FOCUS = 5;\n    this._COLOR_GRAY = 'gray';\n    this._COLOR_WHITE = 'white';\n    \n    this._id = params.id;\n    this._matrix = params.matrix;\n    this._radius = params.radius;\n    this._dataSet = [];\n    this._curveDataSet = [];\n    \n    this._canvas;\n    this._canvasWidth;\n    this._canvasHeight;\n    this._ctx;\n    this._preFocusPoint;\n    \n    this._Coordinate;\n    \n    this._init();\n    }\n\n    _init(){\n        this._canvas = document.getElementById(this._id);\n        if(!this._canvas.getContext){\n            throw \"can't get canvas context!\";\n        }\n        this._canvasWidth = this._canvas.width;\n        this._canvasHeight = this._canvas.height;\n        this._ctx = this._canvas.getContext('2d');\n    \n        this._initCoordinate();\n        this._initDataSet();\n        this._initCurveLines();\n        this._bindMouseEvent();\n        this.draw();\n    }\n    \n    _initCoordinate(){\n        this._Coordinate = new Coordinate({\n            canvas: this._canvas,\n            matrix: this._matrix\n        });\n    }\n\n    _initDataSet(){\n        for(const [index, point] of this._matrix.entries()){\n            var reverseY = this._canvasHeight - point[1];\n            this._dataSet.push({\n                index: index,\n                x: point[0],\n                y: reverseY,\n                color: this._randomColor()\n            });\n        }\n    }\n    \n    _initFrame(){\n        const rect = this._Coordinate.getChartBoundingRect();\n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n        \n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n    }\n    \n    _initLines(){\n        this._ctx.beginPath();\n        const dataLength = this._dataSet.length;\n        if(dataLength < 2) return;\n        if(dataLength == 2){\n            const firstPoint = this._dataSet[0];\n            const secondPoint = this._dataSet[1];\n            this._ctx.moveTo(firstPoint.x, firstPoint.y);\n            this._ctx.lineTo(secondPoint.x, secondPoint.y);\n            this._ctx.stroke();\n            return;\n        }\n        \n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                this._ctx.moveTo(point.x, point.y);\n                continue;\n            }\n            const preControlPoint = this._curveDataSet[index - 1];\n            const controlPoint = this._curveDataSet[index];\n            this._ctx.bezierCurveTo(\n                preControlPoint.next.x, preControlPoint.next.y, \n                controlPoint.pre.x, controlPoint.pre.y, \n                point.x, point.y\n            );            \n        }\n        this._ctx.stroke();\n    }\n    \n    _showControlPoint(){\n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                continue;\n            }\n            const preControlPoint = this._curveDataSet[index - 1];\n            const controlPoint = this._curveDataSet[index];\n            \n            this._drawCircle({x: preControlPoint.next.x, y: preControlPoint.next.y, radius: 2, lineWidth: 1, color: preControlPoint.oriPoint.color});\n            this._drawCircle({x: controlPoint.pre.x,     y: controlPoint.pre.y,     radius: 2, lineWidth: 1, color: controlPoint.oriPoint.color});\n            \n            this._ctx.stroke();\n        }\n    }\n    \n    _initCircles(){\n        const _self = this;\n        this._dataSet.forEach((point) => {\n            _self._drawCircle({\n                x: point.x, \n                y: point.y, \n                radius: _self._radius, \n                lineWidth: _self._LINE_WIDTH_ORI,\n                color: point.color\n            });\n        });\n    }\n    \n    _initCurveLines(){\n        const dataLength = this._dataSet.length;\n        /*\n            less than three points don't need to use curve\n        */\n        if(dataLength <= 2) return;\n        for(let index=1; index<(dataLength-1); index++){\n            const prePoint = this._dataSet[index - 1];\n            const currentPoint = this._dataSet[index];\n            const nextPoint = this._dataSet[index + 1];\n            /*\n                use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale\n            */\n            const deltaX = nextPoint.x - prePoint.x;\n            const deltaY = nextPoint.y - prePoint.y;\n            const distance = this._distance(prePoint, nextPoint);\n            const cos = deltaX / distance;\n            const sin = deltaY / distance;\n            /*\n                calc current point distance between two points pre and next\n            */\n            const preRelativeDistance = this._distance(prePoint, currentPoint);\n            const nextRelativeDistance = this._distance(currentPoint, nextPoint);\n            /*\n                calc actual offset by current point and pre point\n                ps: actual offset = current point - (scale * two point distance * tension)\n            */\n            const preControlPointX = currentPoint.x - (cos * preRelativeDistance * this._LINE_TENSION);\n            const preControlPointY = currentPoint.y - (sin * preRelativeDistance * this._LINE_TENSION);\n            /*\n                calc actual offset by current point and next point\n            */\n            const nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * this._LINE_TENSION);\n            const nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * this._LINE_TENSION);\n            /*\n                \n            */\n            this._curveDataSet.push({\n                oriPoint: currentPoint,\n                pre: {x: preControlPointX, y: preControlPointY}, \n                next: {x: nextControlPointX, y: nextControlPointY},\n            });\n            \n        }\n    \n        const firstPoint = this._dataSet[0];\n        const secondCurvePoint = this._curveDataSet[1];\n        this._curveDataSet.unshift({\n            oriPoint: firstPoint,\n            next: {\n                x: (firstPoint.x + secondCurvePoint.pre.x) / 2,\n                y: (firstPoint.y + secondCurvePoint.pre.y) / 2\n            }\n        });\n        \n        const lastPoint = this._dataSet[dataLength - 1];\n        const secondLastCurvePoint = this._curveDataSet[dataLength - 2];\n        this._curveDataSet.push({\n            oriPoint: lastPoint,\n            pre: {\n                x: (lastPoint.x + secondLastCurvePoint.next.x) / 2, \n                y: (lastPoint.y + secondLastCurvePoint.next.y) / 2\n            }\n        });\n    }\n    \n    _bindMouseEvent(){\n        const _self = this;\n        this._canvas.addEventListener(\"mousemove\", (event) => {\n            const rect = _self._canvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            _self._findNearPointByMouse({x: x, y: y});\n        });\n    }\n    \n    _randomColor(){\n        return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n    \n    _drawRect(params){\n        this._ctx.lineWidth = params.lineWidth;\n        this._ctx.strokeStyle = params.color;\n        this._ctx.beginPath();\n        this._ctx.rect(params.x, params.y, params.width, params.height);\n        this._ctx.stroke();\n    }\n    \n    _drawLine(point1, point2){\n        this._ctx.lineWidth = point2.lineWidth;\n        this._ctx.strokeStyle = point2.color;\n        this._ctx.beginPath();\n        this._ctx.moveTo(point1.x, point1.y);\n        this._ctx.lineTo(point2.x, point2.y);\n        this._ctx.stroke();\n    }\n\n    _drawCircle(point){\n        this._ctx.lineWidth = point.lineWidth;\n        this._ctx.beginPath();\n        this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n        this._ctx.strokeStyle = point.color;\n        this._ctx.fillStyle  = point.color;\n        this._ctx.fill();\n        this._ctx.stroke();\n    }\n    \n    _drawFocusPoint(point){\n        this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n    }\n    \n    _findNearPointByMouse(mousePos){\n        let minDistancePoint;\n        let minDistance = Number.MAX_VALUE;\n        for(var index=0, size= this._dataSet.length; index<size; index++){\n            const currentPos = this._dataSet[index];\n            const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n            \n            if(minDistance > distanceBetweenTwoPoints){\n                minDistancePoint = currentPos;\n                minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n            }\n        }\n        if(!this._preFocusPoint){\n            this._drawFocusPoint(minDistancePoint);\n            this._preFocusPoint = minDistancePoint;\n            return;\n        }\n        /*\n            if pre point isn't self, it's need to render\n        */\n        if(this._preFocusPoint.index !== minDistancePoint.index){\n            this.render();\n            this._drawFocusPoint(minDistancePoint);\n        }\n        this._preFocusPoint = minDistancePoint;\n    }\n    \n    _distance(point1, point2){\n        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n    }\n    \n    _clear(){\n        this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n    }\n    \n    /* public */\n    draw(){\n        this._initFrame();\n        this._initLines();\n        this._initCircles();\n    }\n    \n    render(){\n        this._clear();\n        this.draw();\n        console.log('render');\n    }\n\n    printDataSet(){\n        console.log('dataSet', this._dataSet);\n    }\n}\n\nclass Coordinate{\n    constructor(params){\n        this._LEFT_OFFSET = 20;\n        this._BOTTOM_OFFSET = 20;\n        this._TOP_OFFSET = 10;\n        this._RIGHT_OFFSET = 10;\n        \n        this._canvas = params.canvas;\n        this._oriMatrix = params.matrix;\n        \n        this._chartBoundingRect;\n        this._xAxis;\n        this._yAxis;\n        \n        this._init();\n    }\n    \n    _init(){\n        this._initChartBoundingRect();\n        this._initXAxisAndYAxis();\n    }\n    \n    _initChartBoundingRect(){\n        const oriCanvasRect = this._canvas.getBoundingClientRect();\n        //console.log(oriCanvasRect);\n        this._chartBoundingRect = {\n            left: 0 + this._LEFT_OFFSET,\n            top: 0 + this._TOP_OFFSET,\n            bottom: oriCanvasRect.height - this._BOTTOM_OFFSET,\n            right: oriCanvasRect.width - this._RIGHT_OFFSET,\n            \n            width: oriCanvasRect.width - this._LEFT_OFFSET - this._RIGHT_OFFSET,\n            height: oriCanvasRect.height - this._BOTTOM_OFFSET - this._TOP_OFFSET,\n        }\n        console.log(this._chartBoundingRect);\n    }\n\n    _initXAxisAndYAxis(){\n        let xMax = Number.MIN_VALUE;\n        let xMin = Number.MAX_VALUE;\n        \n        let yMax = Number.MIN_VALUE;\n        let yMin = Number.MAX_VALUE;\n        \n        this._oriMatrix.forEach((point) => {\n            const x = point[0];\n            const y = point[1];\n            \n            xMax = Math.max(xMax, x);\n            xMin = Math.min(xMin, x);\n            \n            yMax = Math.max(yMax, y);\n            yMin = Math.min(yMin, y);\n        });\n        \n        const xNormal = (xMax - xMin);\n        const yNormal = (yMax - yMin);\n    }\n    \n    getChartBoundingRect(){\n        return this._chartBoundingRect;\n    }\n}\n\n(function(global){\n    const canvasId = 'chart';\n    const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];\n    const radius = 4;\n    const chart = new Chart({\n        id: canvasId, \n        matrix: matrix,\n        radius: radius\n    });\n    chart.draw();\n    chart.printDataSet();\n    console.log('chart', chart);\n    console.log(chart._id);\n})(this);\n</script>\n{% endraw %}\n\n主要增加的程式碼如下，參考chart.js繪製曲線的方式，自己試做看看，主要是針對點與點之間距離的計算出bezier curve的control point\n```js\n    for(let index=1; index<(dataLength-1); index++){\n        const prePoint = this._dataSet[index - 1];\n        const currentPoint = this._dataSet[index];\n        const nextPoint = this._dataSet[index + 1];\n        /*\n            use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale\n        */\n        const deltaX = nextPoint.x - prePoint.x;\n        const deltaY = nextPoint.y - prePoint.y;\n        const distance = this._distance(prePoint, nextPoint);\n        const cos = deltaX / distance;\n        const sin = deltaY / distance;\n        /*\n            calc current point distance between two points pre and next\n        */\n        const preRelativeDistance = this._distance(prePoint, currentPoint);\n        const nextRelativeDistance = this._distance(currentPoint, nextPoint);\n        /*\n            calc actual offset by current point and pre point\n            ps: actual offset = current point - (scale * two point distance * tension)\n        */\n        const preControlPointX = currentPoint.x - (cos * preRelativeDistance * this._LINE_TENSION);// _LINE_TENSION = 0.2\n        const preControlPointY = currentPoint.y - (sin * preRelativeDistance * this._LINE_TENSION);\n        /*\n            calc actual offset by current point and next point\n        */\n        const nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * this._LINE_TENSION);\n        const nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * this._LINE_TENSION);\n        \n        this._curveDataSet.push({\n            oriPoint: currentPoint,\n            pre: {x: preControlPointX, y: preControlPointY}, \n            next: {x: nextControlPointX, y: nextControlPointY},\n        });\n    }\n```\n\n使用 bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) 繪製出曲線\n其中cp1x, cp1y 第一個控制點，而cp2x, cp2y 第二個控制點，最後一組參數x, y 為繪製的終點座標\n\n```js\n    for(const [index, point] of this._dataSet.entries()){\n        if(index == 0){\n            this._ctx.moveTo(point.x, point.y);\n            continue;\n        }\n        const preControlPoint = this._curveDataSet[index - 1];\n        const controlPoint = this._curveDataSet[index];\n        this._ctx.bezierCurveTo(\n            preControlPoint.next.x, preControlPoint.next.y, \n            controlPoint.pre.x, controlPoint.pre.y, \n            point.x, point.y\n        );            \n    }\n```\n","slug":"從無到有DIY-chart-二","published":1,"updated":"2019-10-22T04:18:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr6800360rpj0gxa4em5","content":"<p>增加曲線效果，點與點之間的線條轉折變得更加柔和，效果如下<br>\n<html>\n    <head>\n    \n    </head>\n    <body>\n        <div align=\"center\">\n            <h2>Chart</h2>\n            <div>\n                <canvas id=\"chart\" width=\"300\" height=\"150\"></canvas>\n            </div>\n        </div>\n    </body>\n</html>\n<script language=\"javascript\">\nclass Chart{\n    constructor(params){\n    this._LINE_TENSION = 0.2\n    this._LINE_WIDTH_ORI = 2;\n    this._LINE_WIDTH_FOCUS = 5;\n    this._COLOR_GRAY = 'gray';\n    this._COLOR_WHITE = 'white';\n    \n    this._id = params.id;\n    this._matrix = params.matrix;\n    this._radius = params.radius;\n    this._dataSet = [];\n    this._curveDataSet = [];\n    \n    this._canvas;\n    this._canvasWidth;\n    this._canvasHeight;\n    this._ctx;\n    this._preFocusPoint;\n    \n    this._Coordinate;\n    \n    this._init();\n    }\n\n    _init(){\n        this._canvas = document.getElementById(this._id);\n        if(!this._canvas.getContext){\n            throw \"can't get canvas context!\";\n        }\n        this._canvasWidth = this._canvas.width;\n        this._canvasHeight = this._canvas.height;\n        this._ctx = this._canvas.getContext('2d');\n    \n        this._initCoordinate();\n        this._initDataSet();\n        this._initCurveLines();\n        this._bindMouseEvent();\n        this.draw();\n    }\n    \n    _initCoordinate(){\n        this._Coordinate = new Coordinate({\n            canvas: this._canvas,\n            matrix: this._matrix\n        });\n    }\n\n    _initDataSet(){\n        for(const [index, point] of this._matrix.entries()){\n            var reverseY = this._canvasHeight - point[1];\n            this._dataSet.push({\n                index: index,\n                x: point[0],\n                y: reverseY,\n                color: this._randomColor()\n            });\n        }\n    }\n    \n    _initFrame(){\n        const rect = this._Coordinate.getChartBoundingRect();\n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n        \n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n    }\n    \n    _initLines(){\n        this._ctx.beginPath();\n        const dataLength = this._dataSet.length;\n        if(dataLength < 2) return;\n        if(dataLength == 2){\n            const firstPoint = this._dataSet[0];\n            const secondPoint = this._dataSet[1];\n            this._ctx.moveTo(firstPoint.x, firstPoint.y);\n            this._ctx.lineTo(secondPoint.x, secondPoint.y);\n            this._ctx.stroke();\n            return;\n        }\n        \n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                this._ctx.moveTo(point.x, point.y);\n                continue;\n            }\n            const preControlPoint = this._curveDataSet[index - 1];\n            const controlPoint = this._curveDataSet[index];\n            this._ctx.bezierCurveTo(\n                preControlPoint.next.x, preControlPoint.next.y, \n                controlPoint.pre.x, controlPoint.pre.y, \n                point.x, point.y\n            );            \n        }\n        this._ctx.stroke();\n    }\n    \n    _showControlPoint(){\n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                continue;\n            }\n            const preControlPoint = this._curveDataSet[index - 1];\n            const controlPoint = this._curveDataSet[index];\n            \n            this._drawCircle({x: preControlPoint.next.x, y: preControlPoint.next.y, radius: 2, lineWidth: 1, color: preControlPoint.oriPoint.color});\n            this._drawCircle({x: controlPoint.pre.x,     y: controlPoint.pre.y,     radius: 2, lineWidth: 1, color: controlPoint.oriPoint.color});\n            \n            this._ctx.stroke();\n        }\n    }\n    \n    _initCircles(){\n        const _self = this;\n        this._dataSet.forEach((point) => {\n            _self._drawCircle({\n                x: point.x, \n                y: point.y, \n                radius: _self._radius, \n                lineWidth: _self._LINE_WIDTH_ORI,\n                color: point.color\n            });\n        });\n    }\n    \n    _initCurveLines(){\n        const dataLength = this._dataSet.length;\n        /*\n            less than three points don't need to use curve\n        */\n        if(dataLength <= 2) return;\n        for(let index=1; index<(dataLength-1); index++){\n            const prePoint = this._dataSet[index - 1];\n            const currentPoint = this._dataSet[index];\n            const nextPoint = this._dataSet[index + 1];\n            /*\n                use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale\n            */\n            const deltaX = nextPoint.x - prePoint.x;\n            const deltaY = nextPoint.y - prePoint.y;\n            const distance = this._distance(prePoint, nextPoint);\n            const cos = deltaX / distance;\n            const sin = deltaY / distance;\n            /*\n                calc current point distance between two points pre and next\n            */\n            const preRelativeDistance = this._distance(prePoint, currentPoint);\n            const nextRelativeDistance = this._distance(currentPoint, nextPoint);\n            /*\n                calc actual offset by current point and pre point\n                ps: actual offset = current point - (scale * two point distance * tension)\n            */\n            const preControlPointX = currentPoint.x - (cos * preRelativeDistance * this._LINE_TENSION);\n            const preControlPointY = currentPoint.y - (sin * preRelativeDistance * this._LINE_TENSION);\n            /*\n                calc actual offset by current point and next point\n            */\n            const nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * this._LINE_TENSION);\n            const nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * this._LINE_TENSION);\n            /*\n                \n            */\n            this._curveDataSet.push({\n                oriPoint: currentPoint,\n                pre: {x: preControlPointX, y: preControlPointY}, \n                next: {x: nextControlPointX, y: nextControlPointY},\n            });\n            \n        }\n    \n        const firstPoint = this._dataSet[0];\n        const secondCurvePoint = this._curveDataSet[1];\n        this._curveDataSet.unshift({\n            oriPoint: firstPoint,\n            next: {\n                x: (firstPoint.x + secondCurvePoint.pre.x) / 2,\n                y: (firstPoint.y + secondCurvePoint.pre.y) / 2\n            }\n        });\n        \n        const lastPoint = this._dataSet[dataLength - 1];\n        const secondLastCurvePoint = this._curveDataSet[dataLength - 2];\n        this._curveDataSet.push({\n            oriPoint: lastPoint,\n            pre: {\n                x: (lastPoint.x + secondLastCurvePoint.next.x) / 2, \n                y: (lastPoint.y + secondLastCurvePoint.next.y) / 2\n            }\n        });\n    }\n    \n    _bindMouseEvent(){\n        const _self = this;\n        this._canvas.addEventListener(\"mousemove\", (event) => {\n            const rect = _self._canvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            _self._findNearPointByMouse({x: x, y: y});\n        });\n    }\n    \n    _randomColor(){\n        return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n    \n    _drawRect(params){\n        this._ctx.lineWidth = params.lineWidth;\n        this._ctx.strokeStyle = params.color;\n        this._ctx.beginPath();\n        this._ctx.rect(params.x, params.y, params.width, params.height);\n        this._ctx.stroke();\n    }\n    \n    _drawLine(point1, point2){\n        this._ctx.lineWidth = point2.lineWidth;\n        this._ctx.strokeStyle = point2.color;\n        this._ctx.beginPath();\n        this._ctx.moveTo(point1.x, point1.y);\n        this._ctx.lineTo(point2.x, point2.y);\n        this._ctx.stroke();\n    }\n\n    _drawCircle(point){\n        this._ctx.lineWidth = point.lineWidth;\n        this._ctx.beginPath();\n        this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n        this._ctx.strokeStyle = point.color;\n        this._ctx.fillStyle  = point.color;\n        this._ctx.fill();\n        this._ctx.stroke();\n    }\n    \n    _drawFocusPoint(point){\n        this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n    }\n    \n    _findNearPointByMouse(mousePos){\n        let minDistancePoint;\n        let minDistance = Number.MAX_VALUE;\n        for(var index=0, size= this._dataSet.length; index<size; index++){\n            const currentPos = this._dataSet[index];\n            const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n            \n            if(minDistance > distanceBetweenTwoPoints){\n                minDistancePoint = currentPos;\n                minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n            }\n        }\n        if(!this._preFocusPoint){\n            this._drawFocusPoint(minDistancePoint);\n            this._preFocusPoint = minDistancePoint;\n            return;\n        }\n        /*\n            if pre point isn't self, it's need to render\n        */\n        if(this._preFocusPoint.index !== minDistancePoint.index){\n            this.render();\n            this._drawFocusPoint(minDistancePoint);\n        }\n        this._preFocusPoint = minDistancePoint;\n    }\n    \n    _distance(point1, point2){\n        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n    }\n    \n    _clear(){\n        this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n    }\n    \n    /* public */\n    draw(){\n        this._initFrame();\n        this._initLines();\n        this._initCircles();\n    }\n    \n    render(){\n        this._clear();\n        this.draw();\n        console.log('render');\n    }\n\n    printDataSet(){\n        console.log('dataSet', this._dataSet);\n    }\n}\n\nclass Coordinate{\n    constructor(params){\n        this._LEFT_OFFSET = 20;\n        this._BOTTOM_OFFSET = 20;\n        this._TOP_OFFSET = 10;\n        this._RIGHT_OFFSET = 10;\n        \n        this._canvas = params.canvas;\n        this._oriMatrix = params.matrix;\n        \n        this._chartBoundingRect;\n        this._xAxis;\n        this._yAxis;\n        \n        this._init();\n    }\n    \n    _init(){\n        this._initChartBoundingRect();\n        this._initXAxisAndYAxis();\n    }\n    \n    _initChartBoundingRect(){\n        const oriCanvasRect = this._canvas.getBoundingClientRect();\n        //console.log(oriCanvasRect);\n        this._chartBoundingRect = {\n            left: 0 + this._LEFT_OFFSET,\n            top: 0 + this._TOP_OFFSET,\n            bottom: oriCanvasRect.height - this._BOTTOM_OFFSET,\n            right: oriCanvasRect.width - this._RIGHT_OFFSET,\n            \n            width: oriCanvasRect.width - this._LEFT_OFFSET - this._RIGHT_OFFSET,\n            height: oriCanvasRect.height - this._BOTTOM_OFFSET - this._TOP_OFFSET,\n        }\n        console.log(this._chartBoundingRect);\n    }\n\n    _initXAxisAndYAxis(){\n        let xMax = Number.MIN_VALUE;\n        let xMin = Number.MAX_VALUE;\n        \n        let yMax = Number.MIN_VALUE;\n        let yMin = Number.MAX_VALUE;\n        \n        this._oriMatrix.forEach((point) => {\n            const x = point[0];\n            const y = point[1];\n            \n            xMax = Math.max(xMax, x);\n            xMin = Math.min(xMin, x);\n            \n            yMax = Math.max(yMax, y);\n            yMin = Math.min(yMin, y);\n        });\n        \n        const xNormal = (xMax - xMin);\n        const yNormal = (yMax - yMin);\n    }\n    \n    getChartBoundingRect(){\n        return this._chartBoundingRect;\n    }\n}\n\n(function(global){\n    const canvasId = 'chart';\n    const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];\n    const radius = 4;\n    const chart = new Chart({\n        id: canvasId, \n        matrix: matrix,\n        radius: radius\n    });\n    chart.draw();\n    chart.printDataSet();\n    console.log('chart', chart);\n    console.log(chart._id);\n})(this);\n</script>\n</p>\n<p>主要增加的程式碼如下，參考chart.js繪製曲線的方式，自己試做看看，主要是針對點與點之間距離的計算出bezier curve的control point<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index=<span class=\"number\">1</span>; index&lt;(dataLength<span class=\"number\">-1</span>); index++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prePoint = <span class=\"keyword\">this</span>._dataSet[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentPoint = <span class=\"keyword\">this</span>._dataSet[index];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextPoint = <span class=\"keyword\">this</span>._dataSet[index + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> deltaX = nextPoint.x - prePoint.x;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> deltaY = nextPoint.y - prePoint.y;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> distance = <span class=\"keyword\">this</span>._distance(prePoint, nextPoint);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cos = deltaX / distance;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sin = deltaY / distance;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        calc current point distance between two points pre and next</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> preRelativeDistance = <span class=\"keyword\">this</span>._distance(prePoint, currentPoint);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextRelativeDistance = <span class=\"keyword\">this</span>._distance(currentPoint, nextPoint);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        calc actual offset by current point and pre point</span></span><br><span class=\"line\"><span class=\"comment\">        ps: actual offset = current point - (scale * two point distance * tension)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> preControlPointX = currentPoint.x - (cos * preRelativeDistance * <span class=\"keyword\">this</span>._LINE_TENSION);<span class=\"comment\">// _LINE_TENSION = 0.2</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> preControlPointY = currentPoint.y - (sin * preRelativeDistance * <span class=\"keyword\">this</span>._LINE_TENSION);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        calc actual offset by current point and next point</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * <span class=\"keyword\">this</span>._LINE_TENSION);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * <span class=\"keyword\">this</span>._LINE_TENSION);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>._curveDataSet.push(&#123;</span><br><span class=\"line\">        oriPoint: currentPoint,</span><br><span class=\"line\">        pre: &#123;<span class=\"attr\">x</span>: preControlPointX, <span class=\"attr\">y</span>: preControlPointY&#125;, </span><br><span class=\"line\">        next: &#123;<span class=\"attr\">x</span>: nextControlPointX, <span class=\"attr\">y</span>: nextControlPointY&#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用 bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) 繪製出曲線<br>其中cp1x, cp1y 第一個控制點，而cp2x, cp2y 第二個控制點，最後一組參數x, y 為繪製的終點座標</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._dataSet.entries())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.moveTo(point.x, point.y);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> preControlPoint = <span class=\"keyword\">this</span>._curveDataSet[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> controlPoint = <span class=\"keyword\">this</span>._curveDataSet[index];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.bezierCurveTo(</span><br><span class=\"line\">        preControlPoint.next.x, preControlPoint.next.y, </span><br><span class=\"line\">        controlPoint.pre.x, controlPoint.pre.y, </span><br><span class=\"line\">        point.x, point.y</span><br><span class=\"line\">    );            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>增加曲線效果，點與點之間的線條轉折變得更加柔和，效果如下<br>\n<html>\n    <head>\n    \n    </head>\n    <body>\n        <div align=\"center\">\n            <h2>Chart</h2>\n            <div>\n                <canvas id=\"chart\" width=\"300\" height=\"150\"></canvas>\n            </div>\n        </div>\n    </body>\n</html>\n<script language=\"javascript\">\nclass Chart{\n    constructor(params){\n    this._LINE_TENSION = 0.2\n    this._LINE_WIDTH_ORI = 2;\n    this._LINE_WIDTH_FOCUS = 5;\n    this._COLOR_GRAY = 'gray';\n    this._COLOR_WHITE = 'white';\n    \n    this._id = params.id;\n    this._matrix = params.matrix;\n    this._radius = params.radius;\n    this._dataSet = [];\n    this._curveDataSet = [];\n    \n    this._canvas;\n    this._canvasWidth;\n    this._canvasHeight;\n    this._ctx;\n    this._preFocusPoint;\n    \n    this._Coordinate;\n    \n    this._init();\n    }\n\n    _init(){\n        this._canvas = document.getElementById(this._id);\n        if(!this._canvas.getContext){\n            throw \"can't get canvas context!\";\n        }\n        this._canvasWidth = this._canvas.width;\n        this._canvasHeight = this._canvas.height;\n        this._ctx = this._canvas.getContext('2d');\n    \n        this._initCoordinate();\n        this._initDataSet();\n        this._initCurveLines();\n        this._bindMouseEvent();\n        this.draw();\n    }\n    \n    _initCoordinate(){\n        this._Coordinate = new Coordinate({\n            canvas: this._canvas,\n            matrix: this._matrix\n        });\n    }\n\n    _initDataSet(){\n        for(const [index, point] of this._matrix.entries()){\n            var reverseY = this._canvasHeight - point[1];\n            this._dataSet.push({\n                index: index,\n                x: point[0],\n                y: reverseY,\n                color: this._randomColor()\n            });\n        }\n    }\n    \n    _initFrame(){\n        const rect = this._Coordinate.getChartBoundingRect();\n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n        \n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n    }\n    \n    _initLines(){\n        this._ctx.beginPath();\n        const dataLength = this._dataSet.length;\n        if(dataLength < 2) return;\n        if(dataLength == 2){\n            const firstPoint = this._dataSet[0];\n            const secondPoint = this._dataSet[1];\n            this._ctx.moveTo(firstPoint.x, firstPoint.y);\n            this._ctx.lineTo(secondPoint.x, secondPoint.y);\n            this._ctx.stroke();\n            return;\n        }\n        \n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                this._ctx.moveTo(point.x, point.y);\n                continue;\n            }\n            const preControlPoint = this._curveDataSet[index - 1];\n            const controlPoint = this._curveDataSet[index];\n            this._ctx.bezierCurveTo(\n                preControlPoint.next.x, preControlPoint.next.y, \n                controlPoint.pre.x, controlPoint.pre.y, \n                point.x, point.y\n            );            \n        }\n        this._ctx.stroke();\n    }\n    \n    _showControlPoint(){\n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                continue;\n            }\n            const preControlPoint = this._curveDataSet[index - 1];\n            const controlPoint = this._curveDataSet[index];\n            \n            this._drawCircle({x: preControlPoint.next.x, y: preControlPoint.next.y, radius: 2, lineWidth: 1, color: preControlPoint.oriPoint.color});\n            this._drawCircle({x: controlPoint.pre.x,     y: controlPoint.pre.y,     radius: 2, lineWidth: 1, color: controlPoint.oriPoint.color});\n            \n            this._ctx.stroke();\n        }\n    }\n    \n    _initCircles(){\n        const _self = this;\n        this._dataSet.forEach((point) => {\n            _self._drawCircle({\n                x: point.x, \n                y: point.y, \n                radius: _self._radius, \n                lineWidth: _self._LINE_WIDTH_ORI,\n                color: point.color\n            });\n        });\n    }\n    \n    _initCurveLines(){\n        const dataLength = this._dataSet.length;\n        /*\n            less than three points don't need to use curve\n        */\n        if(dataLength <= 2) return;\n        for(let index=1; index<(dataLength-1); index++){\n            const prePoint = this._dataSet[index - 1];\n            const currentPoint = this._dataSet[index];\n            const nextPoint = this._dataSet[index + 1];\n            /*\n                use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale\n            */\n            const deltaX = nextPoint.x - prePoint.x;\n            const deltaY = nextPoint.y - prePoint.y;\n            const distance = this._distance(prePoint, nextPoint);\n            const cos = deltaX / distance;\n            const sin = deltaY / distance;\n            /*\n                calc current point distance between two points pre and next\n            */\n            const preRelativeDistance = this._distance(prePoint, currentPoint);\n            const nextRelativeDistance = this._distance(currentPoint, nextPoint);\n            /*\n                calc actual offset by current point and pre point\n                ps: actual offset = current point - (scale * two point distance * tension)\n            */\n            const preControlPointX = currentPoint.x - (cos * preRelativeDistance * this._LINE_TENSION);\n            const preControlPointY = currentPoint.y - (sin * preRelativeDistance * this._LINE_TENSION);\n            /*\n                calc actual offset by current point and next point\n            */\n            const nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * this._LINE_TENSION);\n            const nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * this._LINE_TENSION);\n            /*\n                \n            */\n            this._curveDataSet.push({\n                oriPoint: currentPoint,\n                pre: {x: preControlPointX, y: preControlPointY}, \n                next: {x: nextControlPointX, y: nextControlPointY},\n            });\n            \n        }\n    \n        const firstPoint = this._dataSet[0];\n        const secondCurvePoint = this._curveDataSet[1];\n        this._curveDataSet.unshift({\n            oriPoint: firstPoint,\n            next: {\n                x: (firstPoint.x + secondCurvePoint.pre.x) / 2,\n                y: (firstPoint.y + secondCurvePoint.pre.y) / 2\n            }\n        });\n        \n        const lastPoint = this._dataSet[dataLength - 1];\n        const secondLastCurvePoint = this._curveDataSet[dataLength - 2];\n        this._curveDataSet.push({\n            oriPoint: lastPoint,\n            pre: {\n                x: (lastPoint.x + secondLastCurvePoint.next.x) / 2, \n                y: (lastPoint.y + secondLastCurvePoint.next.y) / 2\n            }\n        });\n    }\n    \n    _bindMouseEvent(){\n        const _self = this;\n        this._canvas.addEventListener(\"mousemove\", (event) => {\n            const rect = _self._canvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            _self._findNearPointByMouse({x: x, y: y});\n        });\n    }\n    \n    _randomColor(){\n        return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n    \n    _drawRect(params){\n        this._ctx.lineWidth = params.lineWidth;\n        this._ctx.strokeStyle = params.color;\n        this._ctx.beginPath();\n        this._ctx.rect(params.x, params.y, params.width, params.height);\n        this._ctx.stroke();\n    }\n    \n    _drawLine(point1, point2){\n        this._ctx.lineWidth = point2.lineWidth;\n        this._ctx.strokeStyle = point2.color;\n        this._ctx.beginPath();\n        this._ctx.moveTo(point1.x, point1.y);\n        this._ctx.lineTo(point2.x, point2.y);\n        this._ctx.stroke();\n    }\n\n    _drawCircle(point){\n        this._ctx.lineWidth = point.lineWidth;\n        this._ctx.beginPath();\n        this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n        this._ctx.strokeStyle = point.color;\n        this._ctx.fillStyle  = point.color;\n        this._ctx.fill();\n        this._ctx.stroke();\n    }\n    \n    _drawFocusPoint(point){\n        this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n    }\n    \n    _findNearPointByMouse(mousePos){\n        let minDistancePoint;\n        let minDistance = Number.MAX_VALUE;\n        for(var index=0, size= this._dataSet.length; index<size; index++){\n            const currentPos = this._dataSet[index];\n            const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n            \n            if(minDistance > distanceBetweenTwoPoints){\n                minDistancePoint = currentPos;\n                minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n            }\n        }\n        if(!this._preFocusPoint){\n            this._drawFocusPoint(minDistancePoint);\n            this._preFocusPoint = minDistancePoint;\n            return;\n        }\n        /*\n            if pre point isn't self, it's need to render\n        */\n        if(this._preFocusPoint.index !== minDistancePoint.index){\n            this.render();\n            this._drawFocusPoint(minDistancePoint);\n        }\n        this._preFocusPoint = minDistancePoint;\n    }\n    \n    _distance(point1, point2){\n        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n    }\n    \n    _clear(){\n        this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n    }\n    \n    /* public */\n    draw(){\n        this._initFrame();\n        this._initLines();\n        this._initCircles();\n    }\n    \n    render(){\n        this._clear();\n        this.draw();\n        console.log('render');\n    }\n\n    printDataSet(){\n        console.log('dataSet', this._dataSet);\n    }\n}\n\nclass Coordinate{\n    constructor(params){\n        this._LEFT_OFFSET = 20;\n        this._BOTTOM_OFFSET = 20;\n        this._TOP_OFFSET = 10;\n        this._RIGHT_OFFSET = 10;\n        \n        this._canvas = params.canvas;\n        this._oriMatrix = params.matrix;\n        \n        this._chartBoundingRect;\n        this._xAxis;\n        this._yAxis;\n        \n        this._init();\n    }\n    \n    _init(){\n        this._initChartBoundingRect();\n        this._initXAxisAndYAxis();\n    }\n    \n    _initChartBoundingRect(){\n        const oriCanvasRect = this._canvas.getBoundingClientRect();\n        //console.log(oriCanvasRect);\n        this._chartBoundingRect = {\n            left: 0 + this._LEFT_OFFSET,\n            top: 0 + this._TOP_OFFSET,\n            bottom: oriCanvasRect.height - this._BOTTOM_OFFSET,\n            right: oriCanvasRect.width - this._RIGHT_OFFSET,\n            \n            width: oriCanvasRect.width - this._LEFT_OFFSET - this._RIGHT_OFFSET,\n            height: oriCanvasRect.height - this._BOTTOM_OFFSET - this._TOP_OFFSET,\n        }\n        console.log(this._chartBoundingRect);\n    }\n\n    _initXAxisAndYAxis(){\n        let xMax = Number.MIN_VALUE;\n        let xMin = Number.MAX_VALUE;\n        \n        let yMax = Number.MIN_VALUE;\n        let yMin = Number.MAX_VALUE;\n        \n        this._oriMatrix.forEach((point) => {\n            const x = point[0];\n            const y = point[1];\n            \n            xMax = Math.max(xMax, x);\n            xMin = Math.min(xMin, x);\n            \n            yMax = Math.max(yMax, y);\n            yMin = Math.min(yMin, y);\n        });\n        \n        const xNormal = (xMax - xMin);\n        const yNormal = (yMax - yMin);\n    }\n    \n    getChartBoundingRect(){\n        return this._chartBoundingRect;\n    }\n}\n\n(function(global){\n    const canvasId = 'chart';\n    const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];\n    const radius = 4;\n    const chart = new Chart({\n        id: canvasId, \n        matrix: matrix,\n        radius: radius\n    });\n    chart.draw();\n    chart.printDataSet();\n    console.log('chart', chart);\n    console.log(chart._id);\n})(this);\n</script>\n</p>\n<p>主要增加的程式碼如下，參考chart.js繪製曲線的方式，自己試做看看，主要是針對點與點之間距離的計算出bezier curve的control point<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index=<span class=\"number\">1</span>; index&lt;(dataLength<span class=\"number\">-1</span>); index++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prePoint = <span class=\"keyword\">this</span>._dataSet[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentPoint = <span class=\"keyword\">this</span>._dataSet[index];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextPoint = <span class=\"keyword\">this</span>._dataSet[index + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        use pre point p(x0, y0) and next p(x2, y2) point to calc current point p(x1, y1) offset scale</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> deltaX = nextPoint.x - prePoint.x;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> deltaY = nextPoint.y - prePoint.y;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> distance = <span class=\"keyword\">this</span>._distance(prePoint, nextPoint);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cos = deltaX / distance;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sin = deltaY / distance;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        calc current point distance between two points pre and next</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> preRelativeDistance = <span class=\"keyword\">this</span>._distance(prePoint, currentPoint);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextRelativeDistance = <span class=\"keyword\">this</span>._distance(currentPoint, nextPoint);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        calc actual offset by current point and pre point</span></span><br><span class=\"line\"><span class=\"comment\">        ps: actual offset = current point - (scale * two point distance * tension)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> preControlPointX = currentPoint.x - (cos * preRelativeDistance * <span class=\"keyword\">this</span>._LINE_TENSION);<span class=\"comment\">// _LINE_TENSION = 0.2</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> preControlPointY = currentPoint.y - (sin * preRelativeDistance * <span class=\"keyword\">this</span>._LINE_TENSION);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        calc actual offset by current point and next point</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextControlPointX = currentPoint.x + (cos * nextRelativeDistance * <span class=\"keyword\">this</span>._LINE_TENSION);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextControlPointY = currentPoint.y + (sin * nextRelativeDistance * <span class=\"keyword\">this</span>._LINE_TENSION);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>._curveDataSet.push(&#123;</span><br><span class=\"line\">        oriPoint: currentPoint,</span><br><span class=\"line\">        pre: &#123;<span class=\"attr\">x</span>: preControlPointX, <span class=\"attr\">y</span>: preControlPointY&#125;, </span><br><span class=\"line\">        next: &#123;<span class=\"attr\">x</span>: nextControlPointX, <span class=\"attr\">y</span>: nextControlPointY&#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用 bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) 繪製出曲線<br>其中cp1x, cp1y 第一個控制點，而cp2x, cp2y 第二個控制點，最後一組參數x, y 為繪製的終點座標</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._dataSet.entries())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.moveTo(point.x, point.y);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> preControlPoint = <span class=\"keyword\">this</span>._curveDataSet[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> controlPoint = <span class=\"keyword\">this</span>._curveDataSet[index];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.bezierCurveTo(</span><br><span class=\"line\">        preControlPoint.next.x, preControlPoint.next.y, </span><br><span class=\"line\">        controlPoint.pre.x, controlPoint.pre.y, </span><br><span class=\"line\">        point.x, point.y</span><br><span class=\"line\">    );            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"關於 Java CompletableFuture 的用法","date":"2020-04-19T06:07:24.000Z","_content":"已經好久沒有進行更新\n最近都在熟悉新工作，與過往不同的 domain knowledge ，融入貫通的過程中學習到滿多關於硬體的知識，目前已經進入狀況\n\n剛好最近都在使用 CompleteableFuture 處理 thread 非同步的事件\n來寫篇文章記錄一下用法，方便之後查詢使用\n\nCompletableFuture 個人覺得很像 JS 的 Promise\nJS Promise 串接async callback function \n而 CompletableFuture 用於串連不同的 thread 接點，某種程度將一連串執行流程中 thread 之間的前後相依性解耦\n某個 thread 結果要串給另一個 thread 當作輸入條件，使用 CompletableFuture 可輕鬆綁定\n所以在設計時只需定義好每個事件個自的 input 和 output ，不需要將關聯寫死\n\n首先是最簡單的 `runAsync` 和 `supplyAsync` 的基礎用法，差別在於是否需要 return result\n它們都可以搭配 thread pool 使用 ( 在實際應用場景都會根據實際需求自建 thread pool 使用，若沒設置則預設是使用 JVM 本身的 thread pool )\n```java \n    // basic\n    CompletableFuture<Void>  runAsync(Runnable runnable)\n    CompletableFuture<T>     supplyAsync(Supplier<T> supplier)\n    \n    // use your own thread pool\n    CompletableFuture<Void>  runAsync(Runnable runnable, Executor executor)\n    CompletableFuture<T>     supplyAsync(Supplier<T> supplier, Executor executor)\n\n```\n\n提供自建的 thread pool 給 CompletableFuture 使用\n```java \n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<Void> runAsync = CompletableFuture.runAsync(() -> System.out.println(\"runAsync\"), threadPool);\n    CompletableFuture<String> supplyAsync = CompletableFuture.supplyAsync(() -> \"supplyAsync\", threadPool);\n\n```\n---\nCompletableFuture 也允許在事件執行完成時 callback 取得結果，方便進行下一步的處理，而且在執行過程中發生 exception ，也可以攔截 exception 後執行特定的 action\n```java\n    // basic\n    CompletableFuture<T> whenComplete(BiConsumer<? super T, ? super Throwable> action)\n    CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action)\n    // catch exception\n    CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn)\n    \n    // use your own thread pool\n    CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action, Executor executor)\n```\n\n將剛剛的 `supplyAsync` 例子改寫為強制拋出 exception ，可在 `completeAsync` 或 `exceptionally` 處理異常，非常的方便\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync = CompletableFuture.supplyAsync(() -> {\n        throw new CompletionException(new Exception(\"throw exception\"));\n    }, threadPool);\n    \n    supplyAsync.whenCompleteAsync((result, ex) -> {\n        System.out.println(\"result: \" + result);\n        System.out.println(\"exception: \" + ex);\n    }, threadPool).exceptionally(ex -> {\n        System.out.println(\"exceptionally: \" + ex.getMessage());\n        return ex.getMessage();\n    }).join();\n```\n輸出\n```java\n    result: null\n    exception: java.util.concurrent.CompletionException: java.lang.Exception: throw exception\n    exceptionally: java.lang.Exception: throw exception\n```\n---\n除此之外 CompletableFuture 也提供 `handle` 來處理 exception ，差別在於 `handle` 是允許有返回值，用於串接過程中處理 exception\n`handle` 也用於做進一步的資料轉換\n\n```java\n    // basic\n    CompletableFuture<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)\n    CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn)\n\n    // use your own thread pool\n    CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor)\n```\n\n再次改寫 `supplyAsync` ，改為使用 `handle` 處理 exception ，此例子將 exception 轉換成字串當作一般的結果往後傳遞\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync = CompletableFuture.supplyAsync(() -> {\n        throw new CompletionException(new Exception(\"throw exception\"));\n    }, threadPool);\n    \n    String ans = supplyAsync.handle((result, ex) -> (null != ex) ? ex.getMessage() : result).join();\n    System.out.println(\"ans: \" + ans);\n```\n輸出\n```java\n    ans: java.lang.Exception: throw exception\n```\n---\n\n若是沒有處理 exception 的需求則可以使用 `thenApply` 進行資料的轉換，類似於 stream map 的效果\n```java\n    // basic\n    CompletableFuture<U> thenApply(Function<? super T, ? extends U> fn)\n    CompletableFuture<U> thenApplyAsync(Function<? super T, ? extends U> fn)\n    \n    // use your own thread pool\n    CompletableFuture<U> thenApplyAsync(Function<? super T, ? extends U> fn, Executor executor)\n```\n\n還有對映 flatMap 的 `thenCompose`\n```java\n    CompletableFuture<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn)\n    CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn)\n    \n    CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn, Executor executor)\n```\n\n不需要返回值的 `thenAccept` \n```java\n    // basic\n    CompletableFuture<Void> thenAccept(Consumer<? super T> action)\n    CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action)\n    \n    // use your own thread pool\n    CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor)\n```\n---\n\n使用 `thenCombine` 還可以將兩個獨立的 CompletableFuture 執行結果進行整合，非常的強大\n```java\n    // basic\n    CompletableFuture<V> thenCombine(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)\n    CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)\n    \n    // use your own thread pool\n    CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)\n```\n\n現在將 supplyAsync1 和 supplyAsync2 結果整合\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync1 = CompletableFuture.supplyAsync(() -> \"supplyAsync 1\", threadPool);\n    CompletableFuture<String> supplyAsync2 = CompletableFuture.supplyAsync(() -> \"supplyAsync 2\", threadPool);\n    \n    String ans = supplyAsync1.thenCombine(supplyAsync2, (result1, result2) -> result1 + \", \" + result2).join();\n    System.out.println(\"and: \" + ans);\n```\n輸出\n```java\nand: supplyAsync 1, supplyAsync 2\n```\n\n不需要返回值的 `thenAcceptBoth`\n```java\n    // basic\n    CompletableFuture<Void> thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)\n    CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)\n    CompletableFuture<Void> runAfterBoth(CompletionStage<?> other,  Runnable action)\n    \n    // use your own thread pool\n    CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor)\n```\n\n使用方式與 `thenCombine` 相同\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync1 = CompletableFuture.supplyAsync(() -> \"supplyAsync 1\", threadPool);\n    CompletableFuture<String> supplyAsync2 = CompletableFuture.supplyAsync(() -> \"supplyAsync 2\", threadPool);\n    \n    supplyAsync1.thenAcceptBothAsync(supplyAsync2, (result1, result2) -> System.out.println(result1 + \", \" + result2), threadPool).join();\n```\n輸出\n```java\n    supplyAsync 1, supplyAsync 2\n```\n---\n\n前面提到的都是兩個獨立 CompletableFuture 的例子，若大於兩個的時候會使用 `allOf`\n`allOf` 可以等待全部的 CompletableFuture 執行完成後執行 \n\n```java\n    CompletableFuture<Void> allOf(CompletableFuture<?>... cfs)\n```\n等待 supplyAsync1, supplyAsync2, supplyAsync3 執行結束後取得最終結果\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync1 = CompletableFuture.supplyAsync(() -> \"supplyAsync 1\", threadPool);\n    CompletableFuture<String> supplyAsync2 = CompletableFuture.supplyAsync(() -> \"supplyAsync 2\", threadPool);\n    CompletableFuture<String> supplyAsync3 = CompletableFuture.supplyAsync(() -> \"supplyAsync 3\", threadPool);\n    \n    CompletableFuture.allOf(supplyAsync1, supplyAsync2, supplyAsync3).thenRun(() -> {\n        try {\n            StringBuffer ans = new StringBuffer();\n            ans.append(supplyAsync1.get()).append(\", \")\n                .append(supplyAsync2.get()).append(\", \")\n                .append(supplyAsync3.get());\n            System.out.println(\"ans: \" + ans.toString());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }).join();\n```\n輸出\n```java\n    ans: supplyAsync 1, supplyAsync 2, supplyAsync 3\n```\n在 `allOf` 後面串接一個 `thenRun`\n它的用法很簡單，使用方式與 `thenAccept` 一樣，差別在於不需要傳入上一個 CompletableFuture 的執行結果\n```java\n    // basic\n    CompletableFuture<Void> thenRun(Runnable action)\n    CompletableFuture<Void> thenRunAsync(Runnable action)\n    \n    // use your own thread pool\n    CompletableFuture<Void> thenRunAsync(Runnable action, Executor executor)\n```\n---\n\n上述提到的都是全部完成的例子，反過來說我只想要其中一個有完成就往下執行\nCompletableFuture 也可以做到這點\n```java\n    // basic\n    CompletableFuture<U> applyToEither(CompletionStage<? extends T> other, Function<? super T,U> fn)\n    CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn)\n    \n    // use your own thread pool\n    CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn, Executor executor)\n```\n\n沒有返回值的 `acceptEither`\n```java\n    // basic\n    CompletableFuture<Void>  acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action)\n    CompletableFuture<Void>  acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action)\n\n    // use your own thread pool\n    CompletableFuture<Void>  acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor)\n```\n\n用於多個 CompletableFuture 的 `anyOf` ，在眾多 CompletableFuture 只需一個完成就可往下執行\n```java\n    CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs)\n```\n","source":"_posts/關於-Java-CompletableFuture-的用法.md","raw":"---\ntitle: 關於 Java CompletableFuture 的用法\ndate: 2020-04-19 14:07:24\ntags:\n- java\n- thread\n---\n已經好久沒有進行更新\n最近都在熟悉新工作，與過往不同的 domain knowledge ，融入貫通的過程中學習到滿多關於硬體的知識，目前已經進入狀況\n\n剛好最近都在使用 CompleteableFuture 處理 thread 非同步的事件\n來寫篇文章記錄一下用法，方便之後查詢使用\n\nCompletableFuture 個人覺得很像 JS 的 Promise\nJS Promise 串接async callback function \n而 CompletableFuture 用於串連不同的 thread 接點，某種程度將一連串執行流程中 thread 之間的前後相依性解耦\n某個 thread 結果要串給另一個 thread 當作輸入條件，使用 CompletableFuture 可輕鬆綁定\n所以在設計時只需定義好每個事件個自的 input 和 output ，不需要將關聯寫死\n\n首先是最簡單的 `runAsync` 和 `supplyAsync` 的基礎用法，差別在於是否需要 return result\n它們都可以搭配 thread pool 使用 ( 在實際應用場景都會根據實際需求自建 thread pool 使用，若沒設置則預設是使用 JVM 本身的 thread pool )\n```java \n    // basic\n    CompletableFuture<Void>  runAsync(Runnable runnable)\n    CompletableFuture<T>     supplyAsync(Supplier<T> supplier)\n    \n    // use your own thread pool\n    CompletableFuture<Void>  runAsync(Runnable runnable, Executor executor)\n    CompletableFuture<T>     supplyAsync(Supplier<T> supplier, Executor executor)\n\n```\n\n提供自建的 thread pool 給 CompletableFuture 使用\n```java \n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<Void> runAsync = CompletableFuture.runAsync(() -> System.out.println(\"runAsync\"), threadPool);\n    CompletableFuture<String> supplyAsync = CompletableFuture.supplyAsync(() -> \"supplyAsync\", threadPool);\n\n```\n---\nCompletableFuture 也允許在事件執行完成時 callback 取得結果，方便進行下一步的處理，而且在執行過程中發生 exception ，也可以攔截 exception 後執行特定的 action\n```java\n    // basic\n    CompletableFuture<T> whenComplete(BiConsumer<? super T, ? super Throwable> action)\n    CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action)\n    // catch exception\n    CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn)\n    \n    // use your own thread pool\n    CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action, Executor executor)\n```\n\n將剛剛的 `supplyAsync` 例子改寫為強制拋出 exception ，可在 `completeAsync` 或 `exceptionally` 處理異常，非常的方便\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync = CompletableFuture.supplyAsync(() -> {\n        throw new CompletionException(new Exception(\"throw exception\"));\n    }, threadPool);\n    \n    supplyAsync.whenCompleteAsync((result, ex) -> {\n        System.out.println(\"result: \" + result);\n        System.out.println(\"exception: \" + ex);\n    }, threadPool).exceptionally(ex -> {\n        System.out.println(\"exceptionally: \" + ex.getMessage());\n        return ex.getMessage();\n    }).join();\n```\n輸出\n```java\n    result: null\n    exception: java.util.concurrent.CompletionException: java.lang.Exception: throw exception\n    exceptionally: java.lang.Exception: throw exception\n```\n---\n除此之外 CompletableFuture 也提供 `handle` 來處理 exception ，差別在於 `handle` 是允許有返回值，用於串接過程中處理 exception\n`handle` 也用於做進一步的資料轉換\n\n```java\n    // basic\n    CompletableFuture<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)\n    CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn)\n\n    // use your own thread pool\n    CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor)\n```\n\n再次改寫 `supplyAsync` ，改為使用 `handle` 處理 exception ，此例子將 exception 轉換成字串當作一般的結果往後傳遞\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync = CompletableFuture.supplyAsync(() -> {\n        throw new CompletionException(new Exception(\"throw exception\"));\n    }, threadPool);\n    \n    String ans = supplyAsync.handle((result, ex) -> (null != ex) ? ex.getMessage() : result).join();\n    System.out.println(\"ans: \" + ans);\n```\n輸出\n```java\n    ans: java.lang.Exception: throw exception\n```\n---\n\n若是沒有處理 exception 的需求則可以使用 `thenApply` 進行資料的轉換，類似於 stream map 的效果\n```java\n    // basic\n    CompletableFuture<U> thenApply(Function<? super T, ? extends U> fn)\n    CompletableFuture<U> thenApplyAsync(Function<? super T, ? extends U> fn)\n    \n    // use your own thread pool\n    CompletableFuture<U> thenApplyAsync(Function<? super T, ? extends U> fn, Executor executor)\n```\n\n還有對映 flatMap 的 `thenCompose`\n```java\n    CompletableFuture<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn)\n    CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn)\n    \n    CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn, Executor executor)\n```\n\n不需要返回值的 `thenAccept` \n```java\n    // basic\n    CompletableFuture<Void> thenAccept(Consumer<? super T> action)\n    CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action)\n    \n    // use your own thread pool\n    CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor)\n```\n---\n\n使用 `thenCombine` 還可以將兩個獨立的 CompletableFuture 執行結果進行整合，非常的強大\n```java\n    // basic\n    CompletableFuture<V> thenCombine(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)\n    CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)\n    \n    // use your own thread pool\n    CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)\n```\n\n現在將 supplyAsync1 和 supplyAsync2 結果整合\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync1 = CompletableFuture.supplyAsync(() -> \"supplyAsync 1\", threadPool);\n    CompletableFuture<String> supplyAsync2 = CompletableFuture.supplyAsync(() -> \"supplyAsync 2\", threadPool);\n    \n    String ans = supplyAsync1.thenCombine(supplyAsync2, (result1, result2) -> result1 + \", \" + result2).join();\n    System.out.println(\"and: \" + ans);\n```\n輸出\n```java\nand: supplyAsync 1, supplyAsync 2\n```\n\n不需要返回值的 `thenAcceptBoth`\n```java\n    // basic\n    CompletableFuture<Void> thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)\n    CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)\n    CompletableFuture<Void> runAfterBoth(CompletionStage<?> other,  Runnable action)\n    \n    // use your own thread pool\n    CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor)\n```\n\n使用方式與 `thenCombine` 相同\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync1 = CompletableFuture.supplyAsync(() -> \"supplyAsync 1\", threadPool);\n    CompletableFuture<String> supplyAsync2 = CompletableFuture.supplyAsync(() -> \"supplyAsync 2\", threadPool);\n    \n    supplyAsync1.thenAcceptBothAsync(supplyAsync2, (result1, result2) -> System.out.println(result1 + \", \" + result2), threadPool).join();\n```\n輸出\n```java\n    supplyAsync 1, supplyAsync 2\n```\n---\n\n前面提到的都是兩個獨立 CompletableFuture 的例子，若大於兩個的時候會使用 `allOf`\n`allOf` 可以等待全部的 CompletableFuture 執行完成後執行 \n\n```java\n    CompletableFuture<Void> allOf(CompletableFuture<?>... cfs)\n```\n等待 supplyAsync1, supplyAsync2, supplyAsync3 執行結束後取得最終結果\n```java\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n    CompletableFuture<String> supplyAsync1 = CompletableFuture.supplyAsync(() -> \"supplyAsync 1\", threadPool);\n    CompletableFuture<String> supplyAsync2 = CompletableFuture.supplyAsync(() -> \"supplyAsync 2\", threadPool);\n    CompletableFuture<String> supplyAsync3 = CompletableFuture.supplyAsync(() -> \"supplyAsync 3\", threadPool);\n    \n    CompletableFuture.allOf(supplyAsync1, supplyAsync2, supplyAsync3).thenRun(() -> {\n        try {\n            StringBuffer ans = new StringBuffer();\n            ans.append(supplyAsync1.get()).append(\", \")\n                .append(supplyAsync2.get()).append(\", \")\n                .append(supplyAsync3.get());\n            System.out.println(\"ans: \" + ans.toString());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }).join();\n```\n輸出\n```java\n    ans: supplyAsync 1, supplyAsync 2, supplyAsync 3\n```\n在 `allOf` 後面串接一個 `thenRun`\n它的用法很簡單，使用方式與 `thenAccept` 一樣，差別在於不需要傳入上一個 CompletableFuture 的執行結果\n```java\n    // basic\n    CompletableFuture<Void> thenRun(Runnable action)\n    CompletableFuture<Void> thenRunAsync(Runnable action)\n    \n    // use your own thread pool\n    CompletableFuture<Void> thenRunAsync(Runnable action, Executor executor)\n```\n---\n\n上述提到的都是全部完成的例子，反過來說我只想要其中一個有完成就往下執行\nCompletableFuture 也可以做到這點\n```java\n    // basic\n    CompletableFuture<U> applyToEither(CompletionStage<? extends T> other, Function<? super T,U> fn)\n    CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn)\n    \n    // use your own thread pool\n    CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn, Executor executor)\n```\n\n沒有返回值的 `acceptEither`\n```java\n    // basic\n    CompletableFuture<Void>  acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action)\n    CompletableFuture<Void>  acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action)\n\n    // use your own thread pool\n    CompletableFuture<Void>  acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor)\n```\n\n用於多個 CompletableFuture 的 `anyOf` ，在眾多 CompletableFuture 只需一個完成就可往下執行\n```java\n    CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs)\n```\n","slug":"關於-Java-CompletableFuture-的用法","published":1,"updated":"2020-04-22T12:55:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr6900380rpjsn9x05gd","content":"<p>已經好久沒有進行更新<br>最近都在熟悉新工作，與過往不同的 domain knowledge ，融入貫通的過程中學習到滿多關於硬體的知識，目前已經進入狀況</p>\n<p>剛好最近都在使用 CompleteableFuture 處理 thread 非同步的事件<br>來寫篇文章記錄一下用法，方便之後查詢使用</p>\n<p>CompletableFuture 個人覺得很像 JS 的 Promise<br>JS Promise 串接async callback function<br>而 CompletableFuture 用於串連不同的 thread 接點，某種程度將一連串執行流程中 thread 之間的前後相依性解耦<br>某個 thread 結果要串給另一個 thread 當作輸入條件，使用 CompletableFuture 可輕鬆綁定<br>所以在設計時只需定義好每個事件個自的 input 和 output ，不需要將關聯寫死</p>\n<p>首先是最簡單的 <code>runAsync</code> 和 <code>supplyAsync</code> 的基礎用法，差別在於是否需要 return result<br>它們都可以搭配 thread pool 使用 ( 在實際應用場景都會根據實際需求自建 thread pool 使用，若沒設置則預設是使用 JVM 本身的 thread pool )<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">runAsync</span><span class=\"params\">(Runnable runnable)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt;     <span class=\"title\">supplyAsync</span><span class=\"params\">(Supplier&lt;T&gt; supplier)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">runAsync</span><span class=\"params\">(Runnable runnable, Executor executor)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt;     <span class=\"title\">supplyAsync</span><span class=\"params\">(Supplier&lt;T&gt; supplier, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>提供自建的 thread pool 給 CompletableFuture 使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;Void&gt; runAsync = CompletableFuture.runAsync(() -&gt; System.out.println(<span class=\"string\">\"runAsync\"</span>), threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync\"</span>, threadPool);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>CompletableFuture 也允許在事件執行完成時 callback 取得結果，方便進行下一步的處理，而且在執行過程中發生 exception ，也可以攔截 exception 後執行特定的 action<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt; <span class=\"title\">whenComplete</span><span class=\"params\">(BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> Throwable&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt; <span class=\"title\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> Throwable&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// catch exception</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt; <span class=\"title\">exceptionally</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt; <span class=\"title\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> Throwable&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>將剛剛的 <code>supplyAsync</code> 例子改寫為強制拋出 exception ，可在 <code>completeAsync</code> 或 <code>exceptionally</code> 處理異常，非常的方便<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CompletionException(<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"throw exception\"</span>));</span><br><span class=\"line\">&#125;, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">supplyAsync.whenCompleteAsync((result, ex) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"result: \"</span> + result);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"exception: \"</span> + ex);</span><br><span class=\"line\">&#125;, threadPool).exceptionally(ex -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"exceptionally: \"</span> + ex.getMessage());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ex.getMessage();</span><br><span class=\"line\">&#125;).join();</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result: <span class=\"keyword\">null</span></span><br><span class=\"line\">exception: java.util.concurrent.CompletionException: java.lang.Exception: <span class=\"keyword\">throw</span> exception</span><br><span class=\"line\">exceptionally: java.lang.Exception: <span class=\"keyword\">throw</span> exception</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>除此之外 CompletableFuture 也提供 <code>handle</code> 來處理 exception ，差別在於 <code>handle</code> 是允許有返回值，用於串接過程中處理 exception<br><code>handle</code> 也用於做進一步的資料轉換</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">handle</span><span class=\"params\">(BiFunction&lt;? <span class=\"keyword\">super</span> T, Throwable, ? extends U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"keyword\">super</span> T, Throwable, ? extends U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"keyword\">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure>\n<p>再次改寫 <code>supplyAsync</code> ，改為使用 <code>handle</code> 處理 exception ，此例子將 exception 轉換成字串當作一般的結果往後傳遞<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CompletionException(<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"throw exception\"</span>));</span><br><span class=\"line\">&#125;, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">String ans = supplyAsync.handle((result, ex) -&gt; (<span class=\"keyword\">null</span> != ex) ? ex.getMessage() : result).join();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"ans: \"</span> + ans);</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans: java.lang.Exception: <span class=\"keyword\">throw</span> exception</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>若是沒有處理 exception 的需求則可以使用 <code>thenApply</code> 進行資料的轉換，類似於 stream map 的效果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenApply</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>還有對映 flatMap 的 <code>thenCompose</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenCompose</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>不需要返回值的 <code>thenAccept</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAccept</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>使用 <code>thenCombine</code> 還可以將兩個獨立的 CompletableFuture 執行結果進行整合，非常的強大<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;V&gt; <span class=\"title\">thenCombine</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U, ? extends V&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;V&gt; <span class=\"title\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U, ? extends V&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;V&gt; <span class=\"title\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U, ? extends V&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>現在將 supplyAsync1 和 supplyAsync2 結果整合<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync1 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 1\"</span>, threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync2 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 2\"</span>, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">String ans = supplyAsync1.thenCombine(supplyAsync2, (result1, result2) -&gt; result1 + <span class=\"string\">\", \"</span> + result2).join();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"and: \"</span> + ans);</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and: supplyAsync <span class=\"number\">1</span>, supplyAsync <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>不需要返回值的 <code>thenAcceptBoth</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptBoth</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">runAfterBoth</span><span class=\"params\">(CompletionStage&lt;?&gt; other,  Runnable action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>使用方式與 <code>thenCombine</code> 相同<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync1 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 1\"</span>, threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync2 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 2\"</span>, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">supplyAsync1.thenAcceptBothAsync(supplyAsync2, (result1, result2) -&gt; System.out.println(result1 + <span class=\"string\">\", \"</span> + result2), threadPool).join();</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supplyAsync <span class=\"number\">1</span>, supplyAsync <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>前面提到的都是兩個獨立 CompletableFuture 的例子，若大於兩個的時候會使用 <code>allOf</code><br><code>allOf</code> 可以等待全部的 CompletableFuture 執行完成後執行 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">allOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span></span></span><br></pre></td></tr></table></figure>\n<p>等待 supplyAsync1, supplyAsync2, supplyAsync3 執行結束後取得最終結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync1 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 1\"</span>, threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync2 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 2\"</span>, threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync3 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 3\"</span>, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture.allOf(supplyAsync1, supplyAsync2, supplyAsync3).thenRun(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        StringBuffer ans = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        ans.append(supplyAsync1.get()).append(<span class=\"string\">\", \"</span>)</span><br><span class=\"line\">            .append(supplyAsync2.get()).append(<span class=\"string\">\", \"</span>)</span><br><span class=\"line\">            .append(supplyAsync3.get());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ans: \"</span> + ans.toString());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).join();</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans: supplyAsync <span class=\"number\">1</span>, supplyAsync <span class=\"number\">2</span>, supplyAsync <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>在 <code>allOf</code> 後面串接一個 <code>thenRun</code><br>它的用法很簡單，使用方式與 <code>thenAccept</code> 一樣，差別在於不需要傳入上一個 CompletableFuture 的執行結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenRun</span><span class=\"params\">(Runnable action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenRunAsync</span><span class=\"params\">(Runnable action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenRunAsync</span><span class=\"params\">(Runnable action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>上述提到的都是全部完成的例子，反過來說我只想要其中一個有完成就往下執行<br>CompletableFuture 也可以做到這點<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">applyToEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"keyword\">super</span> T,U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"keyword\">super</span> T,U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"keyword\">super</span> T,U&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>沒有返回值的 <code>acceptEither</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">acceptEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>用於多個 CompletableFuture 的 <code>anyOf</code> ，在眾多 CompletableFuture 只需一個完成就可往下執行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Object&gt; <span class=\"title\">anyOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span></span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>已經好久沒有進行更新<br>最近都在熟悉新工作，與過往不同的 domain knowledge ，融入貫通的過程中學習到滿多關於硬體的知識，目前已經進入狀況</p>\n<p>剛好最近都在使用 CompleteableFuture 處理 thread 非同步的事件<br>來寫篇文章記錄一下用法，方便之後查詢使用</p>\n<p>CompletableFuture 個人覺得很像 JS 的 Promise<br>JS Promise 串接async callback function<br>而 CompletableFuture 用於串連不同的 thread 接點，某種程度將一連串執行流程中 thread 之間的前後相依性解耦<br>某個 thread 結果要串給另一個 thread 當作輸入條件，使用 CompletableFuture 可輕鬆綁定<br>所以在設計時只需定義好每個事件個自的 input 和 output ，不需要將關聯寫死</p>\n<p>首先是最簡單的 <code>runAsync</code> 和 <code>supplyAsync</code> 的基礎用法，差別在於是否需要 return result<br>它們都可以搭配 thread pool 使用 ( 在實際應用場景都會根據實際需求自建 thread pool 使用，若沒設置則預設是使用 JVM 本身的 thread pool )<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">runAsync</span><span class=\"params\">(Runnable runnable)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt;     <span class=\"title\">supplyAsync</span><span class=\"params\">(Supplier&lt;T&gt; supplier)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">runAsync</span><span class=\"params\">(Runnable runnable, Executor executor)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt;     <span class=\"title\">supplyAsync</span><span class=\"params\">(Supplier&lt;T&gt; supplier, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>提供自建的 thread pool 給 CompletableFuture 使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;Void&gt; runAsync = CompletableFuture.runAsync(() -&gt; System.out.println(<span class=\"string\">\"runAsync\"</span>), threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync\"</span>, threadPool);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>CompletableFuture 也允許在事件執行完成時 callback 取得結果，方便進行下一步的處理，而且在執行過程中發生 exception ，也可以攔截 exception 後執行特定的 action<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt; <span class=\"title\">whenComplete</span><span class=\"params\">(BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> Throwable&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt; <span class=\"title\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> Throwable&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// catch exception</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt; <span class=\"title\">exceptionally</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;T&gt; <span class=\"title\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> Throwable&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>將剛剛的 <code>supplyAsync</code> 例子改寫為強制拋出 exception ，可在 <code>completeAsync</code> 或 <code>exceptionally</code> 處理異常，非常的方便<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CompletionException(<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"throw exception\"</span>));</span><br><span class=\"line\">&#125;, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">supplyAsync.whenCompleteAsync((result, ex) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"result: \"</span> + result);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"exception: \"</span> + ex);</span><br><span class=\"line\">&#125;, threadPool).exceptionally(ex -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"exceptionally: \"</span> + ex.getMessage());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ex.getMessage();</span><br><span class=\"line\">&#125;).join();</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result: <span class=\"keyword\">null</span></span><br><span class=\"line\">exception: java.util.concurrent.CompletionException: java.lang.Exception: <span class=\"keyword\">throw</span> exception</span><br><span class=\"line\">exceptionally: java.lang.Exception: <span class=\"keyword\">throw</span> exception</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>除此之外 CompletableFuture 也提供 <code>handle</code> 來處理 exception ，差別在於 <code>handle</code> 是允許有返回值，用於串接過程中處理 exception<br><code>handle</code> 也用於做進一步的資料轉換</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">handle</span><span class=\"params\">(BiFunction&lt;? <span class=\"keyword\">super</span> T, Throwable, ? extends U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"keyword\">super</span> T, Throwable, ? extends U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"keyword\">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure>\n<p>再次改寫 <code>supplyAsync</code> ，改為使用 <code>handle</code> 處理 exception ，此例子將 exception 轉換成字串當作一般的結果往後傳遞<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CompletionException(<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"throw exception\"</span>));</span><br><span class=\"line\">&#125;, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">String ans = supplyAsync.handle((result, ex) -&gt; (<span class=\"keyword\">null</span> != ex) ? ex.getMessage() : result).join();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"ans: \"</span> + ans);</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans: java.lang.Exception: <span class=\"keyword\">throw</span> exception</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>若是沒有處理 exception 的需求則可以使用 <code>thenApply</code> 進行資料的轉換，類似於 stream map 的效果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenApply</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>還有對映 flatMap 的 <code>thenCompose</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenCompose</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>不需要返回值的 <code>thenAccept</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAccept</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>使用 <code>thenCombine</code> 還可以將兩個獨立的 CompletableFuture 執行結果進行整合，非常的強大<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;V&gt; <span class=\"title\">thenCombine</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U, ? extends V&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;V&gt; <span class=\"title\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U, ? extends V&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;V&gt; <span class=\"title\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U, ? extends V&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>現在將 supplyAsync1 和 supplyAsync2 結果整合<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync1 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 1\"</span>, threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync2 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 2\"</span>, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">String ans = supplyAsync1.thenCombine(supplyAsync2, (result1, result2) -&gt; result1 + <span class=\"string\">\", \"</span> + result2).join();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"and: \"</span> + ans);</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and: supplyAsync <span class=\"number\">1</span>, supplyAsync <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>不需要返回值的 <code>thenAcceptBoth</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptBoth</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">runAfterBoth</span><span class=\"params\">(CompletionStage&lt;?&gt; other,  Runnable action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>使用方式與 <code>thenCombine</code> 相同<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync1 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 1\"</span>, threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync2 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 2\"</span>, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">supplyAsync1.thenAcceptBothAsync(supplyAsync2, (result1, result2) -&gt; System.out.println(result1 + <span class=\"string\">\", \"</span> + result2), threadPool).join();</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supplyAsync <span class=\"number\">1</span>, supplyAsync <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>前面提到的都是兩個獨立 CompletableFuture 的例子，若大於兩個的時候會使用 <code>allOf</code><br><code>allOf</code> 可以等待全部的 CompletableFuture 執行完成後執行 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">allOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span></span></span><br></pre></td></tr></table></figure>\n<p>等待 supplyAsync1, supplyAsync2, supplyAsync3 執行結束後取得最終結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync1 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 1\"</span>, threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync2 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 2\"</span>, threadPool);</span><br><span class=\"line\">CompletableFuture&lt;String&gt; supplyAsync3 = CompletableFuture.supplyAsync(() -&gt; <span class=\"string\">\"supplyAsync 3\"</span>, threadPool);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture.allOf(supplyAsync1, supplyAsync2, supplyAsync3).thenRun(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        StringBuffer ans = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        ans.append(supplyAsync1.get()).append(<span class=\"string\">\", \"</span>)</span><br><span class=\"line\">            .append(supplyAsync2.get()).append(<span class=\"string\">\", \"</span>)</span><br><span class=\"line\">            .append(supplyAsync3.get());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ans: \"</span> + ans.toString());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).join();</span><br></pre></td></tr></table></figure></p>\n<p>輸出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans: supplyAsync <span class=\"number\">1</span>, supplyAsync <span class=\"number\">2</span>, supplyAsync <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>在 <code>allOf</code> 後面串接一個 <code>thenRun</code><br>它的用法很簡單，使用方式與 <code>thenAccept</code> 一樣，差別在於不需要傳入上一個 CompletableFuture 的執行結果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenRun</span><span class=\"params\">(Runnable action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenRunAsync</span><span class=\"params\">(Runnable action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt; <span class=\"title\">thenRunAsync</span><span class=\"params\">(Runnable action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>上述提到的都是全部完成的例子，反過來說我只想要其中一個有完成就往下執行<br>CompletableFuture 也可以做到這點<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">applyToEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"keyword\">super</span> T,U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"keyword\">super</span> T,U&gt; fn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;U&gt; <span class=\"title\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"keyword\">super</span> T,U&gt; fn, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>沒有返回值的 <code>acceptEither</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// basic</span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">acceptEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// use your own thread pool</span></span></span><br><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Void&gt;  <span class=\"title\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action, Executor executor)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>用於多個 CompletableFuture 的 <code>anyOf</code> ，在眾多 CompletableFuture 只需一個完成就可往下執行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">CompletableFuture&lt;Object&gt; <span class=\"title\">anyOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span></span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"從無到有DIY chart (一)","date":"2018-04-01T13:32:41.000Z","_content":"\n目前工作中的前端開發因規範與IE向下相容只能使用es5，要使用比較新的js語法只能透過underscore.js來實現\n但最近看了許多關於es6的資料，想要來練習一下\n若單純練習語法就太無聊了，所以決定使用es6的語法來DIY一個chart\n\n首先使用`class`定義Chart的Object\n在使用es6之前，只能透過擴展prototype達成method共用\n\n```js\n    var Chart = function(){\n        this._canvas;\n    )\n    \n    Chart.prototype = {\n        _init: function(){\n            this._canvas = document.getElementById(this._id);\n        }\n    }\n\n\n```\n\n現在有了`class`就不需要再分開寫了，看起來直覺多了\n\n```js\n    class Chart{\n        constructor(params){\n            this._canvas;\n        }\n        \n        _init(){\n            this._canvas = document.getElementById(this._id);\n        }\n    }\n```\n\n首先初始化canvas，canvas可以想像成是一個畫布，我們必須設定畫布的大小和透過`getContext('2d')`取得渲染環境\n\n```js\n    constructor(params){\n        this._id = params.id;\n        this._canvas;\n        this._canvasWidth;\n        this._canvasHeight;\n        this._ctx;\n\n        this._init();\n    }\n\n    _init(){\n        this._canvas = document.getElementById(this._id);\n        if(!this._canvas.getContext){\n            throw \"can't get canvas context!\";\n        }\n        this._canvasWidth = this._canvas.width;\n        this._canvasHeight = this._canvas.height;\n        this._ctx = this._canvas.getContext('2d');\n    }\n\n\n```\n接著將chart的資料設置到canvas上，因為對於canvas而言原點是從左上角`(0,0)`的座標開始，所以使用原始資料直接打出點的話，會發現會上下相反，所以需要將y軸進行反轉\n\n因為還沒有想到chart要使用哪種顏色，就先使用亂數產生吧...\n```js\n    _initDataSet(){\n        for(const [index, point] of this._matrix.entries()){\n            var reverseY = this._canvasHeight - point[1];\n            this._dataSet.push({\n                index: index,\n                x: point[0],\n                y: reverseY,\n                color: this._randomColor()\n            });\n        }\n    }\n\n    _randomColor(){\n        return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n\n```\n\n我們的chart需要有畫布的外框且資料兩點需要使用直線串連起來\n```js\n    constructor(params){\n        this._LINE_TENSION = 0.2\n        this._LINE_WIDTH_ORI = 2;\n        this._LINE_WIDTH_FOCUS = 5;\n        this._COLOR_GRAY = 'gray';\n        this._COLOR_WHITE = 'white';\n    }\n\n    _initFrame(){\n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n    }\n\n    _initLines(){\n        let prePoint;\n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                prePoint = point;\n                continue;\n            }\n            this._drawLine(prePoint, point);\n            prePoint = point;\n        }\n    }\n\n    draw(){\n        this._initFrame();\n        this._initLines();\n    }\n```\n\n執行一下看看效果\n![chart](/images/chart-diy-001.png)\n\n\n有了簡單的雛形後，接著可以慢慢慢慢進行優化，增加新功能\n\n像現在我想凸顯每個資料點，將點放大，所以需要增加繪製圓形的function\n\n```js\n    _drawCircle(point){\n        this._ctx.lineWidth = point.lineWidth;\n        this._ctx.beginPath();\n        this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n        this._ctx.strokeStyle = point.color;\n        this._ctx.fillStyle  = point.color;\n        this._ctx.fill();\n        this._ctx.stroke();\n    }\n\n    draw(){\n        this._initFrame();\n        this._initLines();\n        this._initCircles();\n    }\n\n```\n執行一下看看效果\n![chart](/images/chart-diy-002.png)\n\n市面上大部份cahrt都可以透過滑鼠去取得最近資料點，所以我們的chart也來要增加此功能\n\n首先在canvas增加mousemove事件，用於取得目前滑鼠的座標，接著算出每個資料點與目前滑鼠之間的距離 (這次參考Flot Charts的做法)\n```js\n    _bindMouseEvent(){\n        const _self = this;\n        this._canvas.addEventListener(\"mousemove\", (event) => {\n            const rect = _self._canvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            _self._findNearPointByMouse({x: x, y: y});\n        });\n    }\n\n    _drawFocusPoint(point){\n        this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n    }\n    \n    _findNearPointByMouse(mousePos){\n        let minDistancePoint;\n        let minDistance = Number.MAX_VALUE;\n        for(var index=0, size= this._dataSet.length; index<size; index++){\n            const currentPos = this._dataSet[index];\n            const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n            \n            if(minDistance > distanceBetweenTwoPoints){\n                minDistancePoint = currentPos;\n                minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n            }\n        }\n        if(!this._preFocusPoint){\n            this._drawFocusPoint(minDistancePoint);\n            this._preFocusPoint = minDistancePoint;\n            return;\n        }\n        /*\n        if pre point isn't self, it's need to render\n        */\n        if(this._preFocusPoint.index !== minDistancePoint.index){\n            this.render();\n            this._drawFocusPoint(minDistancePoint);\n        }\n        this._preFocusPoint = minDistancePoint;\n    }\n    \n    _distance(point1, point2){\n        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n    }\n```\n執行一下看一下效果 (這裡為了顯示實際效果， 所以就直接執行js而不是使用貼圖，瀏覽器必須支援es6才能看見，畢竟沒有透過babel進行轉換)\n{% raw %}\n<html>\n    <head>\n\n    </head>\n    <body>\n        <div align=\"center\">\n            <h2>Chart</h2>\n            <div>\n                <canvas id=\"chart\" width=\"300\" height=\"150\"></canvas>\n            </div>\n        </div>\n    </body>\n</html>\n<script language=\"javascript\">\n    class Chart{\n        constructor(params){\n            this._LINE_TENSION = 0.2\n            this._LINE_WIDTH_ORI = 2;\n            this._LINE_WIDTH_FOCUS = 5;\n            this._COLOR_GRAY = 'gray';\n            this._COLOR_WHITE = 'white';\n            \n            this._id = params.id;\n            this._matrix = params.matrix;\n            this._radius = params.radius;\n            this._dataSet = [];\n            this._curveDataSet = [];\n\n            this._canvas;\n            this._canvasWidth;\n            this._canvasHeight;\n            this._ctx;\n            this._preFocusPoint;\n            \n            this._init();\n        }\n\n        _init(){\n            this._canvas = document.getElementById(this._id);\n            if(!this._canvas.getContext){\n                throw \"can't get canvas context!\";\n            }\n            this._canvasWidth = this._canvas.width;\n            this._canvasHeight = this._canvas.height;\n            this._ctx = this._canvas.getContext('2d');\n            \n            this._initDataSet();\n            this._bindMouseEvent();\n            this.draw();\n        }\n        \n        _initDataSet(){\n            for(const [index, point] of this._matrix.entries()){\n                var reverseY = this._canvasHeight - point[1];\n                this._dataSet.push({\n                    index: index,\n                    x: point[0],\n                    y: reverseY,\n                    color: this._randomColor()\n                });\n            }\n        }\n        \n        _initFrame(){\n            this._drawRect({\n                x: 0,\n                y: 0,\n                width: this._canvasWidth,\n                height: this._canvasHeight,\n                lineWidth: this._LINE_WIDTH_ORI,\n                color: this._COLOR_GRAY\n            });\n        }\n        \n        _initLines(){\n            let prePoint;\n            for(const [index, point] of this._dataSet.entries()){\n                if(index == 0){\n                    prePoint = point;\n                    continue;\n                }\n                this._drawLine(prePoint, point);\n                prePoint = point;\n            }\n        }\n        \n        _initCircles(){\n            const _self = this;\n            this._dataSet.forEach((point) => {\n                _self._drawCircle({\n                    x: point.x, \n                    y: point.y, \n                    radius: _self._radius, \n                    lineWidth: _self._LINE_WIDTH_ORI,\n                    color: point.color\n                });\n            });\n        }\n        \n        _bindMouseEvent(){\n            const _self = this;\n            this._canvas.addEventListener(\"mousemove\", (event) => {\n                const rect = _self._canvas.getBoundingClientRect();\n                const x = event.clientX - rect.left;\n                const y = event.clientY - rect.top;\n                _self._findNearPointByMouse({x: x, y: y});\n            });\n        }\n        \n        _randomColor(){\n            return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n        }\n        \n        _drawRect(params){\n            this._ctx.lineWidth = params.lineWidth;\n            this._ctx.strokeStyle = params.color;\n            this._ctx.beginPath();\n            this._ctx.rect(params.x, params.y, params.width, params.height);\n            this._ctx.stroke();\n        }\n        \n        _drawLine(point1, point2){\n            this._ctx.lineWidth = point2.lineWidth;\n            this._ctx.strokeStyle = point2.color;\n            this._ctx.beginPath();\n            this._ctx.moveTo(point1.x, point1.y);\n            this._ctx.lineTo(point2.x, point2.y);\n            this._ctx.stroke();\n        }\n        \n        _drawCircle(point){\n            this._ctx.lineWidth = point.lineWidth;\n            this._ctx.beginPath();\n            this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n            this._ctx.strokeStyle = point.color;\n            this._ctx.fillStyle  = point.color;\n            this._ctx.fill();\n            this._ctx.stroke();\n        }\n        \n        _drawFocusPoint(point){\n            this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n        }\n        \n        _findNearPointByMouse(mousePos){\n            let minDistancePoint;\n            let minDistance = Number.MAX_VALUE;\n            for(var index=0, size= this._dataSet.length; index<size; index++){\n                const currentPos = this._dataSet[index];\n                const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n                \n                if(minDistance > distanceBetweenTwoPoints){\n                    minDistancePoint = currentPos;\n                    minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n                }\n            }\n            if(!this._preFocusPoint){\n                this._drawFocusPoint(minDistancePoint);\n                this._preFocusPoint = minDistancePoint;\n                return;\n            }\n            /*\n            if pre point isn't self, it need to render\n            */\n            if(this._preFocusPoint.index !== minDistancePoint.index){\n                this.render();\n                this._drawFocusPoint(minDistancePoint);\n            }\n            this._preFocusPoint = minDistancePoint;\n        }\n        \n        _distance(point1, point2){\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        }\n        \n        _clear(){\n            this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n        }\n        \n        /* public */\n        draw(){\n            this._initFrame();\n            this._initLines();\n            this._initCircles();\n        }\n        \n        render(){\n            this._clear();\n            this.draw();\n            console.log('render');\n        }\n    }\n    \n    (function(global){\n        const canvasId = 'chart';\n        const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];\n        const radius = 4;\n        const chart = new Chart({\n            id: canvasId, \n            matrix: matrix,\n            radius: radius\n        });\n        chart.draw();\n        chart.printDataSet();\n        console.log('chart', chart);\n        console.log(chart._id);\n    })(this);\n</script>\n{% endraw %}\n\n以下是完整的程式碼，看起來與java有點像...\n也可以到我[github](https://github.com/HengLin31/chart)上去下載完整的程式碼，今天的練習就到此結束了\n```js\n    class Chart{\n        constructor(params){\n            this._LINE_TENSION = 0.2\n            this._LINE_WIDTH_ORI = 2;\n            this._LINE_WIDTH_FOCUS = 5;\n            this._COLOR_GRAY = 'gray';\n            this._COLOR_WHITE = 'white';\n            \n            this._id = params.id;\n            this._matrix = params.matrix;\n            this._radius = params.radius;\n            this._dataSet = [];\n            this._curveDataSet = [];\n            \n            this._canvas;\n            this._canvasWidth;\n            this._canvasHeight;\n            this._ctx;\n            this._preFocusPoint;\n\n            this._init();\n        }\n\n        _init(){\n            this._canvas = document.getElementById(this._id);\n            if(!this._canvas.getContext){\n                throw \"can't get canvas context!\";\n            }\n            this._canvasWidth = this._canvas.width;\n            this._canvasHeight = this._canvas.height;\n            this._ctx = this._canvas.getContext('2d');\n            \n            this._initDataSet();\n            this._bindMouseEvent();\n            this.draw();\n        }\n\n        _initDataSet(){\n            for(const [index, point] of this._matrix.entries()){\n                var reverseY = this._canvasHeight - point[1];\n                this._dataSet.push({\n                    index: index,\n                    x: point[0],\n                    y: reverseY,\n                    color: this._randomColor()\n                });\n            }\n        }\n    \n        _initFrame(){\n            this._drawRect({\n                x: 0,\n                y: 0,\n                width: this._canvasWidth,\n                height: this._canvasHeight,\n                lineWidth: this._LINE_WIDTH_ORI,\n                color: this._COLOR_GRAY\n            });\n        }\n        \n        _initLines(){\n            let prePoint;\n            for(const [index, point] of this._dataSet.entries()){\n                if(index == 0){\n                    prePoint = point;\n                    continue;\n                }\n                this._drawLine(prePoint, point);\n                prePoint = point;\n            }\n        }\n        \n        _initCircles(){\n            const _self = this;\n            this._dataSet.forEach((point) => {\n                _self._drawCircle({\n                    x: point.x, \n                    y: point.y, \n                    radius: _self._radius, \n                    lineWidth: _self._LINE_WIDTH_ORI,\n                    color: point.color\n                });\n            });\n        }\n        \n        _bindMouseEvent(){\n            const _self = this;\n            this._canvas.addEventListener(\"mousemove\", (event) => {\n                const rect = _self._canvas.getBoundingClientRect();\n                const x = event.clientX - rect.left;\n                const y = event.clientY - rect.top;\n                _self._findNearPointByMouse({x: x, y: y});\n            });\n        }\n        \n        _randomColor(){\n            return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n        }\n        \n        _drawRect(params){\n            this._ctx.lineWidth = params.lineWidth;\n            this._ctx.strokeStyle = params.color;\n            this._ctx.beginPath();\n            this._ctx.rect(params.x, params.y, params.width, params.height);\n            this._ctx.stroke();\n        }\n        \n        _drawLine(point1, point2){\n            this._ctx.lineWidth = point2.lineWidth;\n            this._ctx.strokeStyle = point2.color;\n            this._ctx.beginPath();\n            this._ctx.moveTo(point1.x, point1.y);\n            this._ctx.lineTo(point2.x, point2.y);\n            this._ctx.stroke();\n        }\n        \n        _drawCircle(point){\n            this._ctx.lineWidth = point.lineWidth;\n            this._ctx.beginPath();\n            this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n            this._ctx.strokeStyle = point.color;\n            this._ctx.fillStyle  = point.color;\n            this._ctx.fill();\n            this._ctx.stroke();\n        }\n        \n        _drawFocusPoint(point){\n            this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n        }\n        \n        _findNearPointByMouse(mousePos){\n            let minDistancePoint;\n            let minDistance = Number.MAX_VALUE;\n            for(var index=0, size= this._dataSet.length; index<size; index++){\n                const currentPos = this._dataSet[index];\n                const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n                \n                if(minDistance > distanceBetweenTwoPoints){\n                    minDistancePoint = currentPos;\n                    minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n                }\n            }\n            if(!this._preFocusPoint){\n                this._drawFocusPoint(minDistancePoint);\n                this._preFocusPoint = minDistancePoint;\n                return;\n            }\n            /*\n            if pre point isn't self, it's need to render\n            */\n            if(this._preFocusPoint.index !== minDistancePoint.index){\n                this.render();\n                this._drawFocusPoint(minDistancePoint);\n            }\n            this._preFocusPoint = minDistancePoint;\n        }\n        \n        _distance(point1, point2){\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        }\n        \n        _clear(){\n            this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n        }\n        \n        /* public */\n        draw(){\n            this._initFrame();\n            this._initLines();\n            this._initCircles();\n        }\n        \n        render(){\n            this._clear();\n            this.draw();\n            console.log('render');\n        }\n    } \n```\n\n","source":"_posts/從無到有DIY-chart-一.md","raw":"---\ntitle: 從無到有DIY chart (一)\ndate: 2018-04-01 21:32:41\ntags:\n- js\n---\n\n目前工作中的前端開發因規範與IE向下相容只能使用es5，要使用比較新的js語法只能透過underscore.js來實現\n但最近看了許多關於es6的資料，想要來練習一下\n若單純練習語法就太無聊了，所以決定使用es6的語法來DIY一個chart\n\n首先使用`class`定義Chart的Object\n在使用es6之前，只能透過擴展prototype達成method共用\n\n```js\n    var Chart = function(){\n        this._canvas;\n    )\n    \n    Chart.prototype = {\n        _init: function(){\n            this._canvas = document.getElementById(this._id);\n        }\n    }\n\n\n```\n\n現在有了`class`就不需要再分開寫了，看起來直覺多了\n\n```js\n    class Chart{\n        constructor(params){\n            this._canvas;\n        }\n        \n        _init(){\n            this._canvas = document.getElementById(this._id);\n        }\n    }\n```\n\n首先初始化canvas，canvas可以想像成是一個畫布，我們必須設定畫布的大小和透過`getContext('2d')`取得渲染環境\n\n```js\n    constructor(params){\n        this._id = params.id;\n        this._canvas;\n        this._canvasWidth;\n        this._canvasHeight;\n        this._ctx;\n\n        this._init();\n    }\n\n    _init(){\n        this._canvas = document.getElementById(this._id);\n        if(!this._canvas.getContext){\n            throw \"can't get canvas context!\";\n        }\n        this._canvasWidth = this._canvas.width;\n        this._canvasHeight = this._canvas.height;\n        this._ctx = this._canvas.getContext('2d');\n    }\n\n\n```\n接著將chart的資料設置到canvas上，因為對於canvas而言原點是從左上角`(0,0)`的座標開始，所以使用原始資料直接打出點的話，會發現會上下相反，所以需要將y軸進行反轉\n\n因為還沒有想到chart要使用哪種顏色，就先使用亂數產生吧...\n```js\n    _initDataSet(){\n        for(const [index, point] of this._matrix.entries()){\n            var reverseY = this._canvasHeight - point[1];\n            this._dataSet.push({\n                index: index,\n                x: point[0],\n                y: reverseY,\n                color: this._randomColor()\n            });\n        }\n    }\n\n    _randomColor(){\n        return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n    }\n\n```\n\n我們的chart需要有畫布的外框且資料兩點需要使用直線串連起來\n```js\n    constructor(params){\n        this._LINE_TENSION = 0.2\n        this._LINE_WIDTH_ORI = 2;\n        this._LINE_WIDTH_FOCUS = 5;\n        this._COLOR_GRAY = 'gray';\n        this._COLOR_WHITE = 'white';\n    }\n\n    _initFrame(){\n        this._drawRect({\n            x: 0,\n            y: 0,\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            lineWidth: this._LINE_WIDTH_ORI,\n            color: this._COLOR_GRAY\n        });\n    }\n\n    _initLines(){\n        let prePoint;\n        for(const [index, point] of this._dataSet.entries()){\n            if(index == 0){\n                prePoint = point;\n                continue;\n            }\n            this._drawLine(prePoint, point);\n            prePoint = point;\n        }\n    }\n\n    draw(){\n        this._initFrame();\n        this._initLines();\n    }\n```\n\n執行一下看看效果\n![chart](/images/chart-diy-001.png)\n\n\n有了簡單的雛形後，接著可以慢慢慢慢進行優化，增加新功能\n\n像現在我想凸顯每個資料點，將點放大，所以需要增加繪製圓形的function\n\n```js\n    _drawCircle(point){\n        this._ctx.lineWidth = point.lineWidth;\n        this._ctx.beginPath();\n        this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n        this._ctx.strokeStyle = point.color;\n        this._ctx.fillStyle  = point.color;\n        this._ctx.fill();\n        this._ctx.stroke();\n    }\n\n    draw(){\n        this._initFrame();\n        this._initLines();\n        this._initCircles();\n    }\n\n```\n執行一下看看效果\n![chart](/images/chart-diy-002.png)\n\n市面上大部份cahrt都可以透過滑鼠去取得最近資料點，所以我們的chart也來要增加此功能\n\n首先在canvas增加mousemove事件，用於取得目前滑鼠的座標，接著算出每個資料點與目前滑鼠之間的距離 (這次參考Flot Charts的做法)\n```js\n    _bindMouseEvent(){\n        const _self = this;\n        this._canvas.addEventListener(\"mousemove\", (event) => {\n            const rect = _self._canvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            _self._findNearPointByMouse({x: x, y: y});\n        });\n    }\n\n    _drawFocusPoint(point){\n        this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n    }\n    \n    _findNearPointByMouse(mousePos){\n        let minDistancePoint;\n        let minDistance = Number.MAX_VALUE;\n        for(var index=0, size= this._dataSet.length; index<size; index++){\n            const currentPos = this._dataSet[index];\n            const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n            \n            if(minDistance > distanceBetweenTwoPoints){\n                minDistancePoint = currentPos;\n                minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n            }\n        }\n        if(!this._preFocusPoint){\n            this._drawFocusPoint(minDistancePoint);\n            this._preFocusPoint = minDistancePoint;\n            return;\n        }\n        /*\n        if pre point isn't self, it's need to render\n        */\n        if(this._preFocusPoint.index !== minDistancePoint.index){\n            this.render();\n            this._drawFocusPoint(minDistancePoint);\n        }\n        this._preFocusPoint = minDistancePoint;\n    }\n    \n    _distance(point1, point2){\n        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n    }\n```\n執行一下看一下效果 (這裡為了顯示實際效果， 所以就直接執行js而不是使用貼圖，瀏覽器必須支援es6才能看見，畢竟沒有透過babel進行轉換)\n{% raw %}\n<html>\n    <head>\n\n    </head>\n    <body>\n        <div align=\"center\">\n            <h2>Chart</h2>\n            <div>\n                <canvas id=\"chart\" width=\"300\" height=\"150\"></canvas>\n            </div>\n        </div>\n    </body>\n</html>\n<script language=\"javascript\">\n    class Chart{\n        constructor(params){\n            this._LINE_TENSION = 0.2\n            this._LINE_WIDTH_ORI = 2;\n            this._LINE_WIDTH_FOCUS = 5;\n            this._COLOR_GRAY = 'gray';\n            this._COLOR_WHITE = 'white';\n            \n            this._id = params.id;\n            this._matrix = params.matrix;\n            this._radius = params.radius;\n            this._dataSet = [];\n            this._curveDataSet = [];\n\n            this._canvas;\n            this._canvasWidth;\n            this._canvasHeight;\n            this._ctx;\n            this._preFocusPoint;\n            \n            this._init();\n        }\n\n        _init(){\n            this._canvas = document.getElementById(this._id);\n            if(!this._canvas.getContext){\n                throw \"can't get canvas context!\";\n            }\n            this._canvasWidth = this._canvas.width;\n            this._canvasHeight = this._canvas.height;\n            this._ctx = this._canvas.getContext('2d');\n            \n            this._initDataSet();\n            this._bindMouseEvent();\n            this.draw();\n        }\n        \n        _initDataSet(){\n            for(const [index, point] of this._matrix.entries()){\n                var reverseY = this._canvasHeight - point[1];\n                this._dataSet.push({\n                    index: index,\n                    x: point[0],\n                    y: reverseY,\n                    color: this._randomColor()\n                });\n            }\n        }\n        \n        _initFrame(){\n            this._drawRect({\n                x: 0,\n                y: 0,\n                width: this._canvasWidth,\n                height: this._canvasHeight,\n                lineWidth: this._LINE_WIDTH_ORI,\n                color: this._COLOR_GRAY\n            });\n        }\n        \n        _initLines(){\n            let prePoint;\n            for(const [index, point] of this._dataSet.entries()){\n                if(index == 0){\n                    prePoint = point;\n                    continue;\n                }\n                this._drawLine(prePoint, point);\n                prePoint = point;\n            }\n        }\n        \n        _initCircles(){\n            const _self = this;\n            this._dataSet.forEach((point) => {\n                _self._drawCircle({\n                    x: point.x, \n                    y: point.y, \n                    radius: _self._radius, \n                    lineWidth: _self._LINE_WIDTH_ORI,\n                    color: point.color\n                });\n            });\n        }\n        \n        _bindMouseEvent(){\n            const _self = this;\n            this._canvas.addEventListener(\"mousemove\", (event) => {\n                const rect = _self._canvas.getBoundingClientRect();\n                const x = event.clientX - rect.left;\n                const y = event.clientY - rect.top;\n                _self._findNearPointByMouse({x: x, y: y});\n            });\n        }\n        \n        _randomColor(){\n            return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n        }\n        \n        _drawRect(params){\n            this._ctx.lineWidth = params.lineWidth;\n            this._ctx.strokeStyle = params.color;\n            this._ctx.beginPath();\n            this._ctx.rect(params.x, params.y, params.width, params.height);\n            this._ctx.stroke();\n        }\n        \n        _drawLine(point1, point2){\n            this._ctx.lineWidth = point2.lineWidth;\n            this._ctx.strokeStyle = point2.color;\n            this._ctx.beginPath();\n            this._ctx.moveTo(point1.x, point1.y);\n            this._ctx.lineTo(point2.x, point2.y);\n            this._ctx.stroke();\n        }\n        \n        _drawCircle(point){\n            this._ctx.lineWidth = point.lineWidth;\n            this._ctx.beginPath();\n            this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n            this._ctx.strokeStyle = point.color;\n            this._ctx.fillStyle  = point.color;\n            this._ctx.fill();\n            this._ctx.stroke();\n        }\n        \n        _drawFocusPoint(point){\n            this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n        }\n        \n        _findNearPointByMouse(mousePos){\n            let minDistancePoint;\n            let minDistance = Number.MAX_VALUE;\n            for(var index=0, size= this._dataSet.length; index<size; index++){\n                const currentPos = this._dataSet[index];\n                const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n                \n                if(minDistance > distanceBetweenTwoPoints){\n                    minDistancePoint = currentPos;\n                    minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n                }\n            }\n            if(!this._preFocusPoint){\n                this._drawFocusPoint(minDistancePoint);\n                this._preFocusPoint = minDistancePoint;\n                return;\n            }\n            /*\n            if pre point isn't self, it need to render\n            */\n            if(this._preFocusPoint.index !== minDistancePoint.index){\n                this.render();\n                this._drawFocusPoint(minDistancePoint);\n            }\n            this._preFocusPoint = minDistancePoint;\n        }\n        \n        _distance(point1, point2){\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        }\n        \n        _clear(){\n            this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n        }\n        \n        /* public */\n        draw(){\n            this._initFrame();\n            this._initLines();\n            this._initCircles();\n        }\n        \n        render(){\n            this._clear();\n            this.draw();\n            console.log('render');\n        }\n    }\n    \n    (function(global){\n        const canvasId = 'chart';\n        const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];\n        const radius = 4;\n        const chart = new Chart({\n            id: canvasId, \n            matrix: matrix,\n            radius: radius\n        });\n        chart.draw();\n        chart.printDataSet();\n        console.log('chart', chart);\n        console.log(chart._id);\n    })(this);\n</script>\n{% endraw %}\n\n以下是完整的程式碼，看起來與java有點像...\n也可以到我[github](https://github.com/HengLin31/chart)上去下載完整的程式碼，今天的練習就到此結束了\n```js\n    class Chart{\n        constructor(params){\n            this._LINE_TENSION = 0.2\n            this._LINE_WIDTH_ORI = 2;\n            this._LINE_WIDTH_FOCUS = 5;\n            this._COLOR_GRAY = 'gray';\n            this._COLOR_WHITE = 'white';\n            \n            this._id = params.id;\n            this._matrix = params.matrix;\n            this._radius = params.radius;\n            this._dataSet = [];\n            this._curveDataSet = [];\n            \n            this._canvas;\n            this._canvasWidth;\n            this._canvasHeight;\n            this._ctx;\n            this._preFocusPoint;\n\n            this._init();\n        }\n\n        _init(){\n            this._canvas = document.getElementById(this._id);\n            if(!this._canvas.getContext){\n                throw \"can't get canvas context!\";\n            }\n            this._canvasWidth = this._canvas.width;\n            this._canvasHeight = this._canvas.height;\n            this._ctx = this._canvas.getContext('2d');\n            \n            this._initDataSet();\n            this._bindMouseEvent();\n            this.draw();\n        }\n\n        _initDataSet(){\n            for(const [index, point] of this._matrix.entries()){\n                var reverseY = this._canvasHeight - point[1];\n                this._dataSet.push({\n                    index: index,\n                    x: point[0],\n                    y: reverseY,\n                    color: this._randomColor()\n                });\n            }\n        }\n    \n        _initFrame(){\n            this._drawRect({\n                x: 0,\n                y: 0,\n                width: this._canvasWidth,\n                height: this._canvasHeight,\n                lineWidth: this._LINE_WIDTH_ORI,\n                color: this._COLOR_GRAY\n            });\n        }\n        \n        _initLines(){\n            let prePoint;\n            for(const [index, point] of this._dataSet.entries()){\n                if(index == 0){\n                    prePoint = point;\n                    continue;\n                }\n                this._drawLine(prePoint, point);\n                prePoint = point;\n            }\n        }\n        \n        _initCircles(){\n            const _self = this;\n            this._dataSet.forEach((point) => {\n                _self._drawCircle({\n                    x: point.x, \n                    y: point.y, \n                    radius: _self._radius, \n                    lineWidth: _self._LINE_WIDTH_ORI,\n                    color: point.color\n                });\n            });\n        }\n        \n        _bindMouseEvent(){\n            const _self = this;\n            this._canvas.addEventListener(\"mousemove\", (event) => {\n                const rect = _self._canvas.getBoundingClientRect();\n                const x = event.clientX - rect.left;\n                const y = event.clientY - rect.top;\n                _self._findNearPointByMouse({x: x, y: y});\n            });\n        }\n        \n        _randomColor(){\n            return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n        }\n        \n        _drawRect(params){\n            this._ctx.lineWidth = params.lineWidth;\n            this._ctx.strokeStyle = params.color;\n            this._ctx.beginPath();\n            this._ctx.rect(params.x, params.y, params.width, params.height);\n            this._ctx.stroke();\n        }\n        \n        _drawLine(point1, point2){\n            this._ctx.lineWidth = point2.lineWidth;\n            this._ctx.strokeStyle = point2.color;\n            this._ctx.beginPath();\n            this._ctx.moveTo(point1.x, point1.y);\n            this._ctx.lineTo(point2.x, point2.y);\n            this._ctx.stroke();\n        }\n        \n        _drawCircle(point){\n            this._ctx.lineWidth = point.lineWidth;\n            this._ctx.beginPath();\n            this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n            this._ctx.strokeStyle = point.color;\n            this._ctx.fillStyle  = point.color;\n            this._ctx.fill();\n            this._ctx.stroke();\n        }\n        \n        _drawFocusPoint(point){\n            this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n        }\n        \n        _findNearPointByMouse(mousePos){\n            let minDistancePoint;\n            let minDistance = Number.MAX_VALUE;\n            for(var index=0, size= this._dataSet.length; index<size; index++){\n                const currentPos = this._dataSet[index];\n                const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n                \n                if(minDistance > distanceBetweenTwoPoints){\n                    minDistancePoint = currentPos;\n                    minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n                }\n            }\n            if(!this._preFocusPoint){\n                this._drawFocusPoint(minDistancePoint);\n                this._preFocusPoint = minDistancePoint;\n                return;\n            }\n            /*\n            if pre point isn't self, it's need to render\n            */\n            if(this._preFocusPoint.index !== minDistancePoint.index){\n                this.render();\n                this._drawFocusPoint(minDistancePoint);\n            }\n            this._preFocusPoint = minDistancePoint;\n        }\n        \n        _distance(point1, point2){\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        }\n        \n        _clear(){\n            this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n        }\n        \n        /* public */\n        draw(){\n            this._initFrame();\n            this._initLines();\n            this._initCircles();\n        }\n        \n        render(){\n            this._clear();\n            this.draw();\n            console.log('render');\n        }\n    } \n```\n\n","slug":"從無到有DIY-chart-一","published":1,"updated":"2020-01-21T16:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki16mr6m003e0rpj1t230p6p","content":"<p>目前工作中的前端開發因規範與IE向下相容只能使用es5，要使用比較新的js語法只能透過underscore.js來實現<br>但最近看了許多關於es6的資料，想要來練習一下<br>若單純練習語法就太無聊了，所以決定使用es6的語法來DIY一個chart</p>\n<p>首先使用<code>class</code>定義Chart的Object<br>在使用es6之前，只能透過擴展prototype達成method共用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Chart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvas;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">Chart.prototype = &#123;</span><br><span class=\"line\">    _init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>._id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>現在有了<code>class</code>就不需要再分開寫了，看起來直覺多了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(params)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _init()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>._id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先初始化canvas，canvas可以想像成是一個畫布，我們必須設定畫布的大小和透過<code>getContext(&#39;2d&#39;)</code>取得渲染環境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(params)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._id = params.id;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvas;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvasWidth;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvasHeight;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._init();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_init()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>._id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>._canvas.getContext)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">\"can't get canvas context!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvasWidth = <span class=\"keyword\">this</span>._canvas.width;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvasHeight = <span class=\"keyword\">this</span>._canvas.height;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx = <span class=\"keyword\">this</span>._canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接著將chart的資料設置到canvas上，因為對於canvas而言原點是從左上角<code>(0,0)</code>的座標開始，所以使用原始資料直接打出點的話，會發現會上下相反，所以需要將y軸進行反轉</p>\n<p>因為還沒有想到chart要使用哪種顏色，就先使用亂數產生吧…<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_initDataSet()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._matrix.entries())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reverseY = <span class=\"keyword\">this</span>._canvasHeight - point[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._dataSet.push(&#123;</span><br><span class=\"line\">            index: index,</span><br><span class=\"line\">            x: point[<span class=\"number\">0</span>],</span><br><span class=\"line\">            y: reverseY,</span><br><span class=\"line\">            color: <span class=\"keyword\">this</span>._randomColor()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_randomColor()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + (<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xFFFFFF</span> &lt;&lt; <span class=\"number\">0</span>).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我們的chart需要有畫布的外框且資料兩點需要使用直線串連起來<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(params)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._LINE_TENSION = <span class=\"number\">0.2</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._LINE_WIDTH_ORI = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._LINE_WIDTH_FOCUS = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._COLOR_GRAY = <span class=\"string\">'gray'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._COLOR_WHITE = <span class=\"string\">'white'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_initFrame()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._drawRect(&#123;</span><br><span class=\"line\">        x: <span class=\"number\">0</span>,</span><br><span class=\"line\">        y: <span class=\"number\">0</span>,</span><br><span class=\"line\">        width: <span class=\"keyword\">this</span>._canvasWidth,</span><br><span class=\"line\">        height: <span class=\"keyword\">this</span>._canvasHeight,</span><br><span class=\"line\">        lineWidth: <span class=\"keyword\">this</span>._LINE_WIDTH_ORI,</span><br><span class=\"line\">        color: <span class=\"keyword\">this</span>._COLOR_GRAY</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_initLines()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prePoint;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._dataSet.entries())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            prePoint = point;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawLine(prePoint, point);</span><br><span class=\"line\">        prePoint = point;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">draw()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initFrame();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initLines();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>執行一下看看效果<br><img src=\"/images/chart-diy-001.png\" alt=\"chart\"></p>\n<p>有了簡單的雛形後，接著可以慢慢慢慢進行優化，增加新功能</p>\n<p>像現在我想凸顯每個資料點，將點放大，所以需要增加繪製圓形的function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_drawCircle(point)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.lineWidth = point.lineWidth;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.beginPath();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.arc(point.x, point.y, point.radius, <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.strokeStyle = point.color;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.fillStyle  = point.color;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.fill();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.stroke();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">draw()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initFrame();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initLines();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initCircles();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>執行一下看看效果<br><img src=\"/images/chart-diy-002.png\" alt=\"chart\"></p>\n<p>市面上大部份cahrt都可以透過滑鼠去取得最近資料點，所以我們的chart也來要增加此功能</p>\n<p>首先在canvas增加mousemove事件，用於取得目前滑鼠的座標，接著算出每個資料點與目前滑鼠之間的距離 (這次參考Flot Charts的做法)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_bindMouseEvent()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvas.addEventListener(<span class=\"string\">\"mousemove\"</span>, (event) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rect = _self._canvas.getBoundingClientRect();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> x = event.clientX - rect.left;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> y = event.clientY - rect.top;</span><br><span class=\"line\">        _self._findNearPointByMouse(&#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_drawFocusPoint(point)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._drawCircle(&#123;<span class=\"attr\">x</span>: point.x, <span class=\"attr\">y</span>: point.y, <span class=\"attr\">radius</span>: <span class=\"keyword\">this</span>._radius, <span class=\"attr\">lineWidth</span>: <span class=\"keyword\">this</span>._LINE_WIDTH_FOCUS, <span class=\"attr\">color</span>: point.color&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_findNearPointByMouse(mousePos)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> minDistancePoint;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> minDistance = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index=<span class=\"number\">0</span>, size= <span class=\"keyword\">this</span>._dataSet.length; index&lt;size; index++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentPos = <span class=\"keyword\">this</span>._dataSet[index];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> distanceBetweenTwoPoints = <span class=\"keyword\">this</span>._distance(currentPos, mousePos);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(minDistance &gt; distanceBetweenTwoPoints)&#123;</span><br><span class=\"line\">            minDistancePoint = currentPos;</span><br><span class=\"line\">            minDistance = <span class=\"built_in\">Math</span>.min(minDistance, distanceBetweenTwoPoints);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>._preFocusPoint)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._preFocusPoint = minDistancePoint;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    if pre point isn't self, it's need to render</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._preFocusPoint.index !== minDistancePoint.index)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.render();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._preFocusPoint = minDistancePoint;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_distance(point1, point2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">Math</span>.pow(point1.x - point2.x, <span class=\"number\">2</span>) + <span class=\"built_in\">Math</span>.pow(point1.y - point2.y, <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>執行一下看一下效果 (這裡為了顯示實際效果， 所以就直接執行js而不是使用貼圖，瀏覽器必須支援es6才能看見，畢竟沒有透過babel進行轉換)<br>\n<html>\n    <head>\n\n    </head>\n    <body>\n        <div align=\"center\">\n            <h2>Chart</h2>\n            <div>\n                <canvas id=\"chart\" width=\"300\" height=\"150\"></canvas>\n            </div>\n        </div>\n    </body>\n</html>\n<script language=\"javascript\">\n    class Chart{\n        constructor(params){\n            this._LINE_TENSION = 0.2\n            this._LINE_WIDTH_ORI = 2;\n            this._LINE_WIDTH_FOCUS = 5;\n            this._COLOR_GRAY = 'gray';\n            this._COLOR_WHITE = 'white';\n            \n            this._id = params.id;\n            this._matrix = params.matrix;\n            this._radius = params.radius;\n            this._dataSet = [];\n            this._curveDataSet = [];\n\n            this._canvas;\n            this._canvasWidth;\n            this._canvasHeight;\n            this._ctx;\n            this._preFocusPoint;\n            \n            this._init();\n        }\n\n        _init(){\n            this._canvas = document.getElementById(this._id);\n            if(!this._canvas.getContext){\n                throw \"can't get canvas context!\";\n            }\n            this._canvasWidth = this._canvas.width;\n            this._canvasHeight = this._canvas.height;\n            this._ctx = this._canvas.getContext('2d');\n            \n            this._initDataSet();\n            this._bindMouseEvent();\n            this.draw();\n        }\n        \n        _initDataSet(){\n            for(const [index, point] of this._matrix.entries()){\n                var reverseY = this._canvasHeight - point[1];\n                this._dataSet.push({\n                    index: index,\n                    x: point[0],\n                    y: reverseY,\n                    color: this._randomColor()\n                });\n            }\n        }\n        \n        _initFrame(){\n            this._drawRect({\n                x: 0,\n                y: 0,\n                width: this._canvasWidth,\n                height: this._canvasHeight,\n                lineWidth: this._LINE_WIDTH_ORI,\n                color: this._COLOR_GRAY\n            });\n        }\n        \n        _initLines(){\n            let prePoint;\n            for(const [index, point] of this._dataSet.entries()){\n                if(index == 0){\n                    prePoint = point;\n                    continue;\n                }\n                this._drawLine(prePoint, point);\n                prePoint = point;\n            }\n        }\n        \n        _initCircles(){\n            const _self = this;\n            this._dataSet.forEach((point) => {\n                _self._drawCircle({\n                    x: point.x, \n                    y: point.y, \n                    radius: _self._radius, \n                    lineWidth: _self._LINE_WIDTH_ORI,\n                    color: point.color\n                });\n            });\n        }\n        \n        _bindMouseEvent(){\n            const _self = this;\n            this._canvas.addEventListener(\"mousemove\", (event) => {\n                const rect = _self._canvas.getBoundingClientRect();\n                const x = event.clientX - rect.left;\n                const y = event.clientY - rect.top;\n                _self._findNearPointByMouse({x: x, y: y});\n            });\n        }\n        \n        _randomColor(){\n            return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n        }\n        \n        _drawRect(params){\n            this._ctx.lineWidth = params.lineWidth;\n            this._ctx.strokeStyle = params.color;\n            this._ctx.beginPath();\n            this._ctx.rect(params.x, params.y, params.width, params.height);\n            this._ctx.stroke();\n        }\n        \n        _drawLine(point1, point2){\n            this._ctx.lineWidth = point2.lineWidth;\n            this._ctx.strokeStyle = point2.color;\n            this._ctx.beginPath();\n            this._ctx.moveTo(point1.x, point1.y);\n            this._ctx.lineTo(point2.x, point2.y);\n            this._ctx.stroke();\n        }\n        \n        _drawCircle(point){\n            this._ctx.lineWidth = point.lineWidth;\n            this._ctx.beginPath();\n            this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n            this._ctx.strokeStyle = point.color;\n            this._ctx.fillStyle  = point.color;\n            this._ctx.fill();\n            this._ctx.stroke();\n        }\n        \n        _drawFocusPoint(point){\n            this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n        }\n        \n        _findNearPointByMouse(mousePos){\n            let minDistancePoint;\n            let minDistance = Number.MAX_VALUE;\n            for(var index=0, size= this._dataSet.length; index<size; index++){\n                const currentPos = this._dataSet[index];\n                const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n                \n                if(minDistance > distanceBetweenTwoPoints){\n                    minDistancePoint = currentPos;\n                    minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n                }\n            }\n            if(!this._preFocusPoint){\n                this._drawFocusPoint(minDistancePoint);\n                this._preFocusPoint = minDistancePoint;\n                return;\n            }\n            /*\n            if pre point isn't self, it need to render\n            */\n            if(this._preFocusPoint.index !== minDistancePoint.index){\n                this.render();\n                this._drawFocusPoint(minDistancePoint);\n            }\n            this._preFocusPoint = minDistancePoint;\n        }\n        \n        _distance(point1, point2){\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        }\n        \n        _clear(){\n            this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n        }\n        \n        /* public */\n        draw(){\n            this._initFrame();\n            this._initLines();\n            this._initCircles();\n        }\n        \n        render(){\n            this._clear();\n            this.draw();\n            console.log('render');\n        }\n    }\n    \n    (function(global){\n        const canvasId = 'chart';\n        const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];\n        const radius = 4;\n        const chart = new Chart({\n            id: canvasId, \n            matrix: matrix,\n            radius: radius\n        });\n        chart.draw();\n        chart.printDataSet();\n        console.log('chart', chart);\n        console.log(chart._id);\n    })(this);\n</script>\n</p>\n<p>以下是完整的程式碼，看起來與java有點像…<br>也可以到我<a href=\"https://github.com/HengLin31/chart\" target=\"_blank\" rel=\"noopener\">github</a>上去下載完整的程式碼，今天的練習就到此結束了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(params)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._LINE_TENSION = <span class=\"number\">0.2</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._LINE_WIDTH_ORI = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._LINE_WIDTH_FOCUS = <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._COLOR_GRAY = <span class=\"string\">'gray'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._COLOR_WHITE = <span class=\"string\">'white'</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._id = params.id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._matrix = params.matrix;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._radius = params.radius;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._dataSet = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._curveDataSet = [];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvasWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvasHeight;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._preFocusPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _init()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>._id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>._canvas.getContext)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">\"can't get canvas context!\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvasWidth = <span class=\"keyword\">this</span>._canvas.width;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvasHeight = <span class=\"keyword\">this</span>._canvas.height;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx = <span class=\"keyword\">this</span>._canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initDataSet();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._bindMouseEvent();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _initDataSet()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._matrix.entries())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> reverseY = <span class=\"keyword\">this</span>._canvasHeight - point[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._dataSet.push(&#123;</span><br><span class=\"line\">                index: index,</span><br><span class=\"line\">                x: point[<span class=\"number\">0</span>],</span><br><span class=\"line\">                y: reverseY,</span><br><span class=\"line\">                color: <span class=\"keyword\">this</span>._randomColor()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _initFrame()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawRect(&#123;</span><br><span class=\"line\">            x: <span class=\"number\">0</span>,</span><br><span class=\"line\">            y: <span class=\"number\">0</span>,</span><br><span class=\"line\">            width: <span class=\"keyword\">this</span>._canvasWidth,</span><br><span class=\"line\">            height: <span class=\"keyword\">this</span>._canvasHeight,</span><br><span class=\"line\">            lineWidth: <span class=\"keyword\">this</span>._LINE_WIDTH_ORI,</span><br><span class=\"line\">            color: <span class=\"keyword\">this</span>._COLOR_GRAY</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _initLines()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> prePoint;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._dataSet.entries())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                prePoint = point;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._drawLine(prePoint, point);</span><br><span class=\"line\">            prePoint = point;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _initCircles()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._dataSet.forEach(<span class=\"function\">(<span class=\"params\">point</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            _self._drawCircle(&#123;</span><br><span class=\"line\">                x: point.x, </span><br><span class=\"line\">                y: point.y, </span><br><span class=\"line\">                radius: _self._radius, </span><br><span class=\"line\">                lineWidth: _self._LINE_WIDTH_ORI,</span><br><span class=\"line\">                color: point.color</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _bindMouseEvent()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas.addEventListener(<span class=\"string\">\"mousemove\"</span>, (event) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> rect = _self._canvas.getBoundingClientRect();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> x = event.clientX - rect.left;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> y = event.clientY - rect.top;</span><br><span class=\"line\">            _self._findNearPointByMouse(&#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _randomColor()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + (<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xFFFFFF</span> &lt;&lt; <span class=\"number\">0</span>).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _drawRect(params)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.lineWidth = params.lineWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.strokeStyle = params.color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.beginPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.rect(params.x, params.y, params.width, params.height);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _drawLine(point1, point2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.lineWidth = point2.lineWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.strokeStyle = point2.color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.beginPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.moveTo(point1.x, point1.y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.lineTo(point2.x, point2.y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _drawCircle(point)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.lineWidth = point.lineWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.beginPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.arc(point.x, point.y, point.radius, <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.strokeStyle = point.color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.fillStyle  = point.color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.fill();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _drawFocusPoint(point)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawCircle(&#123;<span class=\"attr\">x</span>: point.x, <span class=\"attr\">y</span>: point.y, <span class=\"attr\">radius</span>: <span class=\"keyword\">this</span>._radius, <span class=\"attr\">lineWidth</span>: <span class=\"keyword\">this</span>._LINE_WIDTH_FOCUS, <span class=\"attr\">color</span>: point.color&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _findNearPointByMouse(mousePos)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> minDistancePoint;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> minDistance = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index=<span class=\"number\">0</span>, size= <span class=\"keyword\">this</span>._dataSet.length; index&lt;size; index++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> currentPos = <span class=\"keyword\">this</span>._dataSet[index];</span><br><span class=\"line\">            <span class=\"keyword\">const</span> distanceBetweenTwoPoints = <span class=\"keyword\">this</span>._distance(currentPos, mousePos);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(minDistance &gt; distanceBetweenTwoPoints)&#123;</span><br><span class=\"line\">                minDistancePoint = currentPos;</span><br><span class=\"line\">                minDistance = <span class=\"built_in\">Math</span>.min(minDistance, distanceBetweenTwoPoints);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>._preFocusPoint)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._preFocusPoint = minDistancePoint;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        if pre point isn't self, it's need to render</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._preFocusPoint.index !== minDistancePoint.index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.render();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._preFocusPoint = minDistancePoint;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _distance(point1, point2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">Math</span>.pow(point1.x - point2.x, <span class=\"number\">2</span>) + <span class=\"built_in\">Math</span>.pow(point1.y - point2.y, <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _clear()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>._canvasWidth, <span class=\"keyword\">this</span>._canvasHeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* public */</span></span><br><span class=\"line\">    draw()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initFrame();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initLines();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initCircles();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._clear();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.draw();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>目前工作中的前端開發因規範與IE向下相容只能使用es5，要使用比較新的js語法只能透過underscore.js來實現<br>但最近看了許多關於es6的資料，想要來練習一下<br>若單純練習語法就太無聊了，所以決定使用es6的語法來DIY一個chart</p>\n<p>首先使用<code>class</code>定義Chart的Object<br>在使用es6之前，只能透過擴展prototype達成method共用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Chart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvas;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">Chart.prototype = &#123;</span><br><span class=\"line\">    _init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>._id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>現在有了<code>class</code>就不需要再分開寫了，看起來直覺多了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(params)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _init()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>._id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先初始化canvas，canvas可以想像成是一個畫布，我們必須設定畫布的大小和透過<code>getContext(&#39;2d&#39;)</code>取得渲染環境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(params)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._id = params.id;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvas;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvasWidth;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvasHeight;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._init();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_init()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>._id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>._canvas.getContext)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">\"can't get canvas context!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvasWidth = <span class=\"keyword\">this</span>._canvas.width;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvasHeight = <span class=\"keyword\">this</span>._canvas.height;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx = <span class=\"keyword\">this</span>._canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接著將chart的資料設置到canvas上，因為對於canvas而言原點是從左上角<code>(0,0)</code>的座標開始，所以使用原始資料直接打出點的話，會發現會上下相反，所以需要將y軸進行反轉</p>\n<p>因為還沒有想到chart要使用哪種顏色，就先使用亂數產生吧…<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_initDataSet()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._matrix.entries())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reverseY = <span class=\"keyword\">this</span>._canvasHeight - point[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._dataSet.push(&#123;</span><br><span class=\"line\">            index: index,</span><br><span class=\"line\">            x: point[<span class=\"number\">0</span>],</span><br><span class=\"line\">            y: reverseY,</span><br><span class=\"line\">            color: <span class=\"keyword\">this</span>._randomColor()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_randomColor()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + (<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xFFFFFF</span> &lt;&lt; <span class=\"number\">0</span>).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我們的chart需要有畫布的外框且資料兩點需要使用直線串連起來<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(params)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._LINE_TENSION = <span class=\"number\">0.2</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._LINE_WIDTH_ORI = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._LINE_WIDTH_FOCUS = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._COLOR_GRAY = <span class=\"string\">'gray'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._COLOR_WHITE = <span class=\"string\">'white'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_initFrame()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._drawRect(&#123;</span><br><span class=\"line\">        x: <span class=\"number\">0</span>,</span><br><span class=\"line\">        y: <span class=\"number\">0</span>,</span><br><span class=\"line\">        width: <span class=\"keyword\">this</span>._canvasWidth,</span><br><span class=\"line\">        height: <span class=\"keyword\">this</span>._canvasHeight,</span><br><span class=\"line\">        lineWidth: <span class=\"keyword\">this</span>._LINE_WIDTH_ORI,</span><br><span class=\"line\">        color: <span class=\"keyword\">this</span>._COLOR_GRAY</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_initLines()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prePoint;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._dataSet.entries())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            prePoint = point;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawLine(prePoint, point);</span><br><span class=\"line\">        prePoint = point;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">draw()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initFrame();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initLines();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>執行一下看看效果<br><img src=\"/images/chart-diy-001.png\" alt=\"chart\"></p>\n<p>有了簡單的雛形後，接著可以慢慢慢慢進行優化，增加新功能</p>\n<p>像現在我想凸顯每個資料點，將點放大，所以需要增加繪製圓形的function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_drawCircle(point)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.lineWidth = point.lineWidth;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.beginPath();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.arc(point.x, point.y, point.radius, <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.strokeStyle = point.color;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.fillStyle  = point.color;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.fill();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._ctx.stroke();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">draw()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initFrame();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initLines();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._initCircles();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>執行一下看看效果<br><img src=\"/images/chart-diy-002.png\" alt=\"chart\"></p>\n<p>市面上大部份cahrt都可以透過滑鼠去取得最近資料點，所以我們的chart也來要增加此功能</p>\n<p>首先在canvas增加mousemove事件，用於取得目前滑鼠的座標，接著算出每個資料點與目前滑鼠之間的距離 (這次參考Flot Charts的做法)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_bindMouseEvent()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._canvas.addEventListener(<span class=\"string\">\"mousemove\"</span>, (event) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rect = _self._canvas.getBoundingClientRect();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> x = event.clientX - rect.left;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> y = event.clientY - rect.top;</span><br><span class=\"line\">        _self._findNearPointByMouse(&#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_drawFocusPoint(point)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._drawCircle(&#123;<span class=\"attr\">x</span>: point.x, <span class=\"attr\">y</span>: point.y, <span class=\"attr\">radius</span>: <span class=\"keyword\">this</span>._radius, <span class=\"attr\">lineWidth</span>: <span class=\"keyword\">this</span>._LINE_WIDTH_FOCUS, <span class=\"attr\">color</span>: point.color&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_findNearPointByMouse(mousePos)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> minDistancePoint;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> minDistance = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index=<span class=\"number\">0</span>, size= <span class=\"keyword\">this</span>._dataSet.length; index&lt;size; index++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentPos = <span class=\"keyword\">this</span>._dataSet[index];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> distanceBetweenTwoPoints = <span class=\"keyword\">this</span>._distance(currentPos, mousePos);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(minDistance &gt; distanceBetweenTwoPoints)&#123;</span><br><span class=\"line\">            minDistancePoint = currentPos;</span><br><span class=\"line\">            minDistance = <span class=\"built_in\">Math</span>.min(minDistance, distanceBetweenTwoPoints);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>._preFocusPoint)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._preFocusPoint = minDistancePoint;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    if pre point isn't self, it's need to render</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._preFocusPoint.index !== minDistancePoint.index)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.render();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._preFocusPoint = minDistancePoint;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_distance(point1, point2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">Math</span>.pow(point1.x - point2.x, <span class=\"number\">2</span>) + <span class=\"built_in\">Math</span>.pow(point1.y - point2.y, <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>執行一下看一下效果 (這裡為了顯示實際效果， 所以就直接執行js而不是使用貼圖，瀏覽器必須支援es6才能看見，畢竟沒有透過babel進行轉換)<br>\n<html>\n    <head>\n\n    </head>\n    <body>\n        <div align=\"center\">\n            <h2>Chart</h2>\n            <div>\n                <canvas id=\"chart\" width=\"300\" height=\"150\"></canvas>\n            </div>\n        </div>\n    </body>\n</html>\n<script language=\"javascript\">\n    class Chart{\n        constructor(params){\n            this._LINE_TENSION = 0.2\n            this._LINE_WIDTH_ORI = 2;\n            this._LINE_WIDTH_FOCUS = 5;\n            this._COLOR_GRAY = 'gray';\n            this._COLOR_WHITE = 'white';\n            \n            this._id = params.id;\n            this._matrix = params.matrix;\n            this._radius = params.radius;\n            this._dataSet = [];\n            this._curveDataSet = [];\n\n            this._canvas;\n            this._canvasWidth;\n            this._canvasHeight;\n            this._ctx;\n            this._preFocusPoint;\n            \n            this._init();\n        }\n\n        _init(){\n            this._canvas = document.getElementById(this._id);\n            if(!this._canvas.getContext){\n                throw \"can't get canvas context!\";\n            }\n            this._canvasWidth = this._canvas.width;\n            this._canvasHeight = this._canvas.height;\n            this._ctx = this._canvas.getContext('2d');\n            \n            this._initDataSet();\n            this._bindMouseEvent();\n            this.draw();\n        }\n        \n        _initDataSet(){\n            for(const [index, point] of this._matrix.entries()){\n                var reverseY = this._canvasHeight - point[1];\n                this._dataSet.push({\n                    index: index,\n                    x: point[0],\n                    y: reverseY,\n                    color: this._randomColor()\n                });\n            }\n        }\n        \n        _initFrame(){\n            this._drawRect({\n                x: 0,\n                y: 0,\n                width: this._canvasWidth,\n                height: this._canvasHeight,\n                lineWidth: this._LINE_WIDTH_ORI,\n                color: this._COLOR_GRAY\n            });\n        }\n        \n        _initLines(){\n            let prePoint;\n            for(const [index, point] of this._dataSet.entries()){\n                if(index == 0){\n                    prePoint = point;\n                    continue;\n                }\n                this._drawLine(prePoint, point);\n                prePoint = point;\n            }\n        }\n        \n        _initCircles(){\n            const _self = this;\n            this._dataSet.forEach((point) => {\n                _self._drawCircle({\n                    x: point.x, \n                    y: point.y, \n                    radius: _self._radius, \n                    lineWidth: _self._LINE_WIDTH_ORI,\n                    color: point.color\n                });\n            });\n        }\n        \n        _bindMouseEvent(){\n            const _self = this;\n            this._canvas.addEventListener(\"mousemove\", (event) => {\n                const rect = _self._canvas.getBoundingClientRect();\n                const x = event.clientX - rect.left;\n                const y = event.clientY - rect.top;\n                _self._findNearPointByMouse({x: x, y: y});\n            });\n        }\n        \n        _randomColor(){\n            return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n        }\n        \n        _drawRect(params){\n            this._ctx.lineWidth = params.lineWidth;\n            this._ctx.strokeStyle = params.color;\n            this._ctx.beginPath();\n            this._ctx.rect(params.x, params.y, params.width, params.height);\n            this._ctx.stroke();\n        }\n        \n        _drawLine(point1, point2){\n            this._ctx.lineWidth = point2.lineWidth;\n            this._ctx.strokeStyle = point2.color;\n            this._ctx.beginPath();\n            this._ctx.moveTo(point1.x, point1.y);\n            this._ctx.lineTo(point2.x, point2.y);\n            this._ctx.stroke();\n        }\n        \n        _drawCircle(point){\n            this._ctx.lineWidth = point.lineWidth;\n            this._ctx.beginPath();\n            this._ctx.arc(point.x, point.y, point.radius, 0, 2 * Math.PI);\n            this._ctx.strokeStyle = point.color;\n            this._ctx.fillStyle  = point.color;\n            this._ctx.fill();\n            this._ctx.stroke();\n        }\n        \n        _drawFocusPoint(point){\n            this._drawCircle({x: point.x, y: point.y, radius: this._radius, lineWidth: this._LINE_WIDTH_FOCUS, color: point.color});\n        }\n        \n        _findNearPointByMouse(mousePos){\n            let minDistancePoint;\n            let minDistance = Number.MAX_VALUE;\n            for(var index=0, size= this._dataSet.length; index<size; index++){\n                const currentPos = this._dataSet[index];\n                const distanceBetweenTwoPoints = this._distance(currentPos, mousePos);\n                \n                if(minDistance > distanceBetweenTwoPoints){\n                    minDistancePoint = currentPos;\n                    minDistance = Math.min(minDistance, distanceBetweenTwoPoints);\n                }\n            }\n            if(!this._preFocusPoint){\n                this._drawFocusPoint(minDistancePoint);\n                this._preFocusPoint = minDistancePoint;\n                return;\n            }\n            /*\n            if pre point isn't self, it need to render\n            */\n            if(this._preFocusPoint.index !== minDistancePoint.index){\n                this.render();\n                this._drawFocusPoint(minDistancePoint);\n            }\n            this._preFocusPoint = minDistancePoint;\n        }\n        \n        _distance(point1, point2){\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        }\n        \n        _clear(){\n            this._ctx.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n        }\n        \n        /* public */\n        draw(){\n            this._initFrame();\n            this._initLines();\n            this._initCircles();\n        }\n        \n        render(){\n            this._clear();\n            this.draw();\n            console.log('render');\n        }\n    }\n    \n    (function(global){\n        const canvasId = 'chart';\n        const matrix = [[10, 90], [30, 40], [70, 80], [90, 40], [120, 120], [150, 10], [190, 70]];\n        const radius = 4;\n        const chart = new Chart({\n            id: canvasId, \n            matrix: matrix,\n            radius: radius\n        });\n        chart.draw();\n        chart.printDataSet();\n        console.log('chart', chart);\n        console.log(chart._id);\n    })(this);\n</script>\n</p>\n<p>以下是完整的程式碼，看起來與java有點像…<br>也可以到我<a href=\"https://github.com/HengLin31/chart\" target=\"_blank\" rel=\"noopener\">github</a>上去下載完整的程式碼，今天的練習就到此結束了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(params)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._LINE_TENSION = <span class=\"number\">0.2</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._LINE_WIDTH_ORI = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._LINE_WIDTH_FOCUS = <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._COLOR_GRAY = <span class=\"string\">'gray'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._COLOR_WHITE = <span class=\"string\">'white'</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._id = params.id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._matrix = params.matrix;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._radius = params.radius;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._dataSet = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._curveDataSet = [];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvasWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvasHeight;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._preFocusPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _init()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>._id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>._canvas.getContext)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">\"can't get canvas context!\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvasWidth = <span class=\"keyword\">this</span>._canvas.width;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvasHeight = <span class=\"keyword\">this</span>._canvas.height;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx = <span class=\"keyword\">this</span>._canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initDataSet();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._bindMouseEvent();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _initDataSet()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._matrix.entries())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> reverseY = <span class=\"keyword\">this</span>._canvasHeight - point[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._dataSet.push(&#123;</span><br><span class=\"line\">                index: index,</span><br><span class=\"line\">                x: point[<span class=\"number\">0</span>],</span><br><span class=\"line\">                y: reverseY,</span><br><span class=\"line\">                color: <span class=\"keyword\">this</span>._randomColor()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _initFrame()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawRect(&#123;</span><br><span class=\"line\">            x: <span class=\"number\">0</span>,</span><br><span class=\"line\">            y: <span class=\"number\">0</span>,</span><br><span class=\"line\">            width: <span class=\"keyword\">this</span>._canvasWidth,</span><br><span class=\"line\">            height: <span class=\"keyword\">this</span>._canvasHeight,</span><br><span class=\"line\">            lineWidth: <span class=\"keyword\">this</span>._LINE_WIDTH_ORI,</span><br><span class=\"line\">            color: <span class=\"keyword\">this</span>._COLOR_GRAY</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _initLines()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> prePoint;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> [index, point] <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>._dataSet.entries())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                prePoint = point;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._drawLine(prePoint, point);</span><br><span class=\"line\">            prePoint = point;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _initCircles()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._dataSet.forEach(<span class=\"function\">(<span class=\"params\">point</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            _self._drawCircle(&#123;</span><br><span class=\"line\">                x: point.x, </span><br><span class=\"line\">                y: point.y, </span><br><span class=\"line\">                radius: _self._radius, </span><br><span class=\"line\">                lineWidth: _self._LINE_WIDTH_ORI,</span><br><span class=\"line\">                color: point.color</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _bindMouseEvent()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._canvas.addEventListener(<span class=\"string\">\"mousemove\"</span>, (event) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> rect = _self._canvas.getBoundingClientRect();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> x = event.clientX - rect.left;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> y = event.clientY - rect.top;</span><br><span class=\"line\">            _self._findNearPointByMouse(&#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _randomColor()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + (<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xFFFFFF</span> &lt;&lt; <span class=\"number\">0</span>).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _drawRect(params)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.lineWidth = params.lineWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.strokeStyle = params.color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.beginPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.rect(params.x, params.y, params.width, params.height);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _drawLine(point1, point2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.lineWidth = point2.lineWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.strokeStyle = point2.color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.beginPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.moveTo(point1.x, point1.y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.lineTo(point2.x, point2.y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _drawCircle(point)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.lineWidth = point.lineWidth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.beginPath();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.arc(point.x, point.y, point.radius, <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.strokeStyle = point.color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.fillStyle  = point.color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.fill();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _drawFocusPoint(point)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._drawCircle(&#123;<span class=\"attr\">x</span>: point.x, <span class=\"attr\">y</span>: point.y, <span class=\"attr\">radius</span>: <span class=\"keyword\">this</span>._radius, <span class=\"attr\">lineWidth</span>: <span class=\"keyword\">this</span>._LINE_WIDTH_FOCUS, <span class=\"attr\">color</span>: point.color&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _findNearPointByMouse(mousePos)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> minDistancePoint;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> minDistance = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index=<span class=\"number\">0</span>, size= <span class=\"keyword\">this</span>._dataSet.length; index&lt;size; index++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> currentPos = <span class=\"keyword\">this</span>._dataSet[index];</span><br><span class=\"line\">            <span class=\"keyword\">const</span> distanceBetweenTwoPoints = <span class=\"keyword\">this</span>._distance(currentPos, mousePos);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(minDistance &gt; distanceBetweenTwoPoints)&#123;</span><br><span class=\"line\">                minDistancePoint = currentPos;</span><br><span class=\"line\">                minDistance = <span class=\"built_in\">Math</span>.min(minDistance, distanceBetweenTwoPoints);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>._preFocusPoint)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._preFocusPoint = minDistancePoint;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        if pre point isn't self, it's need to render</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._preFocusPoint.index !== minDistancePoint.index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.render();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._drawFocusPoint(minDistancePoint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._preFocusPoint = minDistancePoint;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _distance(point1, point2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">Math</span>.pow(point1.x - point2.x, <span class=\"number\">2</span>) + <span class=\"built_in\">Math</span>.pow(point1.y - point2.y, <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _clear()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>._canvasWidth, <span class=\"keyword\">this</span>._canvasHeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* public */</span></span><br><span class=\"line\">    draw()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initFrame();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initLines();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initCircles();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._clear();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.draw();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cki16mr4q00040rpjwvr5tsin","tag_id":"cki16mr4v00080rpjv3jwlt2x","_id":"cki16mr52000h0rpjq02roaix"},{"post_id":"cki16mr4q00040rpjwvr5tsin","tag_id":"cki16mr4z000c0rpj6w3innpf","_id":"cki16mr53000j0rpjy8d7w7su"},{"post_id":"cki16mr4t00060rpjc5wqw09n","tag_id":"cki16mr51000f0rpjrb9m59m0","_id":"cki16mr56000m0rpjd117fnqv"},{"post_id":"cki16mr4x00090rpjemlraa1y","tag_id":"cki16mr51000f0rpjrb9m59m0","_id":"cki16mr59000q0rpjio92oqwu"},{"post_id":"cki16mr4y000a0rpjkdo818mm","tag_id":"cki16mr51000f0rpjrb9m59m0","_id":"cki16mr5a000u0rpjtlbn5u95"},{"post_id":"cki16mr4z000b0rpjounm4uuj","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5e00110rpjn8r9vtm7"},{"post_id":"cki16mr4z000b0rpjounm4uuj","tag_id":"cki16mr5c000w0rpjwjvc9gwn","_id":"cki16mr5f00130rpjmhiqyq2w"},{"post_id":"cki16mr5e00120rpjzkf337kx","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5g00160rpjx3k89rhs"},{"post_id":"cki16mr50000d0rpjzsl6vp6l","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5j001b0rpj01ljhhhq"},{"post_id":"cki16mr50000d0rpjzsl6vp6l","tag_id":"cki16mr5g00150rpjm1laq046","_id":"cki16mr5k001d0rpjywj2biqa"},{"post_id":"cki16mr51000e0rpj4xwh1qem","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5n001i0rpj35xek7ky"},{"post_id":"cki16mr51000e0rpj4xwh1qem","tag_id":"cki16mr5g00150rpjm1laq046","_id":"cki16mr5n001j0rpjwmmerj5a"},{"post_id":"cki16mr52000g0rpjnh8zigp2","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5o001m0rpjl750orgw"},{"post_id":"cki16mr52000g0rpjnh8zigp2","tag_id":"cki16mr5g00150rpjm1laq046","_id":"cki16mr5o001n0rpj5tf6uvhy"},{"post_id":"cki16mr53000i0rpjk95tjos8","tag_id":"cki16mr5o001l0rpj68e11nfr","_id":"cki16mr5p001p0rpjbjz0ykfc"},{"post_id":"cki16mr55000l0rpjo7plx2x0","tag_id":"cki16mr5p001o0rpjvpg29agb","_id":"cki16mr5p001r0rpjtp8r7udf"},{"post_id":"cki16mr57000n0rpj6m691tyi","tag_id":"cki16mr5o001l0rpj68e11nfr","_id":"cki16mr5q001t0rpjj9mgsahy"},{"post_id":"cki16mr58000p0rpj6gt7rrfq","tag_id":"cki16mr5p001s0rpjh30rpbeu","_id":"cki16mr5r001x0rpjq80g0nnx"},{"post_id":"cki16mr58000p0rpj6gt7rrfq","tag_id":"cki16mr5q001u0rpj9v5qigiz","_id":"cki16mr5r001y0rpjy7qgwc5q"},{"post_id":"cki16mr58000p0rpj6gt7rrfq","tag_id":"cki16mr5q001v0rpj1lxa7b3r","_id":"cki16mr5r00200rpjqe10bl5h"},{"post_id":"cki16mr59000r0rpj6s40kobs","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5s00220rpj32q0cozu"},{"post_id":"cki16mr59000r0rpj6s40kobs","tag_id":"cki16mr5g00150rpjm1laq046","_id":"cki16mr5s00230rpjevlh56sf"},{"post_id":"cki16mr5a000t0rpjfmkq4ya0","tag_id":"cki16mr5p001s0rpjh30rpbeu","_id":"cki16mr5t00260rpj5x8xe32v"},{"post_id":"cki16mr5a000t0rpjfmkq4ya0","tag_id":"cki16mr5o001l0rpj68e11nfr","_id":"cki16mr5t00270rpjb26f1xm3"},{"post_id":"cki16mr5b000v0rpjr9cwm7h3","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5t002a0rpjduap8xee"},{"post_id":"cki16mr5b000v0rpjr9cwm7h3","tag_id":"cki16mr5s00250rpj8rndbgb2","_id":"cki16mr5t002b0rpjkhjqo3p8"},{"post_id":"cki16mr5b000v0rpjr9cwm7h3","tag_id":"cki16mr5t00280rpjxwxgqjb3","_id":"cki16mr5u002d0rpjqr0yhjpx"},{"post_id":"cki16mr5c000x0rpjzplq64pl","tag_id":"cki16mr5t00290rpj466n1y3e","_id":"cki16mr5u002e0rpjauidhlqe"},{"post_id":"cki16mr5c000y0rpjsyavtsg5","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5u002g0rpj4bvp0rxs"},{"post_id":"cki16mr5c000y0rpjsyavtsg5","tag_id":"cki16mr5g00150rpjm1laq046","_id":"cki16mr5u002h0rpjhn2xfy0t"},{"post_id":"cki16mr5d000z0rpji7j4she7","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5v002j0rpjaju8ph4r"},{"post_id":"cki16mr5d000z0rpji7j4she7","tag_id":"cki16mr5g00150rpjm1laq046","_id":"cki16mr5v002k0rpj121y5jsu"},{"post_id":"cki16mr5f00140rpju8fh5844","tag_id":"cki16mr5u002i0rpjezhbhxfb","_id":"cki16mr5v002m0rpjwwbs8yvd"},{"post_id":"cki16mr5g00170rpjpkus34pq","tag_id":"cki16mr5v002l0rpj32oz15bl","_id":"cki16mr5w002o0rpjwyybiyhl"},{"post_id":"cki16mr5h00180rpj974ktz3y","tag_id":"cki16mr5t00290rpj466n1y3e","_id":"cki16mr5x002s0rpj0bu3e5u5"},{"post_id":"cki16mr5h00180rpj974ktz3y","tag_id":"cki16mr5w002p0rpjvcb2prsh","_id":"cki16mr5x002t0rpjp67lw5hh"},{"post_id":"cki16mr5h00180rpj974ktz3y","tag_id":"cki16mr5w002q0rpjsql2jt5t","_id":"cki16mr5x002v0rpjsztkgvxd"},{"post_id":"cki16mr5j001a0rpjwipwfwug","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr5x002w0rpj87hr1yq1"},{"post_id":"cki16mr5j001a0rpjwipwfwug","tag_id":"cki16mr5w002r0rpjza3467ij","_id":"cki16mr5y002y0rpj2h9rec5g"},{"post_id":"cki16mr5k001c0rpjuymemi91","tag_id":"cki16mr5p001o0rpjvpg29agb","_id":"cki16mr5y002z0rpj27cr0zun"},{"post_id":"cki16mr5l001f0rpjmkv8gtha","tag_id":"cki16mr5y002x0rpj3q3lfulg","_id":"cki16mr5z00310rpjyjpeh49n"},{"post_id":"cki16mr5m001g0rpj59drnd5m","tag_id":"cki16mr5y002x0rpj3q3lfulg","_id":"cki16mr5z00320rpjjg5uwc28"},{"post_id":"cki16mr6600330rpjtn22x2q9","tag_id":"cki16mr4v00080rpjv3jwlt2x","_id":"cki16mr6800350rpj3t726du8"},{"post_id":"cki16mr6600330rpjtn22x2q9","tag_id":"cki16mr4z000c0rpj6w3innpf","_id":"cki16mr6900370rpjxu3fm1yj"},{"post_id":"cki16mr6600340rpjkkpfsc4v","tag_id":"cki16mr5o001l0rpj68e11nfr","_id":"cki16mr6a003a0rpjhn690jlq"},{"post_id":"cki16mr6900380rpjsn9x05gd","tag_id":"cki16mr5a000s0rpja315j4m0","_id":"cki16mr6b003b0rpjlf2fk7q2"},{"post_id":"cki16mr6900380rpjsn9x05gd","tag_id":"cki16mr5g00150rpjm1laq046","_id":"cki16mr6c003c0rpj2eeijwyj"},{"post_id":"cki16mr6800360rpj0gxa4em5","tag_id":"cki16mr6a00390rpjn9ec0pxk","_id":"cki16mr6c003d0rpjjw34zbyg"},{"post_id":"cki16mr6m003e0rpj1t230p6p","tag_id":"cki16mr6a00390rpjn9ec0pxk","_id":"cki16mr6n003f0rpjtbgw1zip"},{"post_id":"cki16mr4n00020rpjark14an6","tag_id":"cki16mr51000f0rpjrb9m59m0","_id":"cki16t9kx000075pjimj52667"}],"Tag":[{"name":"hadoop","_id":"cki16mr4v00080rpjv3jwlt2x"},{"name":"big data","_id":"cki16mr4z000c0rpj6w3innpf"},{"name":"conference","_id":"cki16mr51000f0rpjrb9m59m0"},{"name":"java","_id":"cki16mr5a000s0rpja315j4m0"},{"name":"nio","_id":"cki16mr5c000w0rpjwjvc9gwn"},{"name":"thread","_id":"cki16mr5g00150rpjm1laq046"},{"name":"unit test","_id":"cki16mr5o001l0rpj68e11nfr"},{"name":"shell","_id":"cki16mr5p001o0rpjvpg29agb"},{"name":"gradle","_id":"cki16mr5p001s0rpjh30rpbeu"},{"name":"docker","_id":"cki16mr5q001u0rpj9v5qigiz"},{"name":"spring cloud","_id":"cki16mr5q001v0rpj1lxa7b3r"},{"name":"android","_id":"cki16mr5s00250rpj8rndbgb2"},{"name":"memory leak","_id":"cki16mr5t00280rpjxwxgqjb3"},{"name":"math","_id":"cki16mr5t00290rpj466n1y3e"},{"name":"hexo","_id":"cki16mr5u002i0rpjezhbhxfb"},{"name":"Blog","_id":"cki16mr5v002l0rpj32oz15bl"},{"name":"probability","_id":"cki16mr5w002p0rpjvcb2prsh"},{"name":"statistics","_id":"cki16mr5w002q0rpjsql2jt5t"},{"name":"clean code","_id":"cki16mr5w002r0rpjza3467ij"},{"name":"illustrator","_id":"cki16mr5y002x0rpj3q3lfulg"},{"name":"js","_id":"cki16mr6a00390rpjn9ec0pxk"}]}}